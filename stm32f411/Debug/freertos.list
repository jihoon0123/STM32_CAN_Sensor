
freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b124  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011d0  0800b2c8  0800b2c8  0000c2c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c498  0800c498  0000e1e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c498  0800c498  0000d498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4a0  0800c4a0  0000e1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4a0  0800c4a0  0000d4a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c4a4  0800c4a4  0000d4a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800c4a8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d1c  200001e0  0800c688  0000e1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004efc  0800c688  0000eefc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001de27  00000000  00000000  0000e210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004abc  00000000  00000000  0002c037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a98  00000000  00000000  00030af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000146d  00000000  00000000  00032590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c072  00000000  00000000  000339fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002075f  00000000  00000000  0004fa6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dccc  00000000  00000000  000701ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010de9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f40  00000000  00000000  0010dee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00115e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b2ac 	.word	0x0800b2ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800b2ac 	.word	0x0800b2ac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	4604      	mov	r4, r0
 8000f50:	4608      	mov	r0, r1
 8000f52:	4611      	mov	r1, r2
 8000f54:	461a      	mov	r2, r3
 8000f56:	4623      	mov	r3, r4
 8000f58:	80fb      	strh	r3, [r7, #6]
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	80bb      	strh	r3, [r7, #4]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	807b      	strh	r3, [r7, #2]
 8000f62:	4613      	mov	r3, r2
 8000f64:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000f66:	88f8      	ldrh	r0, [r7, #6]
 8000f68:	88b9      	ldrh	r1, [r7, #4]
 8000f6a:	887a      	ldrh	r2, [r7, #2]
 8000f6c:	883c      	ldrh	r4, [r7, #0]
 8000f6e:	8b3b      	ldrh	r3, [r7, #24]
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	4623      	mov	r3, r4
 8000f74:	f000 fa8c 	bl	8001490 <ST7735_FillRectangle>
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd90      	pop	{r4, r7, pc}

08000f80 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af02      	add	r7, sp, #8
 8000f86:	4603      	mov	r3, r0
 8000f88:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8000f8a:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <fillScreen+0x2c>)
 8000f8c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f90:	4b07      	ldr	r3, [pc, #28]	@ (8000fb0 <fillScreen+0x30>)
 8000f92:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f7ff ffd2 	bl	8000f48 <fillRect>
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	200001fc 	.word	0x200001fc
 8000fb0:	200001fe 	.word	0x200001fe

08000fb4 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2180      	movs	r1, #128	@ 0x80
 8000fbc:	4802      	ldr	r0, [pc, #8]	@ (8000fc8 <ST7735_Select+0x14>)
 8000fbe:	f002 fa4f 	bl	8003460 <HAL_GPIO_WritePin>
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40020400 	.word	0x40020400

08000fcc <ST7735_Unselect>:

void ST7735_Unselect()
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2180      	movs	r1, #128	@ 0x80
 8000fd4:	4802      	ldr	r0, [pc, #8]	@ (8000fe0 <ST7735_Unselect+0x14>)
 8000fd6:	f002 fa43 	bl	8003460 <HAL_GPIO_WritePin>
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40020400 	.word	0x40020400

08000fe4 <ST7735_Reset>:

void ST7735_Reset()
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fee:	4807      	ldr	r0, [pc, #28]	@ (800100c <ST7735_Reset+0x28>)
 8000ff0:	f002 fa36 	bl	8003460 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000ff4:	2005      	movs	r0, #5
 8000ff6:	f001 fcbf 	bl	8002978 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001000:	4802      	ldr	r0, [pc, #8]	@ (800100c <ST7735_Reset+0x28>)
 8001002:	f002 fa2d 	bl	8003460 <HAL_GPIO_WritePin>
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40020400 	.word	0x40020400

08001010 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001020:	4806      	ldr	r0, [pc, #24]	@ (800103c <ST7735_WriteCommand+0x2c>)
 8001022:	f002 fa1d 	bl	8003460 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001026:	1df9      	adds	r1, r7, #7
 8001028:	f04f 33ff 	mov.w	r3, #4294967295
 800102c:	2201      	movs	r2, #1
 800102e:	4804      	ldr	r0, [pc, #16]	@ (8001040 <ST7735_WriteCommand+0x30>)
 8001030:	f002 ff43 	bl	8003eba <HAL_SPI_Transmit>
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40020400 	.word	0x40020400
 8001040:	20000268 	.word	0x20000268

08001044 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001054:	4807      	ldr	r0, [pc, #28]	@ (8001074 <ST7735_WriteData+0x30>)
 8001056:	f002 fa03 	bl	8003460 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	b29a      	uxth	r2, r3
 800105e:	f04f 33ff 	mov.w	r3, #4294967295
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	4804      	ldr	r0, [pc, #16]	@ (8001078 <ST7735_WriteData+0x34>)
 8001066:	f002 ff28 	bl	8003eba <HAL_SPI_Transmit>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40020400 	.word	0x40020400
 8001078:	20000268 	.word	0x20000268

0800107c <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	1c5a      	adds	r2, r3, #1
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800108e:	e034      	b.n	80010fa <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	1c5a      	adds	r2, r3, #1
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800109a:	7afb      	ldrb	r3, [r7, #11]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ffb7 	bl	8001010 <ST7735_WriteCommand>

        numArgs = *addr++;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	1c5a      	adds	r2, r3, #1
 80010a6:	607a      	str	r2, [r7, #4]
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80010ac:	7abb      	ldrb	r3, [r7, #10]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010b4:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80010b6:	7abb      	ldrb	r3, [r7, #10]
 80010b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80010bc:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80010be:	7abb      	ldrb	r3, [r7, #10]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d008      	beq.n	80010d6 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80010c4:	7abb      	ldrb	r3, [r7, #10]
 80010c6:	4619      	mov	r1, r3
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ffbb 	bl	8001044 <ST7735_WriteData>
            addr += numArgs;
 80010ce:	7abb      	ldrb	r3, [r7, #10]
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	4413      	add	r3, r2
 80010d4:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80010d6:	89bb      	ldrh	r3, [r7, #12]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d00e      	beq.n	80010fa <DisplayInit+0x7e>
            ms = *addr++;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	1c5a      	adds	r2, r3, #1
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80010e6:	89bb      	ldrh	r3, [r7, #12]
 80010e8:	2bff      	cmp	r3, #255	@ 0xff
 80010ea:	d102      	bne.n	80010f2 <DisplayInit+0x76>
 80010ec:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80010f0:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80010f2:	89bb      	ldrh	r3, [r7, #12]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f001 fc3f 	bl	8002978 <HAL_Delay>
    while(numCommands--) {
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	1e5a      	subs	r2, r3, #1
 80010fe:	73fa      	strb	r2, [r7, #15]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1c5      	bne.n	8001090 <DisplayInit+0x14>
        }
    }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	4604      	mov	r4, r0
 8001118:	4608      	mov	r0, r1
 800111a:	4611      	mov	r1, r2
 800111c:	461a      	mov	r2, r3
 800111e:	4623      	mov	r3, r4
 8001120:	71fb      	strb	r3, [r7, #7]
 8001122:	4603      	mov	r3, r0
 8001124:	71bb      	strb	r3, [r7, #6]
 8001126:	460b      	mov	r3, r1
 8001128:	717b      	strb	r3, [r7, #5]
 800112a:	4613      	mov	r3, r2
 800112c:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800112e:	202a      	movs	r0, #42	@ 0x2a
 8001130:	f7ff ff6e 	bl	8001010 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8001134:	2300      	movs	r3, #0
 8001136:	733b      	strb	r3, [r7, #12]
 8001138:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <ST7735_SetAddressWindow+0x88>)
 800113a:	781a      	ldrb	r2, [r3, #0]
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	4413      	add	r3, r2
 8001140:	b2db      	uxtb	r3, r3
 8001142:	737b      	strb	r3, [r7, #13]
 8001144:	2300      	movs	r3, #0
 8001146:	73bb      	strb	r3, [r7, #14]
 8001148:	4b13      	ldr	r3, [pc, #76]	@ (8001198 <ST7735_SetAddressWindow+0x88>)
 800114a:	781a      	ldrb	r2, [r3, #0]
 800114c:	797b      	ldrb	r3, [r7, #5]
 800114e:	4413      	add	r3, r2
 8001150:	b2db      	uxtb	r3, r3
 8001152:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	2104      	movs	r1, #4
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ff72 	bl	8001044 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001160:	202b      	movs	r0, #43	@ 0x2b
 8001162:	f7ff ff55 	bl	8001010 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8001166:	4b0d      	ldr	r3, [pc, #52]	@ (800119c <ST7735_SetAddressWindow+0x8c>)
 8001168:	781a      	ldrb	r2, [r3, #0]
 800116a:	79bb      	ldrb	r3, [r7, #6]
 800116c:	4413      	add	r3, r2
 800116e:	b2db      	uxtb	r3, r3
 8001170:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8001172:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <ST7735_SetAddressWindow+0x8c>)
 8001174:	781a      	ldrb	r2, [r3, #0]
 8001176:	793b      	ldrb	r3, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	b2db      	uxtb	r3, r3
 800117c:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800117e:	f107 030c 	add.w	r3, r7, #12
 8001182:	2104      	movs	r1, #4
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff5d 	bl	8001044 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800118a:	202c      	movs	r0, #44	@ 0x2c
 800118c:	f7ff ff40 	bl	8001010 <ST7735_WriteCommand>
}
 8001190:	bf00      	nop
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	bd90      	pop	{r4, r7, pc}
 8001198:	20000203 	.word	0x20000203
 800119c:	20000204 	.word	0x20000204

080011a0 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 80011aa:	f7ff ff03 	bl	8000fb4 <ST7735_Select>
    ST7735_Reset();
 80011ae:	f7ff ff19 	bl	8000fe4 <ST7735_Reset>
    DisplayInit(init_cmds1);
 80011b2:	480c      	ldr	r0, [pc, #48]	@ (80011e4 <ST7735_Init+0x44>)
 80011b4:	f7ff ff62 	bl	800107c <DisplayInit>
    DisplayInit(init_cmds2);
 80011b8:	480b      	ldr	r0, [pc, #44]	@ (80011e8 <ST7735_Init+0x48>)
 80011ba:	f7ff ff5f 	bl	800107c <DisplayInit>
    DisplayInit(init_cmds3);
 80011be:	480b      	ldr	r0, [pc, #44]	@ (80011ec <ST7735_Init+0x4c>)
 80011c0:	f7ff ff5c 	bl	800107c <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 80011c4:	4b0a      	ldr	r3, [pc, #40]	@ (80011f0 <ST7735_Init+0x50>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 80011ca:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <ST7735_Init+0x54>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 f810 	bl	80011f8 <ST7735_SetRotation>
    ST7735_Unselect();
 80011d8:	f7ff fef8 	bl	8000fcc <ST7735_Unselect>

}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	0800b314 	.word	0x0800b314
 80011e8:	0800b34c 	.word	0x0800b34c
 80011ec:	0800b35c 	.word	0x0800b35c
 80011f0:	20000201 	.word	0x20000201
 80011f4:	20000202 	.word	0x20000202

080011f8 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4b33      	ldr	r3, [pc, #204]	@ (80012dc <ST7735_SetRotation+0xe4>)
 8001210:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8001212:	4b32      	ldr	r3, [pc, #200]	@ (80012dc <ST7735_SetRotation+0xe4>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b03      	cmp	r3, #3
 8001218:	d84e      	bhi.n	80012b8 <ST7735_SetRotation+0xc0>
 800121a:	a201      	add	r2, pc, #4	@ (adr r2, 8001220 <ST7735_SetRotation+0x28>)
 800121c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001220:	08001231 	.word	0x08001231
 8001224:	08001253 	.word	0x08001253
 8001228:	08001275 	.word	0x08001275
 800122c:	08001297 	.word	0x08001297
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8001230:	23c0      	movs	r3, #192	@ 0xc0
 8001232:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8001234:	4b2a      	ldr	r3, [pc, #168]	@ (80012e0 <ST7735_SetRotation+0xe8>)
 8001236:	22a0      	movs	r2, #160	@ 0xa0
 8001238:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800123a:	4b2a      	ldr	r3, [pc, #168]	@ (80012e4 <ST7735_SetRotation+0xec>)
 800123c:	2280      	movs	r2, #128	@ 0x80
 800123e:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8001240:	4b29      	ldr	r3, [pc, #164]	@ (80012e8 <ST7735_SetRotation+0xf0>)
 8001242:	781a      	ldrb	r2, [r3, #0]
 8001244:	4b29      	ldr	r3, [pc, #164]	@ (80012ec <ST7735_SetRotation+0xf4>)
 8001246:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8001248:	4b29      	ldr	r3, [pc, #164]	@ (80012f0 <ST7735_SetRotation+0xf8>)
 800124a:	781a      	ldrb	r2, [r3, #0]
 800124c:	4b29      	ldr	r3, [pc, #164]	@ (80012f4 <ST7735_SetRotation+0xfc>)
 800124e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001250:	e032      	b.n	80012b8 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8001252:	23a0      	movs	r3, #160	@ 0xa0
 8001254:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8001256:	4b23      	ldr	r3, [pc, #140]	@ (80012e4 <ST7735_SetRotation+0xec>)
 8001258:	22a0      	movs	r2, #160	@ 0xa0
 800125a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 800125c:	4b20      	ldr	r3, [pc, #128]	@ (80012e0 <ST7735_SetRotation+0xe8>)
 800125e:	2280      	movs	r2, #128	@ 0x80
 8001260:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8001262:	4b21      	ldr	r3, [pc, #132]	@ (80012e8 <ST7735_SetRotation+0xf0>)
 8001264:	781a      	ldrb	r2, [r3, #0]
 8001266:	4b23      	ldr	r3, [pc, #140]	@ (80012f4 <ST7735_SetRotation+0xfc>)
 8001268:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800126a:	4b21      	ldr	r3, [pc, #132]	@ (80012f0 <ST7735_SetRotation+0xf8>)
 800126c:	781a      	ldrb	r2, [r3, #0]
 800126e:	4b1f      	ldr	r3, [pc, #124]	@ (80012ec <ST7735_SetRotation+0xf4>)
 8001270:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001272:	e021      	b.n	80012b8 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8001274:	2300      	movs	r3, #0
 8001276:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8001278:	4b19      	ldr	r3, [pc, #100]	@ (80012e0 <ST7735_SetRotation+0xe8>)
 800127a:	22a0      	movs	r2, #160	@ 0xa0
 800127c:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800127e:	4b19      	ldr	r3, [pc, #100]	@ (80012e4 <ST7735_SetRotation+0xec>)
 8001280:	2280      	movs	r2, #128	@ 0x80
 8001282:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8001284:	4b18      	ldr	r3, [pc, #96]	@ (80012e8 <ST7735_SetRotation+0xf0>)
 8001286:	781a      	ldrb	r2, [r3, #0]
 8001288:	4b18      	ldr	r3, [pc, #96]	@ (80012ec <ST7735_SetRotation+0xf4>)
 800128a:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 800128c:	4b18      	ldr	r3, [pc, #96]	@ (80012f0 <ST7735_SetRotation+0xf8>)
 800128e:	781a      	ldrb	r2, [r3, #0]
 8001290:	4b18      	ldr	r3, [pc, #96]	@ (80012f4 <ST7735_SetRotation+0xfc>)
 8001292:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001294:	e010      	b.n	80012b8 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8001296:	2360      	movs	r3, #96	@ 0x60
 8001298:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800129a:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <ST7735_SetRotation+0xec>)
 800129c:	22a0      	movs	r2, #160	@ 0xa0
 800129e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <ST7735_SetRotation+0xe8>)
 80012a2:	2280      	movs	r2, #128	@ 0x80
 80012a4:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80012a6:	4b10      	ldr	r3, [pc, #64]	@ (80012e8 <ST7735_SetRotation+0xf0>)
 80012a8:	781a      	ldrb	r2, [r3, #0]
 80012aa:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <ST7735_SetRotation+0xfc>)
 80012ac:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80012ae:	4b10      	ldr	r3, [pc, #64]	@ (80012f0 <ST7735_SetRotation+0xf8>)
 80012b0:	781a      	ldrb	r2, [r3, #0]
 80012b2:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <ST7735_SetRotation+0xf4>)
 80012b4:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80012b6:	bf00      	nop
  }
  ST7735_Select();
 80012b8:	f7ff fe7c 	bl	8000fb4 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 80012bc:	2036      	movs	r0, #54	@ 0x36
 80012be:	f7ff fea7 	bl	8001010 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 80012c2:	f107 030f 	add.w	r3, r7, #15
 80012c6:	2101      	movs	r1, #1
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff febb 	bl	8001044 <ST7735_WriteData>
  ST7735_Unselect();
 80012ce:	f7ff fe7d 	bl	8000fcc <ST7735_Unselect>
}
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000200 	.word	0x20000200
 80012e0:	200001fe 	.word	0x200001fe
 80012e4:	200001fc 	.word	0x200001fc
 80012e8:	20000201 	.word	0x20000201
 80012ec:	20000203 	.word	0x20000203
 80012f0:	20000202 	.word	0x20000202
 80012f4:	20000204 	.word	0x20000204

080012f8 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80012f8:	b082      	sub	sp, #8
 80012fa:	b590      	push	{r4, r7, lr}
 80012fc:	b089      	sub	sp, #36	@ 0x24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	637b      	str	r3, [r7, #52]	@ 0x34
 8001302:	4603      	mov	r3, r0
 8001304:	80fb      	strh	r3, [r7, #6]
 8001306:	460b      	mov	r3, r1
 8001308:	80bb      	strh	r3, [r7, #4]
 800130a:	4613      	mov	r3, r2
 800130c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800130e:	88fb      	ldrh	r3, [r7, #6]
 8001310:	b2d8      	uxtb	r0, r3
 8001312:	88bb      	ldrh	r3, [r7, #4]
 8001314:	b2d9      	uxtb	r1, r3
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800131e:	4413      	add	r3, r2
 8001320:	b2db      	uxtb	r3, r3
 8001322:	3b01      	subs	r3, #1
 8001324:	b2dc      	uxtb	r4, r3
 8001326:	88bb      	ldrh	r3, [r7, #4]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800132e:	4413      	add	r3, r2
 8001330:	b2db      	uxtb	r3, r3
 8001332:	3b01      	subs	r3, #1
 8001334:	b2db      	uxtb	r3, r3
 8001336:	4622      	mov	r2, r4
 8001338:	f7ff feea 	bl	8001110 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
 8001340:	e043      	b.n	80013ca <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8001342:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001344:	78fb      	ldrb	r3, [r7, #3]
 8001346:	3b20      	subs	r3, #32
 8001348:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 800134c:	fb01 f303 	mul.w	r3, r1, r3
 8001350:	4619      	mov	r1, r3
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	440b      	add	r3, r1
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	4413      	add	r3, r2
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
 8001362:	e029      	b.n	80013b8 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d00e      	beq.n	8001392 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001374:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001376:	0a1b      	lsrs	r3, r3, #8
 8001378:	b29b      	uxth	r3, r3
 800137a:	b2db      	uxtb	r3, r3
 800137c:	743b      	strb	r3, [r7, #16]
 800137e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001380:	b2db      	uxtb	r3, r3
 8001382:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001384:	f107 0310 	add.w	r3, r7, #16
 8001388:	2102      	movs	r1, #2
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fe5a 	bl	8001044 <ST7735_WriteData>
 8001390:	e00f      	b.n	80013b2 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001392:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001396:	0a1b      	lsrs	r3, r3, #8
 8001398:	b29b      	uxth	r3, r3
 800139a:	b2db      	uxtb	r3, r3
 800139c:	733b      	strb	r3, [r7, #12]
 800139e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	2102      	movs	r1, #2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fe49 	bl	8001044 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	3301      	adds	r3, #1
 80013b6:	61bb      	str	r3, [r7, #24]
 80013b8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80013bc:	461a      	mov	r2, r3
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d3cf      	bcc.n	8001364 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	3301      	adds	r3, #1
 80013c8:	61fb      	str	r3, [r7, #28]
 80013ca:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80013ce:	461a      	mov	r2, r3
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d3b5      	bcc.n	8001342 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80013d6:	bf00      	nop
 80013d8:	bf00      	nop
 80013da:	3724      	adds	r7, #36	@ 0x24
 80013dc:	46bd      	mov	sp, r7
 80013de:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80013e2:	b002      	add	sp, #8
 80013e4:	4770      	bx	lr
	...

080013e8 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80013e8:	b082      	sub	sp, #8
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b086      	sub	sp, #24
 80013ee:	af04      	add	r7, sp, #16
 80013f0:	603a      	str	r2, [r7, #0]
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	4603      	mov	r3, r0
 80013f6:	80fb      	strh	r3, [r7, #6]
 80013f8:	460b      	mov	r3, r1
 80013fa:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80013fc:	f7ff fdda 	bl	8000fb4 <ST7735_Select>

    while(*str) {
 8001400:	e033      	b.n	800146a <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8001402:	88fb      	ldrh	r3, [r7, #6]
 8001404:	7d3a      	ldrb	r2, [r7, #20]
 8001406:	4413      	add	r3, r2
 8001408:	4a1f      	ldr	r2, [pc, #124]	@ (8001488 <ST7735_WriteString+0xa0>)
 800140a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800140e:	4293      	cmp	r3, r2
 8001410:	db16      	blt.n	8001440 <ST7735_WriteString+0x58>
            x = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001416:	7d7b      	ldrb	r3, [r7, #21]
 8001418:	461a      	mov	r2, r3
 800141a:	88bb      	ldrh	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8001420:	88bb      	ldrh	r3, [r7, #4]
 8001422:	7d7a      	ldrb	r2, [r7, #21]
 8001424:	4413      	add	r3, r2
 8001426:	4a19      	ldr	r2, [pc, #100]	@ (800148c <ST7735_WriteString+0xa4>)
 8001428:	f9b2 2000 	ldrsh.w	r2, [r2]
 800142c:	4293      	cmp	r3, r2
 800142e:	da21      	bge.n	8001474 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b20      	cmp	r3, #32
 8001436:	d103      	bne.n	8001440 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	3301      	adds	r3, #1
 800143c:	603b      	str	r3, [r7, #0]
                continue;
 800143e:	e014      	b.n	800146a <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	781a      	ldrb	r2, [r3, #0]
 8001444:	88b9      	ldrh	r1, [r7, #4]
 8001446:	88f8      	ldrh	r0, [r7, #6]
 8001448:	8c3b      	ldrh	r3, [r7, #32]
 800144a:	9302      	str	r3, [sp, #8]
 800144c:	8bbb      	ldrh	r3, [r7, #28]
 800144e:	9301      	str	r3, [sp, #4]
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	f7ff ff4f 	bl	80012f8 <ST7735_WriteChar>
        x += font.width;
 800145a:	7d3b      	ldrb	r3, [r7, #20]
 800145c:	461a      	mov	r2, r3
 800145e:	88fb      	ldrh	r3, [r7, #6]
 8001460:	4413      	add	r3, r2
 8001462:	80fb      	strh	r3, [r7, #6]
        str++;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	3301      	adds	r3, #1
 8001468:	603b      	str	r3, [r7, #0]
    while(*str) {
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1c7      	bne.n	8001402 <ST7735_WriteString+0x1a>
 8001472:	e000      	b.n	8001476 <ST7735_WriteString+0x8e>
                break;
 8001474:	bf00      	nop
    }

    ST7735_Unselect();
 8001476:	f7ff fda9 	bl	8000fcc <ST7735_Unselect>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001484:	b002      	add	sp, #8
 8001486:	4770      	bx	lr
 8001488:	200001fc 	.word	0x200001fc
 800148c:	200001fe 	.word	0x200001fe

08001490 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	4604      	mov	r4, r0
 8001498:	4608      	mov	r0, r1
 800149a:	4611      	mov	r1, r2
 800149c:	461a      	mov	r2, r3
 800149e:	4623      	mov	r3, r4
 80014a0:	80fb      	strh	r3, [r7, #6]
 80014a2:	4603      	mov	r3, r0
 80014a4:	80bb      	strh	r3, [r7, #4]
 80014a6:	460b      	mov	r3, r1
 80014a8:	807b      	strh	r3, [r7, #2]
 80014aa:	4613      	mov	r3, r2
 80014ac:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 80014ae:	88fb      	ldrh	r3, [r7, #6]
 80014b0:	4a38      	ldr	r2, [pc, #224]	@ (8001594 <ST7735_FillRectangle+0x104>)
 80014b2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014b6:	4293      	cmp	r3, r2
 80014b8:	da67      	bge.n	800158a <ST7735_FillRectangle+0xfa>
 80014ba:	88bb      	ldrh	r3, [r7, #4]
 80014bc:	4a36      	ldr	r2, [pc, #216]	@ (8001598 <ST7735_FillRectangle+0x108>)
 80014be:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014c2:	4293      	cmp	r3, r2
 80014c4:	da61      	bge.n	800158a <ST7735_FillRectangle+0xfa>
    if((x + w - 1) >= _width) w = _width - x;
 80014c6:	88fa      	ldrh	r2, [r7, #6]
 80014c8:	887b      	ldrh	r3, [r7, #2]
 80014ca:	4413      	add	r3, r2
 80014cc:	4a31      	ldr	r2, [pc, #196]	@ (8001594 <ST7735_FillRectangle+0x104>)
 80014ce:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014d2:	4293      	cmp	r3, r2
 80014d4:	dd06      	ble.n	80014e4 <ST7735_FillRectangle+0x54>
 80014d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001594 <ST7735_FillRectangle+0x104>)
 80014d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014dc:	b29a      	uxth	r2, r3
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 80014e4:	88ba      	ldrh	r2, [r7, #4]
 80014e6:	883b      	ldrh	r3, [r7, #0]
 80014e8:	4413      	add	r3, r2
 80014ea:	4a2b      	ldr	r2, [pc, #172]	@ (8001598 <ST7735_FillRectangle+0x108>)
 80014ec:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014f0:	4293      	cmp	r3, r2
 80014f2:	dd06      	ble.n	8001502 <ST7735_FillRectangle+0x72>
 80014f4:	4b28      	ldr	r3, [pc, #160]	@ (8001598 <ST7735_FillRectangle+0x108>)
 80014f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	88bb      	ldrh	r3, [r7, #4]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001502:	f7ff fd57 	bl	8000fb4 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	b2d8      	uxtb	r0, r3
 800150a:	88bb      	ldrh	r3, [r7, #4]
 800150c:	b2d9      	uxtb	r1, r3
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	b2da      	uxtb	r2, r3
 8001512:	887b      	ldrh	r3, [r7, #2]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	4413      	add	r3, r2
 8001518:	b2db      	uxtb	r3, r3
 800151a:	3b01      	subs	r3, #1
 800151c:	b2dc      	uxtb	r4, r3
 800151e:	88bb      	ldrh	r3, [r7, #4]
 8001520:	b2da      	uxtb	r2, r3
 8001522:	883b      	ldrh	r3, [r7, #0]
 8001524:	b2db      	uxtb	r3, r3
 8001526:	4413      	add	r3, r2
 8001528:	b2db      	uxtb	r3, r3
 800152a:	3b01      	subs	r3, #1
 800152c:	b2db      	uxtb	r3, r3
 800152e:	4622      	mov	r2, r4
 8001530:	f7ff fdee 	bl	8001110 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001534:	8c3b      	ldrh	r3, [r7, #32]
 8001536:	0a1b      	lsrs	r3, r3, #8
 8001538:	b29b      	uxth	r3, r3
 800153a:	b2db      	uxtb	r3, r3
 800153c:	733b      	strb	r3, [r7, #12]
 800153e:	8c3b      	ldrh	r3, [r7, #32]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001544:	2201      	movs	r2, #1
 8001546:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800154a:	4814      	ldr	r0, [pc, #80]	@ (800159c <ST7735_FillRectangle+0x10c>)
 800154c:	f001 ff88 	bl	8003460 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001550:	883b      	ldrh	r3, [r7, #0]
 8001552:	80bb      	strh	r3, [r7, #4]
 8001554:	e013      	b.n	800157e <ST7735_FillRectangle+0xee>
        for(x = w; x > 0; x--) {
 8001556:	887b      	ldrh	r3, [r7, #2]
 8001558:	80fb      	strh	r3, [r7, #6]
 800155a:	e00a      	b.n	8001572 <ST7735_FillRectangle+0xe2>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800155c:	f107 010c 	add.w	r1, r7, #12
 8001560:	f04f 33ff 	mov.w	r3, #4294967295
 8001564:	2202      	movs	r2, #2
 8001566:	480e      	ldr	r0, [pc, #56]	@ (80015a0 <ST7735_FillRectangle+0x110>)
 8001568:	f002 fca7 	bl	8003eba <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	3b01      	subs	r3, #1
 8001570:	80fb      	strh	r3, [r7, #6]
 8001572:	88fb      	ldrh	r3, [r7, #6]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1f1      	bne.n	800155c <ST7735_FillRectangle+0xcc>
    for(y = h; y > 0; y--) {
 8001578:	88bb      	ldrh	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	80bb      	strh	r3, [r7, #4]
 800157e:	88bb      	ldrh	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1e8      	bne.n	8001556 <ST7735_FillRectangle+0xc6>
        }
    }

    ST7735_Unselect();
 8001584:	f7ff fd22 	bl	8000fcc <ST7735_Unselect>
 8001588:	e000      	b.n	800158c <ST7735_FillRectangle+0xfc>
    if((x >= _width) || (y >= _height)) return;
 800158a:	bf00      	nop
}
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	bd90      	pop	{r4, r7, pc}
 8001592:	bf00      	nop
 8001594:	200001fc 	.word	0x200001fc
 8001598:	200001fe 	.word	0x200001fe
 800159c:	40020400 	.word	0x40020400
 80015a0:	20000268 	.word	0x20000268

080015a4 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0
  RXM0 RXM0reg;
  RXM1 RXM1reg;

  /* Intialize Rx Mask values */

  RXM0reg.RXM0SIDH = 0x00;
 80015aa:	2300      	movs	r3, #0
 80015ac:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 80015ae:	2300      	movs	r3, #0
 80015b0:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 80015b2:	2300      	movs	r3, #0
 80015b4:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 80015b6:	2300      	movs	r3, #0
 80015b8:	71fb      	strb	r3, [r7, #7]

  RXM1reg.RXM1SIDH = 0x00;
 80015ba:	2300      	movs	r3, #0
 80015bc:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 80015be:	2300      	movs	r3, #0
 80015c0:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 80015c2:	2300      	movs	r3, #0
 80015c4:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 80015c6:	2300      	movs	r3, #0
 80015c8:	70fb      	strb	r3, [r7, #3]

  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;
 80015ca:	2300      	movs	r3, #0
 80015cc:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 80015ce:	2300      	movs	r3, #0
 80015d0:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 80015d2:	2300      	movs	r3, #0
 80015d4:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 80015d6:	2300      	movs	r3, #0
 80015d8:	77fb      	strb	r3, [r7, #31]

  RXF1reg.RXF1SIDH = 0x00;
 80015da:	2300      	movs	r3, #0
 80015dc:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 80015de:	2308      	movs	r3, #8
 80015e0:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 80015e2:	2300      	movs	r3, #0
 80015e4:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 80015e6:	2300      	movs	r3, #0
 80015e8:	76fb      	strb	r3, [r7, #27]

  RXF2reg.RXF2SIDH = 0x00;
 80015ea:	2300      	movs	r3, #0
 80015ec:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 80015ee:	2300      	movs	r3, #0
 80015f0:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 80015f2:	2300      	movs	r3, #0
 80015f4:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 80015f6:	2300      	movs	r3, #0
 80015f8:	75fb      	strb	r3, [r7, #23]

  RXF3reg.RXF3SIDH = 0x00;
 80015fa:	2300      	movs	r3, #0
 80015fc:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 80015fe:	2300      	movs	r3, #0
 8001600:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8001602:	2300      	movs	r3, #0
 8001604:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 8001606:	2300      	movs	r3, #0
 8001608:	74fb      	strb	r3, [r7, #19]

  RXF4reg.RXF4SIDH = 0x00;
 800160a:	2300      	movs	r3, #0
 800160c:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 800160e:	2300      	movs	r3, #0
 8001610:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8001612:	2300      	movs	r3, #0
 8001614:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 8001616:	2300      	movs	r3, #0
 8001618:	73fb      	strb	r3, [r7, #15]

  RXF5reg.RXF5SIDH = 0x00;
 800161a:	2300      	movs	r3, #0
 800161c:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 800161e:	2308      	movs	r3, #8
 8001620:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8001622:	2300      	movs	r3, #0
 8001624:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 8001626:	2300      	movs	r3, #0
 8001628:	72fb      	strb	r3, [r7, #11]

  /* Intialize MCP2515, check SPI */
  if(!MCP2515_Initialize())
 800162a:	f000 fbe7 	bl	8001dfc <MCP2515_Initialize>
 800162e:	4603      	mov	r3, r0
 8001630:	f083 0301 	eor.w	r3, r3, #1
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <CANSPI_Initialize+0x9a>
  {
    return false;
 800163a:	2300      	movs	r3, #0
 800163c:	e05e      	b.n	80016fc <CANSPI_Initialize+0x158>
  }

  /* Change mode as configuration mode */
  if(!MCP2515_SetConfigMode())
 800163e:	f000 fbff 	bl	8001e40 <MCP2515_SetConfigMode>
 8001642:	4603      	mov	r3, r0
 8001644:	f083 0301 	eor.w	r3, r3, #1
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <CANSPI_Initialize+0xae>
  {
    return false;
 800164e:	2300      	movs	r3, #0
 8001650:	e054      	b.n	80016fc <CANSPI_Initialize+0x158>
  }

  /* Configure filter & mask */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	461a      	mov	r2, r3
 8001656:	2123      	movs	r1, #35	@ 0x23
 8001658:	2020      	movs	r0, #32
 800165a:	f000 fc95 	bl	8001f88 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 800165e:	463b      	mov	r3, r7
 8001660:	461a      	mov	r2, r3
 8001662:	2127      	movs	r1, #39	@ 0x27
 8001664:	2024      	movs	r0, #36	@ 0x24
 8001666:	f000 fc8f 	bl	8001f88 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 800166a:	f107 031c 	add.w	r3, r7, #28
 800166e:	461a      	mov	r2, r3
 8001670:	2103      	movs	r1, #3
 8001672:	2000      	movs	r0, #0
 8001674:	f000 fc88 	bl	8001f88 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8001678:	f107 0318 	add.w	r3, r7, #24
 800167c:	461a      	mov	r2, r3
 800167e:	2107      	movs	r1, #7
 8001680:	2004      	movs	r0, #4
 8001682:	f000 fc81 	bl	8001f88 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	461a      	mov	r2, r3
 800168c:	210b      	movs	r1, #11
 800168e:	2008      	movs	r0, #8
 8001690:	f000 fc7a 	bl	8001f88 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8001694:	f107 0310 	add.w	r3, r7, #16
 8001698:	461a      	mov	r2, r3
 800169a:	2113      	movs	r1, #19
 800169c:	2010      	movs	r0, #16
 800169e:	f000 fc73 	bl	8001f88 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 80016a2:	f107 030c 	add.w	r3, r7, #12
 80016a6:	461a      	mov	r2, r3
 80016a8:	2117      	movs	r1, #23
 80016aa:	2014      	movs	r0, #20
 80016ac:	f000 fc6c 	bl	8001f88 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 80016b0:	f107 0308 	add.w	r3, r7, #8
 80016b4:	461a      	mov	r2, r3
 80016b6:	211b      	movs	r1, #27
 80016b8:	2018      	movs	r0, #24
 80016ba:	f000 fc65 	bl	8001f88 <MCP2515_WriteByteSequence>

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 80016be:	2104      	movs	r1, #4
 80016c0:	2060      	movs	r0, #96	@ 0x60
 80016c2:	f000 fc3d 	bl	8001f40 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 80016c6:	2101      	movs	r1, #1
 80016c8:	2070      	movs	r0, #112	@ 0x70
 80016ca:	f000 fc39 	bl	8001f40 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */

  /* 00(SJW 1tq) 000000 */
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 80016ce:	2100      	movs	r1, #0
 80016d0:	202a      	movs	r0, #42	@ 0x2a
 80016d2:	f000 fc35 	bl	8001f40 <MCP2515_WriteByte>

  /* 1 1 100(5tq) 101(6tq) */
  MCP2515_WriteByte(MCP2515_CNF2, 0xF1);
 80016d6:	21f1      	movs	r1, #241	@ 0xf1
 80016d8:	2029      	movs	r0, #41	@ 0x29
 80016da:	f000 fc31 	bl	8001f40 <MCP2515_WriteByte>

  /* 1 0 000 011(4tq) */
  MCP2515_WriteByte(MCP2515_CNF3, 0x85);
 80016de:	2185      	movs	r1, #133	@ 0x85
 80016e0:	2028      	movs	r0, #40	@ 0x28
 80016e2:	f000 fc2d 	bl	8001f40 <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 80016e6:	f000 fbc9 	bl	8001e7c <MCP2515_SetNormalMode>
 80016ea:	4603      	mov	r3, r0
 80016ec:	f083 0301 	eor.w	r3, r3, #1
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <CANSPI_Initialize+0x156>
    return false;
 80016f6:	2300      	movs	r3, #0
 80016f8:	e000      	b.n	80016fc <CANSPI_Initialize+0x158>

  return true;
 80016fa:	2301      	movs	r3, #1
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3720      	adds	r7, #32
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <CANSPI_Receive>:
  return (returnValue);
}

/* Receive CAN message */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;

  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 8001710:	f000 fc64 	bl	8001fdc <MCP2515_GetRxStatus>
 8001714:	4603      	mov	r3, r0
 8001716:	733b      	strb	r3, [r7, #12]

  /* Check receive buffer */
  if (rxStatus.rxBuffer != 0)
 8001718:	7b3b      	ldrb	r3, [r7, #12]
 800171a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b00      	cmp	r3, #0
 8001722:	d070      	beq.n	8001806 <CANSPI_Receive+0x102>
  {
    /* finding buffer which has a message */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8001724:	7b3b      	ldrb	r3, [r7, #12]
 8001726:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b40      	cmp	r3, #64	@ 0x40
 800172e:	bf0c      	ite	eq
 8001730:	2301      	moveq	r3, #1
 8001732:	2300      	movne	r3, #0
 8001734:	b2da      	uxtb	r2, r3
 8001736:	7b3b      	ldrb	r3, [r7, #12]
 8001738:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2bc0      	cmp	r3, #192	@ 0xc0
 8001740:	bf0c      	ite	eq
 8001742:	2301      	moveq	r3, #1
 8001744:	2300      	movne	r3, #0
 8001746:	b2db      	uxtb	r3, r3
 8001748:	4313      	orrs	r3, r2
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b00      	cmp	r3, #0
 800174e:	d00c      	beq.n	800176a <CANSPI_Receive+0x66>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8001750:	f107 0310 	add.w	r3, r7, #16
 8001754:	220d      	movs	r2, #13
 8001756:	4619      	mov	r1, r3
 8001758:	2090      	movs	r0, #144	@ 0x90
 800175a:	f000 fbcf 	bl	8001efc <MCP2515_ReadRxSequence>
      MCP2515_BitModify(MCP2515_CANINTF, 0x01, 0x00);
 800175e:	2200      	movs	r2, #0
 8001760:	2101      	movs	r1, #1
 8001762:	202c      	movs	r0, #44	@ 0x2c
 8001764:	f000 fc56 	bl	8002014 <MCP2515_BitModify>
 8001768:	e011      	b.n	800178e <CANSPI_Receive+0x8a>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 800176a:	7b3b      	ldrb	r3, [r7, #12]
 800176c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b80      	cmp	r3, #128	@ 0x80
 8001774:	d10b      	bne.n	800178e <CANSPI_Receive+0x8a>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8001776:	f107 0310 	add.w	r3, r7, #16
 800177a:	220d      	movs	r2, #13
 800177c:	4619      	mov	r1, r3
 800177e:	2094      	movs	r0, #148	@ 0x94
 8001780:	f000 fbbc 	bl	8001efc <MCP2515_ReadRxSequence>
      MCP2515_BitModify(MCP2515_CANINTF, 0x02, 0x00);
 8001784:	2200      	movs	r2, #0
 8001786:	2102      	movs	r1, #2
 8001788:	202c      	movs	r0, #44	@ 0x2c
 800178a:	f000 fc43 	bl	8002014 <MCP2515_BitModify>
    }

    /* if the message is extended CAN type */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 800178e:	7b3b      	ldrb	r3, [r7, #12]
 8001790:	f003 0318 	and.w	r3, r3, #24
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b10      	cmp	r3, #16
 8001798:	d10c      	bne.n	80017b4 <CANSPI_Receive+0xb0>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2202      	movs	r2, #2
 800179e:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80017a0:	7cb8      	ldrb	r0, [r7, #18]
 80017a2:	7cf9      	ldrb	r1, [r7, #19]
 80017a4:	7c3a      	ldrb	r2, [r7, #16]
 80017a6:	7c7b      	ldrb	r3, [r7, #17]
 80017a8:	f000 f832 	bl	8001810 <convertReg2ExtendedCANid>
 80017ac:	4602      	mov	r2, r0
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	e00b      	b.n	80017cc <CANSPI_Receive+0xc8>
    }
    else
    {
      /* Standard type */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80017ba:	7c3b      	ldrb	r3, [r7, #16]
 80017bc:	7c7a      	ldrb	r2, [r7, #17]
 80017be:	4611      	mov	r1, r2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f000 f863 	bl	800188c <convertReg2StandardCANid>
 80017c6:	4602      	mov	r2, r0
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	605a      	str	r2, [r3, #4]
    }

    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 80017cc:	7d3a      	ldrb	r2, [r7, #20]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 80017d2:	7d7a      	ldrb	r2, [r7, #21]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 80017d8:	7dba      	ldrb	r2, [r7, #22]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 80017de:	7dfa      	ldrb	r2, [r7, #23]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 80017e4:	7e3a      	ldrb	r2, [r7, #24]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 80017ea:	7e7a      	ldrb	r2, [r7, #25]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 80017f0:	7eba      	ldrb	r2, [r7, #26]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 80017f6:	7efa      	ldrb	r2, [r7, #27]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 80017fc:	7f3a      	ldrb	r2, [r7, #28]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	741a      	strb	r2, [r3, #16]


    returnValue = 1;
 8001802:	2301      	movs	r3, #1
 8001804:	77fb      	strb	r3, [r7, #31]
  }

  return (returnValue);
 8001806:	7ffb      	ldrb	r3, [r7, #31]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3720      	adds	r7, #32
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* convert register value to extended CAN ID */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 8001810:	b490      	push	{r4, r7}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	4604      	mov	r4, r0
 8001818:	4608      	mov	r0, r1
 800181a:	4611      	mov	r1, r2
 800181c:	461a      	mov	r2, r3
 800181e:	4623      	mov	r3, r4
 8001820:	71fb      	strb	r3, [r7, #7]
 8001822:	4603      	mov	r3, r0
 8001824:	71bb      	strb	r3, [r7, #6]
 8001826:	460b      	mov	r3, r1
 8001828:	717b      	strb	r3, [r7, #5]
 800182a:	4613      	mov	r3, r2
 800182c:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;

  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 8001836:	793b      	ldrb	r3, [r7, #4]
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 800183e:	793b      	ldrb	r3, [r7, #4]
 8001840:	095b      	lsrs	r3, r3, #5
 8001842:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 8001844:	797b      	ldrb	r3, [r7, #5]
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 800184a:	7bbb      	ldrb	r3, [r7, #14]
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4413      	add	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4413      	add	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4413      	add	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	021b      	lsls	r3, r3, #8
 8001872:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8001874:	79bb      	ldrb	r3, [r7, #6]
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4413      	add	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	617b      	str	r3, [r7, #20]
  return (returnValue);
 8001880:	697b      	ldr	r3, [r7, #20]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bc90      	pop	{r4, r7}
 800188a:	4770      	bx	lr

0800188c <convertReg2StandardCANid>:

/* convert register value to standard CAN ID */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	460a      	mov	r2, r1
 8001896:	71fb      	strb	r3, [r7, #7]
 8001898:	4613      	mov	r3, r2
 800189a:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;

  ConvertedID = (tempRXBn_SIDH << 3);
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 80018a6:	79bb      	ldrb	r3, [r7, #6]
 80018a8:	095b      	lsrs	r3, r3, #5
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	461a      	mov	r2, r3
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	4413      	add	r3, r2
 80018b2:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	60fb      	str	r3, [r7, #12]

  return (returnValue);
 80018b8:	68fb      	ldr	r3, [r7, #12]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	607b      	str	r3, [r7, #4]
 80018d2:	4b10      	ldr	r3, [pc, #64]	@ (8001914 <MX_DMA_Init+0x4c>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001914 <MX_DMA_Init+0x4c>)
 80018d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018de:	4b0d      	ldr	r3, [pc, #52]	@ (8001914 <MX_DMA_Init+0x4c>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2105      	movs	r1, #5
 80018ee:	203a      	movs	r0, #58	@ 0x3a
 80018f0:	f001 f91e 	bl	8002b30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80018f4:	203a      	movs	r0, #58	@ 0x3a
 80018f6:	f001 f937 	bl	8002b68 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2105      	movs	r1, #5
 80018fe:	2046      	movs	r0, #70	@ 0x46
 8001900:	f001 f916 	bl	8002b30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001904:	2046      	movs	r0, #70	@ 0x46
 8001906:	f001 f92f 	bl	8002b68 <HAL_NVIC_EnableIRQ>

}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40023800 	.word	0x40023800

08001918 <_write>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void DhtTask(void *parameter);
void LcdTask(void *parameter);
int _write(int file, char* p, int len){
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)p, len, HAL_MAX_DELAY);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	b29a      	uxth	r2, r3
 8001928:	f04f 33ff 	mov.w	r3, #4294967295
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	4804      	ldr	r0, [pc, #16]	@ (8001940 <_write+0x28>)
 8001930:	f003 fca4 	bl	800527c <HAL_UART_Transmit>
	return len;
 8001934:	687b      	ldr	r3, [r7, #4]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000354 	.word	0x20000354

08001944 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	xQueue= xQueueCreate(5, sizeof(float));
 800194a:	2200      	movs	r2, #0
 800194c:	2104      	movs	r1, #4
 800194e:	2005      	movs	r0, #5
 8001950:	f004 fb5b 	bl	800600a <xQueueGenericCreate>
 8001954:	4603      	mov	r3, r0
 8001956:	4a10      	ldr	r2, [pc, #64]	@ (8001998 <MX_FREERTOS_Init+0x54>)
 8001958:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800195a:	4a10      	ldr	r2, [pc, #64]	@ (800199c <MX_FREERTOS_Init+0x58>)
 800195c:	2100      	movs	r1, #0
 800195e:	4810      	ldr	r0, [pc, #64]	@ (80019a0 <MX_FREERTOS_Init+0x5c>)
 8001960:	f004 f8d6 	bl	8005b10 <osThreadNew>
 8001964:	4603      	mov	r3, r0
 8001966:	4a0f      	ldr	r2, [pc, #60]	@ (80019a4 <MX_FREERTOS_Init+0x60>)
 8001968:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(DhtTask,"DhtTask",128,NULL,3,NULL);
 800196a:	2300      	movs	r3, #0
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	2303      	movs	r3, #3
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	2300      	movs	r3, #0
 8001974:	2280      	movs	r2, #128	@ 0x80
 8001976:	490c      	ldr	r1, [pc, #48]	@ (80019a8 <MX_FREERTOS_Init+0x64>)
 8001978:	480c      	ldr	r0, [pc, #48]	@ (80019ac <MX_FREERTOS_Init+0x68>)
 800197a:	f004 fff5 	bl	8006968 <xTaskCreate>
  xTaskCreate(LcdTask,"LcdTask",128,NULL,1,NULL);
 800197e:	2300      	movs	r3, #0
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	2301      	movs	r3, #1
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	2300      	movs	r3, #0
 8001988:	2280      	movs	r2, #128	@ 0x80
 800198a:	4909      	ldr	r1, [pc, #36]	@ (80019b0 <MX_FREERTOS_Init+0x6c>)
 800198c:	4809      	ldr	r0, [pc, #36]	@ (80019b4 <MX_FREERTOS_Init+0x70>)
 800198e:	f004 ffeb 	bl	8006968 <xTaskCreate>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000208 	.word	0x20000208
 800199c:	0800c0e4 	.word	0x0800c0e4
 80019a0:	080019b9 	.word	0x080019b9
 80019a4:	2000020c 	.word	0x2000020c
 80019a8:	0800b2d4 	.word	0x0800b2d4
 80019ac:	080019c9 	.word	0x080019c9
 80019b0:	0800b2dc 	.word	0x0800b2dc
 80019b4:	08001a9d 	.word	0x08001a9d

080019b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80019c0:	2001      	movs	r0, #1
 80019c2:	f004 f937 	bl	8005c34 <osDelay>
 80019c6:	e7fb      	b.n	80019c0 <StartDefaultTask+0x8>

080019c8 <DhtTask>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void DhtTask(void *parameter)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	@ 0x28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	uCAN_MSG rxMessage;
	uint16_t rxValue1;
	uint16_t rxValue2;
	CANSPI_Initialize();
 80019d0:	f7ff fde8 	bl	80015a4 <CANSPI_Initialize>
	fillScreen(BLACK);
 80019d4:	2000      	movs	r0, #0
 80019d6:	f7ff fad3 	bl	8000f80 <fillScreen>

	for(;;)
	{

		if(CANSPI_Receive(&rxMessage))
 80019da:	f107 0310 	add.w	r3, r7, #16
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fe90 	bl	8001704 <CANSPI_Receive>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d04d      	beq.n	8001a86 <DhtTask+0xbe>
	    {
	        rxValue1 = ((uint16_t)rxMessage.frame.data0 << 8) | rxMessage.frame.data1;
 80019ea:	7e7b      	ldrb	r3, [r7, #25]
 80019ec:	021b      	lsls	r3, r3, #8
 80019ee:	b21a      	sxth	r2, r3
 80019f0:	7ebb      	ldrb	r3, [r7, #26]
 80019f2:	b21b      	sxth	r3, r3
 80019f4:	4313      	orrs	r3, r2
 80019f6:	b21b      	sxth	r3, r3
 80019f8:	84fb      	strh	r3, [r7, #38]	@ 0x26
	        rxValue2 = ((uint16_t)rxMessage.frame.data2 << 8) | rxMessage.frame.data3;
 80019fa:	7efb      	ldrb	r3, [r7, #27]
 80019fc:	021b      	lsls	r3, r3, #8
 80019fe:	b21a      	sxth	r2, r3
 8001a00:	7f3b      	ldrb	r3, [r7, #28]
 8001a02:	b21b      	sxth	r3, r3
 8001a04:	4313      	orrs	r3, r2
 8001a06:	b21b      	sxth	r3, r3
 8001a08:	84bb      	strh	r3, [r7, #36]	@ 0x24
	        float temp = ((float)rxValue1)*0.01;
 8001a0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001a0c:	ee07 3a90 	vmov	s15, r3
 8001a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a14:	ee17 0a90 	vmov	r0, s15
 8001a18:	f7fe fd9e 	bl	8000558 <__aeabi_f2d>
 8001a1c:	a31d      	add	r3, pc, #116	@ (adr r3, 8001a94 <DhtTask+0xcc>)
 8001a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a22:	f7fe fdf1 	bl	8000608 <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f7ff f8c3 	bl	8000bb8 <__aeabi_d2f>
 8001a32:	4603      	mov	r3, r0
 8001a34:	60fb      	str	r3, [r7, #12]
	        float humi = ((float)rxValue2)*0.01;
 8001a36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001a38:	ee07 3a90 	vmov	s15, r3
 8001a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a40:	ee17 0a90 	vmov	r0, s15
 8001a44:	f7fe fd88 	bl	8000558 <__aeabi_f2d>
 8001a48:	a312      	add	r3, pc, #72	@ (adr r3, 8001a94 <DhtTask+0xcc>)
 8001a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4e:	f7fe fddb 	bl	8000608 <__aeabi_dmul>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4610      	mov	r0, r2
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f7ff f8ad 	bl	8000bb8 <__aeabi_d2f>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	60bb      	str	r3, [r7, #8]
	        xQueueSendToBack(xQueue, &temp, portMAX_DELAY);
 8001a62:	4b0b      	ldr	r3, [pc, #44]	@ (8001a90 <DhtTask+0xc8>)
 8001a64:	6818      	ldr	r0, [r3, #0]
 8001a66:	f107 010c 	add.w	r1, r7, #12
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a70:	f004 fb2a 	bl	80060c8 <xQueueGenericSend>
	        xQueueSendToBack(xQueue, &humi, portMAX_DELAY);
 8001a74:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <DhtTask+0xc8>)
 8001a76:	6818      	ldr	r0, [r3, #0]
 8001a78:	f107 0108 	add.w	r1, r7, #8
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a82:	f004 fb21 	bl	80060c8 <xQueueGenericSend>

	    }
		vTaskDelay(pdMS_TO_TICKS(500));
 8001a86:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a8a:	f005 f8b3 	bl	8006bf4 <vTaskDelay>
		if(CANSPI_Receive(&rxMessage))
 8001a8e:	e7a4      	b.n	80019da <DhtTask+0x12>
 8001a90:	20000208 	.word	0x20000208
 8001a94:	47ae147b 	.word	0x47ae147b
 8001a98:	3f847ae1 	.word	0x3f847ae1

08001a9c <LcdTask>:
	}
}

void LcdTask(void *parameter)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08e      	sub	sp, #56	@ 0x38
 8001aa0:	af04      	add	r7, sp, #16
 8001aa2:	6078      	str	r0, [r7, #4]

	float temperature=0.0, humidity=0.0;
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aaa:	f04f 0300 	mov.w	r3, #0
 8001aae:	623b      	str	r3, [r7, #32]
	char data1[10];
	char data2[10];
	for(;;)
	{

		if(xQueueReceive(xQueue, &temperature , portMAX_DELAY)==pdTRUE)
 8001ab0:	4b40      	ldr	r3, [pc, #256]	@ (8001bb4 <LcdTask+0x118>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8001abc:	4618      	mov	r0, r3
 8001abe:	f004 fca3 	bl	8006408 <xQueueReceive>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d16f      	bne.n	8001ba8 <LcdTask+0x10c>
		{
			if(xQueueReceive(xQueue, &humidity , portMAX_DELAY)==pdTRUE)
 8001ac8:	4b3a      	ldr	r3, [pc, #232]	@ (8001bb4 <LcdTask+0x118>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f107 0120 	add.w	r1, r7, #32
 8001ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f004 fc97 	bl	8006408 <xQueueReceive>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d163      	bne.n	8001ba8 <LcdTask+0x10c>
			{

				ST7735_SetRotation(1);
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	f7ff fb89 	bl	80011f8 <ST7735_SetRotation>
				ST7735_WriteString(0,0, "temp : ", Font_11x18, WHITE, BLACK);
 8001ae6:	4b34      	ldr	r3, [pc, #208]	@ (8001bb8 <LcdTask+0x11c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	9202      	str	r2, [sp, #8]
 8001aec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001af0:	9201      	str	r2, [sp, #4]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	9200      	str	r2, [sp, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a30      	ldr	r2, [pc, #192]	@ (8001bbc <LcdTask+0x120>)
 8001afa:	2100      	movs	r1, #0
 8001afc:	2000      	movs	r0, #0
 8001afe:	f7ff fc73 	bl	80013e8 <ST7735_WriteString>
				snprintf(data1, sizeof(data1),"%.2f",temperature);
 8001b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7fe fd27 	bl	8000558 <__aeabi_f2d>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	f107 0014 	add.w	r0, r7, #20
 8001b12:	e9cd 2300 	strd	r2, r3, [sp]
 8001b16:	4a2a      	ldr	r2, [pc, #168]	@ (8001bc0 <LcdTask+0x124>)
 8001b18:	210a      	movs	r1, #10
 8001b1a:	f007 fa87 	bl	800902c <sniprintf>
				ST7735_SetRotation(1);
 8001b1e:	2001      	movs	r0, #1
 8001b20:	f7ff fb6a 	bl	80011f8 <ST7735_SetRotation>
				ST7735_WriteString(0,30, data1, Font_11x18, MAGENTA, BLACK);
 8001b24:	4b24      	ldr	r3, [pc, #144]	@ (8001bb8 <LcdTask+0x11c>)
 8001b26:	f107 0114 	add.w	r1, r7, #20
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	9202      	str	r2, [sp, #8]
 8001b2e:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001b32:	9201      	str	r2, [sp, #4]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	9200      	str	r2, [sp, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	460a      	mov	r2, r1
 8001b3c:	211e      	movs	r1, #30
 8001b3e:	2000      	movs	r0, #0
 8001b40:	f7ff fc52 	bl	80013e8 <ST7735_WriteString>

				ST7735_SetRotation(1);
 8001b44:	2001      	movs	r0, #1
 8001b46:	f7ff fb57 	bl	80011f8 <ST7735_SetRotation>
				ST7735_WriteString(0,60, "humi : ", Font_11x18, GREEN, BLACK);
 8001b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb8 <LcdTask+0x11c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	9202      	str	r2, [sp, #8]
 8001b50:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001b54:	9201      	str	r2, [sp, #4]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	9200      	str	r2, [sp, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a19      	ldr	r2, [pc, #100]	@ (8001bc4 <LcdTask+0x128>)
 8001b5e:	213c      	movs	r1, #60	@ 0x3c
 8001b60:	2000      	movs	r0, #0
 8001b62:	f7ff fc41 	bl	80013e8 <ST7735_WriteString>
				snprintf(data2, sizeof(data2),"%.2f",humidity);
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe fcf5 	bl	8000558 <__aeabi_f2d>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	f107 0008 	add.w	r0, r7, #8
 8001b76:	e9cd 2300 	strd	r2, r3, [sp]
 8001b7a:	4a11      	ldr	r2, [pc, #68]	@ (8001bc0 <LcdTask+0x124>)
 8001b7c:	210a      	movs	r1, #10
 8001b7e:	f007 fa55 	bl	800902c <sniprintf>
				ST7735_SetRotation(1);
 8001b82:	2001      	movs	r0, #1
 8001b84:	f7ff fb38 	bl	80011f8 <ST7735_SetRotation>
				ST7735_WriteString(0,90, data2, Font_11x18, MAGENTA, BLACK);
 8001b88:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb8 <LcdTask+0x11c>)
 8001b8a:	f107 0108 	add.w	r1, r7, #8
 8001b8e:	2200      	movs	r2, #0
 8001b90:	9202      	str	r2, [sp, #8]
 8001b92:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001b96:	9201      	str	r2, [sp, #4]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	9200      	str	r2, [sp, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	460a      	mov	r2, r1
 8001ba0:	215a      	movs	r1, #90	@ 0x5a
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f7ff fc20 	bl	80013e8 <ST7735_WriteString>



			}
		}
		vTaskDelay(pdMS_TO_TICKS(500));
 8001ba8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001bac:	f005 f822 	bl	8006bf4 <vTaskDelay>
		if(xQueueReceive(xQueue, &temperature , portMAX_DELAY)==pdTRUE)
 8001bb0:	e77e      	b.n	8001ab0 <LcdTask+0x14>
 8001bb2:	bf00      	nop
 8001bb4:	20000208 	.word	0x20000208
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	0800b2e4 	.word	0x0800b2e4
 8001bc0:	0800b2ec 	.word	0x0800b2ec
 8001bc4:	0800b2f4 	.word	0x0800b2f4

08001bc8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bce:	f107 030c 	add.w	r3, r7, #12
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
 8001bda:	60da      	str	r2, [r3, #12]
 8001bdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	4b34      	ldr	r3, [pc, #208]	@ (8001cb4 <MX_GPIO_Init+0xec>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be6:	4a33      	ldr	r2, [pc, #204]	@ (8001cb4 <MX_GPIO_Init+0xec>)
 8001be8:	f043 0304 	orr.w	r3, r3, #4
 8001bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bee:	4b31      	ldr	r3, [pc, #196]	@ (8001cb4 <MX_GPIO_Init+0xec>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	4b2d      	ldr	r3, [pc, #180]	@ (8001cb4 <MX_GPIO_Init+0xec>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c02:	4a2c      	ldr	r2, [pc, #176]	@ (8001cb4 <MX_GPIO_Init+0xec>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0a:	4b2a      	ldr	r3, [pc, #168]	@ (8001cb4 <MX_GPIO_Init+0xec>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	603b      	str	r3, [r7, #0]
 8001c1a:	4b26      	ldr	r3, [pc, #152]	@ (8001cb4 <MX_GPIO_Init+0xec>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1e:	4a25      	ldr	r2, [pc, #148]	@ (8001cb4 <MX_GPIO_Init+0xec>)
 8001c20:	f043 0302 	orr.w	r3, r3, #2
 8001c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c26:	4b23      	ldr	r3, [pc, #140]	@ (8001cb4 <MX_GPIO_Init+0xec>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001c32:	2201      	movs	r2, #1
 8001c34:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c38:	481f      	ldr	r0, [pc, #124]	@ (8001cb8 <MX_GPIO_Init+0xf0>)
 8001c3a:	f001 fc11 	bl	8003460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_RESET);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2110      	movs	r1, #16
 8001c42:	481e      	ldr	r0, [pc, #120]	@ (8001cbc <MX_GPIO_Init+0xf4>)
 8001c44:	f001 fc0c 	bl	8003460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin_Pin|Rst_Pin_Pin|Bck_Pin_Pin, GPIO_PIN_RESET);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001c4e:	481c      	ldr	r0, [pc, #112]	@ (8001cc0 <MX_GPIO_Init+0xf8>)
 8001c50:	f001 fc06 	bl	8003460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001c54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001c66:	f107 030c 	add.w	r3, r7, #12
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4812      	ldr	r0, [pc, #72]	@ (8001cb8 <MX_GPIO_Init+0xf0>)
 8001c6e:	f001 fa73 	bl	8003158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8001c72:	2310      	movs	r3, #16
 8001c74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c76:	2301      	movs	r3, #1
 8001c78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8001c82:	f107 030c 	add.w	r3, r7, #12
 8001c86:	4619      	mov	r1, r3
 8001c88:	480c      	ldr	r0, [pc, #48]	@ (8001cbc <MX_GPIO_Init+0xf4>)
 8001c8a:	f001 fa65 	bl	8003158 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CS_Pin_Pin|Rst_Pin_Pin|Bck_Pin_Pin;
 8001c8e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001c92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c94:	2301      	movs	r3, #1
 8001c96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca0:	f107 030c 	add.w	r3, r7, #12
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4806      	ldr	r0, [pc, #24]	@ (8001cc0 <MX_GPIO_Init+0xf8>)
 8001ca8:	f001 fa56 	bl	8003158 <HAL_GPIO_Init>

}
 8001cac:	bf00      	nop
 8001cae:	3720      	adds	r7, #32
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40020800 	.word	0x40020800
 8001cbc:	40020000 	.word	0x40020000
 8001cc0:	40020400 	.word	0x40020400

08001cc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cc8:	f000 fe14 	bl	80028f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ccc:	f000 f818 	bl	8001d00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cd0:	f7ff ff7a 	bl	8001bc8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001cd4:	f7ff fdf8 	bl	80018c8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001cd8:	f000 fd0a 	bl	80026f0 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001cdc:	f000 fa0c 	bl	80020f8 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001ce0:	f000 fc94 	bl	800260c <MX_TIM1_Init>
  MX_SPI2_Init();
 8001ce4:	f000 fa3e 	bl	8002164 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init(1);
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f7ff fa59 	bl	80011a0 <ST7735_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001cee:	f003 fec5 	bl	8005a7c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001cf2:	f7ff fe27 	bl	8001944 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001cf6:	f003 fee5 	bl	8005ac4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001cfa:	bf00      	nop
 8001cfc:	e7fd      	b.n	8001cfa <main+0x36>
	...

08001d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b094      	sub	sp, #80	@ 0x50
 8001d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d06:	f107 0320 	add.w	r3, r7, #32
 8001d0a:	2230      	movs	r2, #48	@ 0x30
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f007 fa03 	bl	800911a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d24:	2300      	movs	r3, #0
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	4b27      	ldr	r3, [pc, #156]	@ (8001dc8 <SystemClock_Config+0xc8>)
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2c:	4a26      	ldr	r2, [pc, #152]	@ (8001dc8 <SystemClock_Config+0xc8>)
 8001d2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d32:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d34:	4b24      	ldr	r3, [pc, #144]	@ (8001dc8 <SystemClock_Config+0xc8>)
 8001d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d40:	2300      	movs	r3, #0
 8001d42:	607b      	str	r3, [r7, #4]
 8001d44:	4b21      	ldr	r3, [pc, #132]	@ (8001dcc <SystemClock_Config+0xcc>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a20      	ldr	r2, [pc, #128]	@ (8001dcc <SystemClock_Config+0xcc>)
 8001d4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	4b1e      	ldr	r3, [pc, #120]	@ (8001dcc <SystemClock_Config+0xcc>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d60:	2301      	movs	r3, #1
 8001d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d64:	2310      	movs	r3, #16
 8001d66:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d70:	2308      	movs	r3, #8
 8001d72:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001d74:	2348      	movs	r3, #72	@ 0x48
 8001d76:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d7c:	2304      	movs	r3, #4
 8001d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d80:	f107 0320 	add.w	r3, r7, #32
 8001d84:	4618      	mov	r0, r3
 8001d86:	f001 fb85 	bl	8003494 <HAL_RCC_OscConfig>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d90:	f000 f82d 	bl	8001dee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d94:	230f      	movs	r3, #15
 8001d96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001da0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001da4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001daa:	f107 030c 	add.w	r3, r7, #12
 8001dae:	2102      	movs	r1, #2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f001 fde7 	bl	8003984 <HAL_RCC_ClockConfig>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001dbc:	f000 f817 	bl	8001dee <Error_Handler>
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	3750      	adds	r7, #80	@ 0x50
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40007000 	.word	0x40007000

08001dd0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001de0:	d101      	bne.n	8001de6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001de2:	f000 fda9 	bl	8002938 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001df2:	b672      	cpsid	i
}
 8001df4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001df6:	bf00      	nop
 8001df8:	e7fd      	b.n	8001df6 <Error_Handler+0x8>
	...

08001dfc <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
bool MCP2515_Initialize(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 8001e02:	2201      	movs	r2, #1
 8001e04:	2110      	movs	r1, #16
 8001e06:	480c      	ldr	r0, [pc, #48]	@ (8001e38 <MCP2515_Initialize+0x3c>)
 8001e08:	f001 fb2a 	bl	8003460 <HAL_GPIO_WritePin>

  uint8_t loop = 10;
 8001e0c:	230a      	movs	r3, #10
 8001e0e:	71fb      	strb	r3, [r7, #7]

  do {
    /* check SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8001e10:	480a      	ldr	r0, [pc, #40]	@ (8001e3c <MCP2515_Initialize+0x40>)
 8001e12:	f002 fc58 	bl	80046c6 <HAL_SPI_GetState>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <MCP2515_Initialize+0x24>
      return true;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e006      	b.n	8001e2e <MCP2515_Initialize+0x32>

    loop--;
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1f1      	bne.n	8001e10 <MCP2515_Initialize+0x14>

  return false;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40020000 	.word	0x40020000
 8001e3c:	20000210 	.word	0x20000210

08001e40 <MCP2515_SetConfigMode>:

/* change mode as configuration mode */
bool MCP2515_SetConfigMode(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8001e46:	2180      	movs	r1, #128	@ 0x80
 8001e48:	200f      	movs	r0, #15
 8001e4a:	f000 f879 	bl	8001f40 <MCP2515_WriteByte>

  uint8_t loop = 10;
 8001e4e:	230a      	movs	r3, #10
 8001e50:	71fb      	strb	r3, [r7, #7]

  do {
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 8001e52:	200e      	movs	r0, #14
 8001e54:	f000 f830 	bl	8001eb8 <MCP2515_ReadByte>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8001e5e:	2b80      	cmp	r3, #128	@ 0x80
 8001e60:	d101      	bne.n	8001e66 <MCP2515_SetConfigMode+0x26>
      return true;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e006      	b.n	8001e74 <MCP2515_SetConfigMode+0x34>

    loop--;
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1ef      	bne.n	8001e52 <MCP2515_SetConfigMode+0x12>

  return false;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <MCP2515_SetNormalMode>:

/* change mode as normal mode */
bool MCP2515_SetNormalMode(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8001e82:	2100      	movs	r1, #0
 8001e84:	200f      	movs	r0, #15
 8001e86:	f000 f85b 	bl	8001f40 <MCP2515_WriteByte>

  uint8_t loop = 10;
 8001e8a:	230a      	movs	r3, #10
 8001e8c:	71fb      	strb	r3, [r7, #7]

  do {
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8001e8e:	200e      	movs	r0, #14
 8001e90:	f000 f812 	bl	8001eb8 <MCP2515_ReadByte>
 8001e94:	4603      	mov	r3, r0
 8001e96:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <MCP2515_SetNormalMode+0x26>
      return true;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e006      	b.n	8001eb0 <MCP2515_SetNormalMode+0x34>

    loop--;
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1ef      	bne.n	8001e8e <MCP2515_SetNormalMode+0x12>

  return false;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* read single byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2110      	movs	r1, #16
 8001ec6:	480c      	ldr	r0, [pc, #48]	@ (8001ef8 <MCP2515_ReadByte+0x40>)
 8001ec8:	f001 faca 	bl	8003460 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 8001ecc:	2003      	movs	r0, #3
 8001ece:	f000 f8c9 	bl	8002064 <SPI_Tx>
  SPI_Tx(address);
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f000 f8c5 	bl	8002064 <SPI_Tx>
  retVal = SPI_Rx();
 8001eda:	f000 f8e9 	bl	80020b0 <SPI_Rx>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	2110      	movs	r1, #16
 8001ee6:	4804      	ldr	r0, [pc, #16]	@ (8001ef8 <MCP2515_ReadByte+0x40>)
 8001ee8:	f001 faba 	bl	8003460 <HAL_GPIO_WritePin>

  return retVal;
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40020000 	.word	0x40020000

08001efc <MCP2515_ReadRxSequence>:

/* read buffer */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	6039      	str	r1, [r7, #0]
 8001f06:	71fb      	strb	r3, [r7, #7]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2110      	movs	r1, #16
 8001f10:	480a      	ldr	r0, [pc, #40]	@ (8001f3c <MCP2515_ReadRxSequence+0x40>)
 8001f12:	f001 faa5 	bl	8003460 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f000 f8a3 	bl	8002064 <SPI_Tx>
  SPI_RxBuffer(data, length);
 8001f1e:	79bb      	ldrb	r3, [r7, #6]
 8001f20:	4619      	mov	r1, r3
 8001f22:	6838      	ldr	r0, [r7, #0]
 8001f24:	f000 f8d4 	bl	80020d0 <SPI_RxBuffer>

  MCP2515_CS_HIGH();
 8001f28:	2201      	movs	r2, #1
 8001f2a:	2110      	movs	r1, #16
 8001f2c:	4803      	ldr	r0, [pc, #12]	@ (8001f3c <MCP2515_ReadRxSequence+0x40>)
 8001f2e:	f001 fa97 	bl	8003460 <HAL_GPIO_WritePin>
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40020000 	.word	0x40020000

08001f40 <MCP2515_WriteByte>:

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	460a      	mov	r2, r1
 8001f4a:	71fb      	strb	r3, [r7, #7]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001f50:	2200      	movs	r2, #0
 8001f52:	2110      	movs	r1, #16
 8001f54:	480b      	ldr	r0, [pc, #44]	@ (8001f84 <MCP2515_WriteByte+0x44>)
 8001f56:	f001 fa83 	bl	8003460 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8001f5a:	2002      	movs	r0, #2
 8001f5c:	f000 f882 	bl	8002064 <SPI_Tx>
  SPI_Tx(address);
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 f87e 	bl	8002064 <SPI_Tx>
  SPI_Tx(data);
 8001f68:	79bb      	ldrb	r3, [r7, #6]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 f87a 	bl	8002064 <SPI_Tx>

  MCP2515_CS_HIGH();
 8001f70:	2201      	movs	r2, #1
 8001f72:	2110      	movs	r1, #16
 8001f74:	4803      	ldr	r0, [pc, #12]	@ (8001f84 <MCP2515_WriteByte+0x44>)
 8001f76:	f001 fa73 	bl	8003460 <HAL_GPIO_WritePin>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40020000 	.word	0x40020000

08001f88 <MCP2515_WriteByteSequence>:

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	603a      	str	r2, [r7, #0]
 8001f92:	71fb      	strb	r3, [r7, #7]
 8001f94:	460b      	mov	r3, r1
 8001f96:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2110      	movs	r1, #16
 8001f9c:	480e      	ldr	r0, [pc, #56]	@ (8001fd8 <MCP2515_WriteByteSequence+0x50>)
 8001f9e:	f001 fa5f 	bl	8003460 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8001fa2:	2002      	movs	r0, #2
 8001fa4:	f000 f85e 	bl	8002064 <SPI_Tx>
  SPI_Tx(startAddress);
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 f85a 	bl	8002064 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8001fb0:	79ba      	ldrb	r2, [r7, #6]
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	3301      	adds	r3, #1
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	6838      	ldr	r0, [r7, #0]
 8001fc0:	f000 f862 	bl	8002088 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	2110      	movs	r1, #16
 8001fc8:	4803      	ldr	r0, [pc, #12]	@ (8001fd8 <MCP2515_WriteByteSequence+0x50>)
 8001fca:	f001 fa49 	bl	8003460 <HAL_GPIO_WritePin>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40020000 	.word	0x40020000

08001fdc <MCP2515_GetRxStatus>:
  return retVal;
}

/* read RX STATUS register */
uint8_t MCP2515_GetRxStatus(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2110      	movs	r1, #16
 8001fe6:	480a      	ldr	r0, [pc, #40]	@ (8002010 <MCP2515_GetRxStatus+0x34>)
 8001fe8:	f001 fa3a 	bl	8003460 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_RX_STATUS);
 8001fec:	20b0      	movs	r0, #176	@ 0xb0
 8001fee:	f000 f839 	bl	8002064 <SPI_Tx>
  retVal = SPI_Rx();
 8001ff2:	f000 f85d 	bl	80020b0 <SPI_Rx>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	2110      	movs	r1, #16
 8001ffe:	4804      	ldr	r0, [pc, #16]	@ (8002010 <MCP2515_GetRxStatus+0x34>)
 8002000:	f001 fa2e 	bl	8003460 <HAL_GPIO_WritePin>

  return retVal;
 8002004:	79fb      	ldrb	r3, [r7, #7]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40020000 	.word	0x40020000

08002014 <MCP2515_BitModify>:

/* Use when changing register value */
void MCP2515_BitModify(uint8_t address, uint8_t mask, uint8_t data)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	71fb      	strb	r3, [r7, #7]
 800201e:	460b      	mov	r3, r1
 8002020:	71bb      	strb	r3, [r7, #6]
 8002022:	4613      	mov	r3, r2
 8002024:	717b      	strb	r3, [r7, #5]
  MCP2515_CS_LOW();
 8002026:	2200      	movs	r2, #0
 8002028:	2110      	movs	r1, #16
 800202a:	480d      	ldr	r0, [pc, #52]	@ (8002060 <MCP2515_BitModify+0x4c>)
 800202c:	f001 fa18 	bl	8003460 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_BIT_MOD);
 8002030:	2005      	movs	r0, #5
 8002032:	f000 f817 	bl	8002064 <SPI_Tx>
  SPI_Tx(address);
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	4618      	mov	r0, r3
 800203a:	f000 f813 	bl	8002064 <SPI_Tx>
  SPI_Tx(mask);
 800203e:	79bb      	ldrb	r3, [r7, #6]
 8002040:	4618      	mov	r0, r3
 8002042:	f000 f80f 	bl	8002064 <SPI_Tx>
  SPI_Tx(data);
 8002046:	797b      	ldrb	r3, [r7, #5]
 8002048:	4618      	mov	r0, r3
 800204a:	f000 f80b 	bl	8002064 <SPI_Tx>

  MCP2515_CS_HIGH();
 800204e:	2201      	movs	r2, #1
 8002050:	2110      	movs	r1, #16
 8002052:	4803      	ldr	r0, [pc, #12]	@ (8002060 <MCP2515_BitModify+0x4c>)
 8002054:	f001 fa04 	bl	8003460 <HAL_GPIO_WritePin>
}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40020000 	.word	0x40020000

08002064 <SPI_Tx>:

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 800206e:	1df9      	adds	r1, r7, #7
 8002070:	230a      	movs	r3, #10
 8002072:	2201      	movs	r2, #1
 8002074:	4803      	ldr	r0, [pc, #12]	@ (8002084 <SPI_Tx+0x20>)
 8002076:	f001 ff20 	bl	8003eba <HAL_SPI_Transmit>
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000210 	.word	0x20000210

08002088 <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	460b      	mov	r3, r1
 8002092:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	b29a      	uxth	r2, r3
 8002098:	230a      	movs	r3, #10
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	4803      	ldr	r0, [pc, #12]	@ (80020ac <SPI_TxBuffer+0x24>)
 800209e:	f001 ff0c 	bl	8003eba <HAL_SPI_Transmit>
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000210 	.word	0x20000210

080020b0 <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 80020b6:	1df9      	adds	r1, r7, #7
 80020b8:	230a      	movs	r3, #10
 80020ba:	2201      	movs	r2, #1
 80020bc:	4803      	ldr	r0, [pc, #12]	@ (80020cc <SPI_Rx+0x1c>)
 80020be:	f002 f840 	bl	8004142 <HAL_SPI_Receive>
  return retVal;
 80020c2:	79fb      	ldrb	r3, [r7, #7]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20000210 	.word	0x20000210

080020d0 <SPI_RxBuffer>:

/* SPI Rx wrapper function */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 80020dc:	78fb      	ldrb	r3, [r7, #3]
 80020de:	b29a      	uxth	r2, r3
 80020e0:	230a      	movs	r3, #10
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	4803      	ldr	r0, [pc, #12]	@ (80020f4 <SPI_RxBuffer+0x24>)
 80020e6:	f002 f82c 	bl	8004142 <HAL_SPI_Receive>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000210 	.word	0x20000210

080020f8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80020fc:	4b17      	ldr	r3, [pc, #92]	@ (800215c <MX_SPI1_Init+0x64>)
 80020fe:	4a18      	ldr	r2, [pc, #96]	@ (8002160 <MX_SPI1_Init+0x68>)
 8002100:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002102:	4b16      	ldr	r3, [pc, #88]	@ (800215c <MX_SPI1_Init+0x64>)
 8002104:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002108:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800210a:	4b14      	ldr	r3, [pc, #80]	@ (800215c <MX_SPI1_Init+0x64>)
 800210c:	2200      	movs	r2, #0
 800210e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002110:	4b12      	ldr	r3, [pc, #72]	@ (800215c <MX_SPI1_Init+0x64>)
 8002112:	2200      	movs	r2, #0
 8002114:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002116:	4b11      	ldr	r3, [pc, #68]	@ (800215c <MX_SPI1_Init+0x64>)
 8002118:	2200      	movs	r2, #0
 800211a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800211c:	4b0f      	ldr	r3, [pc, #60]	@ (800215c <MX_SPI1_Init+0x64>)
 800211e:	2200      	movs	r2, #0
 8002120:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002122:	4b0e      	ldr	r3, [pc, #56]	@ (800215c <MX_SPI1_Init+0x64>)
 8002124:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002128:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800212a:	4b0c      	ldr	r3, [pc, #48]	@ (800215c <MX_SPI1_Init+0x64>)
 800212c:	2210      	movs	r2, #16
 800212e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002130:	4b0a      	ldr	r3, [pc, #40]	@ (800215c <MX_SPI1_Init+0x64>)
 8002132:	2200      	movs	r2, #0
 8002134:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002136:	4b09      	ldr	r3, [pc, #36]	@ (800215c <MX_SPI1_Init+0x64>)
 8002138:	2200      	movs	r2, #0
 800213a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800213c:	4b07      	ldr	r3, [pc, #28]	@ (800215c <MX_SPI1_Init+0x64>)
 800213e:	2200      	movs	r2, #0
 8002140:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002142:	4b06      	ldr	r3, [pc, #24]	@ (800215c <MX_SPI1_Init+0x64>)
 8002144:	220a      	movs	r2, #10
 8002146:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002148:	4804      	ldr	r0, [pc, #16]	@ (800215c <MX_SPI1_Init+0x64>)
 800214a:	f001 fe2d 	bl	8003da8 <HAL_SPI_Init>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002154:	f7ff fe4b 	bl	8001dee <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20000210 	.word	0x20000210
 8002160:	40013000 	.word	0x40013000

08002164 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002168:	4b18      	ldr	r3, [pc, #96]	@ (80021cc <MX_SPI2_Init+0x68>)
 800216a:	4a19      	ldr	r2, [pc, #100]	@ (80021d0 <MX_SPI2_Init+0x6c>)
 800216c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800216e:	4b17      	ldr	r3, [pc, #92]	@ (80021cc <MX_SPI2_Init+0x68>)
 8002170:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002174:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8002176:	4b15      	ldr	r3, [pc, #84]	@ (80021cc <MX_SPI2_Init+0x68>)
 8002178:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800217c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800217e:	4b13      	ldr	r3, [pc, #76]	@ (80021cc <MX_SPI2_Init+0x68>)
 8002180:	2200      	movs	r2, #0
 8002182:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002184:	4b11      	ldr	r3, [pc, #68]	@ (80021cc <MX_SPI2_Init+0x68>)
 8002186:	2200      	movs	r2, #0
 8002188:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800218a:	4b10      	ldr	r3, [pc, #64]	@ (80021cc <MX_SPI2_Init+0x68>)
 800218c:	2200      	movs	r2, #0
 800218e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002190:	4b0e      	ldr	r3, [pc, #56]	@ (80021cc <MX_SPI2_Init+0x68>)
 8002192:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002196:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002198:	4b0c      	ldr	r3, [pc, #48]	@ (80021cc <MX_SPI2_Init+0x68>)
 800219a:	2218      	movs	r2, #24
 800219c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800219e:	4b0b      	ldr	r3, [pc, #44]	@ (80021cc <MX_SPI2_Init+0x68>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80021a4:	4b09      	ldr	r3, [pc, #36]	@ (80021cc <MX_SPI2_Init+0x68>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021aa:	4b08      	ldr	r3, [pc, #32]	@ (80021cc <MX_SPI2_Init+0x68>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80021b0:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <MX_SPI2_Init+0x68>)
 80021b2:	220a      	movs	r2, #10
 80021b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021b6:	4805      	ldr	r0, [pc, #20]	@ (80021cc <MX_SPI2_Init+0x68>)
 80021b8:	f001 fdf6 	bl	8003da8 <HAL_SPI_Init>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80021c2:	f7ff fe14 	bl	8001dee <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000268 	.word	0x20000268
 80021d0:	40003800 	.word	0x40003800

080021d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08c      	sub	sp, #48	@ 0x30
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021dc:	f107 031c 	add.w	r3, r7, #28
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a32      	ldr	r2, [pc, #200]	@ (80022bc <HAL_SPI_MspInit+0xe8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d12c      	bne.n	8002250 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	61bb      	str	r3, [r7, #24]
 80021fa:	4b31      	ldr	r3, [pc, #196]	@ (80022c0 <HAL_SPI_MspInit+0xec>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fe:	4a30      	ldr	r2, [pc, #192]	@ (80022c0 <HAL_SPI_MspInit+0xec>)
 8002200:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002204:	6453      	str	r3, [r2, #68]	@ 0x44
 8002206:	4b2e      	ldr	r3, [pc, #184]	@ (80022c0 <HAL_SPI_MspInit+0xec>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800220e:	61bb      	str	r3, [r7, #24]
 8002210:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	4b2a      	ldr	r3, [pc, #168]	@ (80022c0 <HAL_SPI_MspInit+0xec>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	4a29      	ldr	r2, [pc, #164]	@ (80022c0 <HAL_SPI_MspInit+0xec>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6313      	str	r3, [r2, #48]	@ 0x30
 8002222:	4b27      	ldr	r3, [pc, #156]	@ (80022c0 <HAL_SPI_MspInit+0xec>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800222e:	23e0      	movs	r3, #224	@ 0xe0
 8002230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002232:	2302      	movs	r3, #2
 8002234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223a:	2303      	movs	r3, #3
 800223c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800223e:	2305      	movs	r3, #5
 8002240:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002242:	f107 031c 	add.w	r3, r7, #28
 8002246:	4619      	mov	r1, r3
 8002248:	481e      	ldr	r0, [pc, #120]	@ (80022c4 <HAL_SPI_MspInit+0xf0>)
 800224a:	f000 ff85 	bl	8003158 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800224e:	e031      	b.n	80022b4 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a1c      	ldr	r2, [pc, #112]	@ (80022c8 <HAL_SPI_MspInit+0xf4>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d12c      	bne.n	80022b4 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	4b18      	ldr	r3, [pc, #96]	@ (80022c0 <HAL_SPI_MspInit+0xec>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002262:	4a17      	ldr	r2, [pc, #92]	@ (80022c0 <HAL_SPI_MspInit+0xec>)
 8002264:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002268:	6413      	str	r3, [r2, #64]	@ 0x40
 800226a:	4b15      	ldr	r3, [pc, #84]	@ (80022c0 <HAL_SPI_MspInit+0xec>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	4b11      	ldr	r3, [pc, #68]	@ (80022c0 <HAL_SPI_MspInit+0xec>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	4a10      	ldr	r2, [pc, #64]	@ (80022c0 <HAL_SPI_MspInit+0xec>)
 8002280:	f043 0302 	orr.w	r3, r3, #2
 8002284:	6313      	str	r3, [r2, #48]	@ 0x30
 8002286:	4b0e      	ldr	r3, [pc, #56]	@ (80022c0 <HAL_SPI_MspInit+0xec>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8002292:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8002296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002298:	2302      	movs	r3, #2
 800229a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a0:	2303      	movs	r3, #3
 80022a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022a4:	2305      	movs	r3, #5
 80022a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a8:	f107 031c 	add.w	r3, r7, #28
 80022ac:	4619      	mov	r1, r3
 80022ae:	4807      	ldr	r0, [pc, #28]	@ (80022cc <HAL_SPI_MspInit+0xf8>)
 80022b0:	f000 ff52 	bl	8003158 <HAL_GPIO_Init>
}
 80022b4:	bf00      	nop
 80022b6:	3730      	adds	r7, #48	@ 0x30
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40013000 	.word	0x40013000
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40020000 	.word	0x40020000
 80022c8:	40003800 	.word	0x40003800
 80022cc:	40020400 	.word	0x40020400

080022d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	607b      	str	r3, [r7, #4]
 80022da:	4b12      	ldr	r3, [pc, #72]	@ (8002324 <HAL_MspInit+0x54>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022de:	4a11      	ldr	r2, [pc, #68]	@ (8002324 <HAL_MspInit+0x54>)
 80022e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002324 <HAL_MspInit+0x54>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ee:	607b      	str	r3, [r7, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	603b      	str	r3, [r7, #0]
 80022f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002324 <HAL_MspInit+0x54>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002324 <HAL_MspInit+0x54>)
 80022fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002300:	6413      	str	r3, [r2, #64]	@ 0x40
 8002302:	4b08      	ldr	r3, [pc, #32]	@ (8002324 <HAL_MspInit+0x54>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800230a:	603b      	str	r3, [r7, #0]
 800230c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800230e:	2200      	movs	r2, #0
 8002310:	210f      	movs	r1, #15
 8002312:	f06f 0001 	mvn.w	r0, #1
 8002316:	f000 fc0b 	bl	8002b30 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800

08002328 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08e      	sub	sp, #56	@ 0x38
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	4b34      	ldr	r3, [pc, #208]	@ (8002410 <HAL_InitTick+0xe8>)
 800233e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002340:	4a33      	ldr	r2, [pc, #204]	@ (8002410 <HAL_InitTick+0xe8>)
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	6413      	str	r3, [r2, #64]	@ 0x40
 8002348:	4b31      	ldr	r3, [pc, #196]	@ (8002410 <HAL_InitTick+0xe8>)
 800234a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002354:	f107 0210 	add.w	r2, r7, #16
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	4611      	mov	r1, r2
 800235e:	4618      	mov	r0, r3
 8002360:	f001 fcf0 	bl	8003d44 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800236a:	2b00      	cmp	r3, #0
 800236c:	d103      	bne.n	8002376 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800236e:	f001 fcc1 	bl	8003cf4 <HAL_RCC_GetPCLK1Freq>
 8002372:	6378      	str	r0, [r7, #52]	@ 0x34
 8002374:	e004      	b.n	8002380 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002376:	f001 fcbd 	bl	8003cf4 <HAL_RCC_GetPCLK1Freq>
 800237a:	4603      	mov	r3, r0
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002382:	4a24      	ldr	r2, [pc, #144]	@ (8002414 <HAL_InitTick+0xec>)
 8002384:	fba2 2303 	umull	r2, r3, r2, r3
 8002388:	0c9b      	lsrs	r3, r3, #18
 800238a:	3b01      	subs	r3, #1
 800238c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800238e:	4b22      	ldr	r3, [pc, #136]	@ (8002418 <HAL_InitTick+0xf0>)
 8002390:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002394:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002396:	4b20      	ldr	r3, [pc, #128]	@ (8002418 <HAL_InitTick+0xf0>)
 8002398:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800239c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800239e:	4a1e      	ldr	r2, [pc, #120]	@ (8002418 <HAL_InitTick+0xf0>)
 80023a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80023a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002418 <HAL_InitTick+0xf0>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002418 <HAL_InitTick+0xf0>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b0:	4b19      	ldr	r3, [pc, #100]	@ (8002418 <HAL_InitTick+0xf0>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80023b6:	4818      	ldr	r0, [pc, #96]	@ (8002418 <HAL_InitTick+0xf0>)
 80023b8:	f002 fad6 	bl	8004968 <HAL_TIM_Base_Init>
 80023bc:	4603      	mov	r3, r0
 80023be:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80023c2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d11b      	bne.n	8002402 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80023ca:	4813      	ldr	r0, [pc, #76]	@ (8002418 <HAL_InitTick+0xf0>)
 80023cc:	f002 fb1c 	bl	8004a08 <HAL_TIM_Base_Start_IT>
 80023d0:	4603      	mov	r3, r0
 80023d2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80023d6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d111      	bne.n	8002402 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023de:	201c      	movs	r0, #28
 80023e0:	f000 fbc2 	bl	8002b68 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b0f      	cmp	r3, #15
 80023e8:	d808      	bhi.n	80023fc <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80023ea:	2200      	movs	r2, #0
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	201c      	movs	r0, #28
 80023f0:	f000 fb9e 	bl	8002b30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023f4:	4a09      	ldr	r2, [pc, #36]	@ (800241c <HAL_InitTick+0xf4>)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	e002      	b.n	8002402 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002402:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002406:	4618      	mov	r0, r3
 8002408:	3738      	adds	r7, #56	@ 0x38
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40023800 	.word	0x40023800
 8002414:	431bde83 	.word	0x431bde83
 8002418:	200002c0 	.word	0x200002c0
 800241c:	2000000c 	.word	0x2000000c

08002420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002424:	bf00      	nop
 8002426:	e7fd      	b.n	8002424 <NMI_Handler+0x4>

08002428 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800242c:	bf00      	nop
 800242e:	e7fd      	b.n	800242c <HardFault_Handler+0x4>

08002430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002434:	bf00      	nop
 8002436:	e7fd      	b.n	8002434 <MemManage_Handler+0x4>

08002438 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800243c:	bf00      	nop
 800243e:	e7fd      	b.n	800243c <BusFault_Handler+0x4>

08002440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002444:	bf00      	nop
 8002446:	e7fd      	b.n	8002444 <UsageFault_Handler+0x4>

08002448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800244c:	bf00      	nop
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800245c:	4802      	ldr	r0, [pc, #8]	@ (8002468 <TIM2_IRQHandler+0x10>)
 800245e:	f002 fb35 	bl	8004acc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	200002c0 	.word	0x200002c0

0800246c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002470:	4802      	ldr	r0, [pc, #8]	@ (800247c <DMA2_Stream2_IRQHandler+0x10>)
 8002472:	f000 fc35 	bl	8002ce0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	2000039c 	.word	0x2000039c

08002480 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002484:	4802      	ldr	r0, [pc, #8]	@ (8002490 <DMA2_Stream7_IRQHandler+0x10>)
 8002486:	f000 fc2b 	bl	8002ce0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	200003fc 	.word	0x200003fc

08002494 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return 1;
 8002498:	2301      	movs	r3, #1
}
 800249a:	4618      	mov	r0, r3
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <_kill>:

int _kill(int pid, int sig)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024ae:	f006 fe87 	bl	80091c0 <__errno>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2216      	movs	r2, #22
 80024b6:	601a      	str	r2, [r3, #0]
  return -1;
 80024b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <_exit>:

void _exit (int status)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024cc:	f04f 31ff 	mov.w	r1, #4294967295
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7ff ffe7 	bl	80024a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024d6:	bf00      	nop
 80024d8:	e7fd      	b.n	80024d6 <_exit+0x12>

080024da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b086      	sub	sp, #24
 80024de:	af00      	add	r7, sp, #0
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
 80024ea:	e00a      	b.n	8002502 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024ec:	f3af 8000 	nop.w
 80024f0:	4601      	mov	r1, r0
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	1c5a      	adds	r2, r3, #1
 80024f6:	60ba      	str	r2, [r7, #8]
 80024f8:	b2ca      	uxtb	r2, r1
 80024fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	3301      	adds	r3, #1
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	429a      	cmp	r2, r3
 8002508:	dbf0      	blt.n	80024ec <_read+0x12>
  }

  return len;
 800250a:	687b      	ldr	r3, [r7, #4]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800251c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800253c:	605a      	str	r2, [r3, #4]
  return 0;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <_isatty>:

int _isatty(int file)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002554:	2301      	movs	r3, #1
}
 8002556:	4618      	mov	r0, r3
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002562:	b480      	push	{r7}
 8002564:	b085      	sub	sp, #20
 8002566:	af00      	add	r7, sp, #0
 8002568:	60f8      	str	r0, [r7, #12]
 800256a:	60b9      	str	r1, [r7, #8]
 800256c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002584:	4a14      	ldr	r2, [pc, #80]	@ (80025d8 <_sbrk+0x5c>)
 8002586:	4b15      	ldr	r3, [pc, #84]	@ (80025dc <_sbrk+0x60>)
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002590:	4b13      	ldr	r3, [pc, #76]	@ (80025e0 <_sbrk+0x64>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d102      	bne.n	800259e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002598:	4b11      	ldr	r3, [pc, #68]	@ (80025e0 <_sbrk+0x64>)
 800259a:	4a12      	ldr	r2, [pc, #72]	@ (80025e4 <_sbrk+0x68>)
 800259c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800259e:	4b10      	ldr	r3, [pc, #64]	@ (80025e0 <_sbrk+0x64>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d207      	bcs.n	80025bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025ac:	f006 fe08 	bl	80091c0 <__errno>
 80025b0:	4603      	mov	r3, r0
 80025b2:	220c      	movs	r2, #12
 80025b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025b6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ba:	e009      	b.n	80025d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025bc:	4b08      	ldr	r3, [pc, #32]	@ (80025e0 <_sbrk+0x64>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025c2:	4b07      	ldr	r3, [pc, #28]	@ (80025e0 <_sbrk+0x64>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4413      	add	r3, r2
 80025ca:	4a05      	ldr	r2, [pc, #20]	@ (80025e0 <_sbrk+0x64>)
 80025cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ce:	68fb      	ldr	r3, [r7, #12]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20020000 	.word	0x20020000
 80025dc:	00000400 	.word	0x00000400
 80025e0:	20000308 	.word	0x20000308
 80025e4:	20004f00 	.word	0x20004f00

080025e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025ec:	4b06      	ldr	r3, [pc, #24]	@ (8002608 <SystemInit+0x20>)
 80025ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025f2:	4a05      	ldr	r2, [pc, #20]	@ (8002608 <SystemInit+0x20>)
 80025f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025fc:	bf00      	nop
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002612:	f107 0308 	add.w	r3, r7, #8
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	605a      	str	r2, [r3, #4]
 800261c:	609a      	str	r2, [r3, #8]
 800261e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002620:	463b      	mov	r3, r7
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002628:	4b1e      	ldr	r3, [pc, #120]	@ (80026a4 <MX_TIM1_Init+0x98>)
 800262a:	4a1f      	ldr	r2, [pc, #124]	@ (80026a8 <MX_TIM1_Init+0x9c>)
 800262c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800262e:	4b1d      	ldr	r3, [pc, #116]	@ (80026a4 <MX_TIM1_Init+0x98>)
 8002630:	2247      	movs	r2, #71	@ 0x47
 8002632:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002634:	4b1b      	ldr	r3, [pc, #108]	@ (80026a4 <MX_TIM1_Init+0x98>)
 8002636:	2200      	movs	r2, #0
 8002638:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800263a:	4b1a      	ldr	r3, [pc, #104]	@ (80026a4 <MX_TIM1_Init+0x98>)
 800263c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002640:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002642:	4b18      	ldr	r3, [pc, #96]	@ (80026a4 <MX_TIM1_Init+0x98>)
 8002644:	2200      	movs	r2, #0
 8002646:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002648:	4b16      	ldr	r3, [pc, #88]	@ (80026a4 <MX_TIM1_Init+0x98>)
 800264a:	2200      	movs	r2, #0
 800264c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800264e:	4b15      	ldr	r3, [pc, #84]	@ (80026a4 <MX_TIM1_Init+0x98>)
 8002650:	2200      	movs	r2, #0
 8002652:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002654:	4813      	ldr	r0, [pc, #76]	@ (80026a4 <MX_TIM1_Init+0x98>)
 8002656:	f002 f987 	bl	8004968 <HAL_TIM_Base_Init>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002660:	f7ff fbc5 	bl	8001dee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002664:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002668:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800266a:	f107 0308 	add.w	r3, r7, #8
 800266e:	4619      	mov	r1, r3
 8002670:	480c      	ldr	r0, [pc, #48]	@ (80026a4 <MX_TIM1_Init+0x98>)
 8002672:	f002 fb1b 	bl	8004cac <HAL_TIM_ConfigClockSource>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800267c:	f7ff fbb7 	bl	8001dee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002680:	2300      	movs	r3, #0
 8002682:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002684:	2300      	movs	r3, #0
 8002686:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002688:	463b      	mov	r3, r7
 800268a:	4619      	mov	r1, r3
 800268c:	4805      	ldr	r0, [pc, #20]	@ (80026a4 <MX_TIM1_Init+0x98>)
 800268e:	f002 fd23 	bl	80050d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002698:	f7ff fba9 	bl	8001dee <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800269c:	bf00      	nop
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	2000030c 	.word	0x2000030c
 80026a8:	40010000 	.word	0x40010000

080026ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a0b      	ldr	r2, [pc, #44]	@ (80026e8 <HAL_TIM_Base_MspInit+0x3c>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d10d      	bne.n	80026da <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	4b0a      	ldr	r3, [pc, #40]	@ (80026ec <HAL_TIM_Base_MspInit+0x40>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c6:	4a09      	ldr	r2, [pc, #36]	@ (80026ec <HAL_TIM_Base_MspInit+0x40>)
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80026ce:	4b07      	ldr	r3, [pc, #28]	@ (80026ec <HAL_TIM_Base_MspInit+0x40>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80026da:	bf00      	nop
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40010000 	.word	0x40010000
 80026ec:	40023800 	.word	0x40023800

080026f0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026f4:	4b11      	ldr	r3, [pc, #68]	@ (800273c <MX_USART1_UART_Init+0x4c>)
 80026f6:	4a12      	ldr	r2, [pc, #72]	@ (8002740 <MX_USART1_UART_Init+0x50>)
 80026f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80026fa:	4b10      	ldr	r3, [pc, #64]	@ (800273c <MX_USART1_UART_Init+0x4c>)
 80026fc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002700:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002702:	4b0e      	ldr	r3, [pc, #56]	@ (800273c <MX_USART1_UART_Init+0x4c>)
 8002704:	2200      	movs	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002708:	4b0c      	ldr	r3, [pc, #48]	@ (800273c <MX_USART1_UART_Init+0x4c>)
 800270a:	2200      	movs	r2, #0
 800270c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800270e:	4b0b      	ldr	r3, [pc, #44]	@ (800273c <MX_USART1_UART_Init+0x4c>)
 8002710:	2200      	movs	r2, #0
 8002712:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002714:	4b09      	ldr	r3, [pc, #36]	@ (800273c <MX_USART1_UART_Init+0x4c>)
 8002716:	220c      	movs	r2, #12
 8002718:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800271a:	4b08      	ldr	r3, [pc, #32]	@ (800273c <MX_USART1_UART_Init+0x4c>)
 800271c:	2200      	movs	r2, #0
 800271e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002720:	4b06      	ldr	r3, [pc, #24]	@ (800273c <MX_USART1_UART_Init+0x4c>)
 8002722:	2200      	movs	r2, #0
 8002724:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002726:	4805      	ldr	r0, [pc, #20]	@ (800273c <MX_USART1_UART_Init+0x4c>)
 8002728:	f002 fd58 	bl	80051dc <HAL_UART_Init>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002732:	f7ff fb5c 	bl	8001dee <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000354 	.word	0x20000354
 8002740:	40011000 	.word	0x40011000

08002744 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08a      	sub	sp, #40	@ 0x28
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800274c:	f107 0314 	add.w	r3, r7, #20
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	60da      	str	r2, [r3, #12]
 800275a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a48      	ldr	r2, [pc, #288]	@ (8002884 <HAL_UART_MspInit+0x140>)
 8002762:	4293      	cmp	r3, r2
 8002764:	f040 8089 	bne.w	800287a <HAL_UART_MspInit+0x136>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002768:	2300      	movs	r3, #0
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	4b46      	ldr	r3, [pc, #280]	@ (8002888 <HAL_UART_MspInit+0x144>)
 800276e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002770:	4a45      	ldr	r2, [pc, #276]	@ (8002888 <HAL_UART_MspInit+0x144>)
 8002772:	f043 0310 	orr.w	r3, r3, #16
 8002776:	6453      	str	r3, [r2, #68]	@ 0x44
 8002778:	4b43      	ldr	r3, [pc, #268]	@ (8002888 <HAL_UART_MspInit+0x144>)
 800277a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277c:	f003 0310 	and.w	r3, r3, #16
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002784:	2300      	movs	r3, #0
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	4b3f      	ldr	r3, [pc, #252]	@ (8002888 <HAL_UART_MspInit+0x144>)
 800278a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278c:	4a3e      	ldr	r2, [pc, #248]	@ (8002888 <HAL_UART_MspInit+0x144>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6313      	str	r3, [r2, #48]	@ 0x30
 8002794:	4b3c      	ldr	r3, [pc, #240]	@ (8002888 <HAL_UART_MspInit+0x144>)
 8002796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027a0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80027a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a6:	2302      	movs	r3, #2
 80027a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ae:	2303      	movs	r3, #3
 80027b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027b2:	2307      	movs	r3, #7
 80027b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b6:	f107 0314 	add.w	r3, r7, #20
 80027ba:	4619      	mov	r1, r3
 80027bc:	4833      	ldr	r0, [pc, #204]	@ (800288c <HAL_UART_MspInit+0x148>)
 80027be:	f000 fccb 	bl	8003158 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80027c2:	4b33      	ldr	r3, [pc, #204]	@ (8002890 <HAL_UART_MspInit+0x14c>)
 80027c4:	4a33      	ldr	r2, [pc, #204]	@ (8002894 <HAL_UART_MspInit+0x150>)
 80027c6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80027c8:	4b31      	ldr	r3, [pc, #196]	@ (8002890 <HAL_UART_MspInit+0x14c>)
 80027ca:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80027ce:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002890 <HAL_UART_MspInit+0x14c>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027d6:	4b2e      	ldr	r3, [pc, #184]	@ (8002890 <HAL_UART_MspInit+0x14c>)
 80027d8:	2200      	movs	r2, #0
 80027da:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027dc:	4b2c      	ldr	r3, [pc, #176]	@ (8002890 <HAL_UART_MspInit+0x14c>)
 80027de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027e2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002890 <HAL_UART_MspInit+0x14c>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027ea:	4b29      	ldr	r3, [pc, #164]	@ (8002890 <HAL_UART_MspInit+0x14c>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80027f0:	4b27      	ldr	r3, [pc, #156]	@ (8002890 <HAL_UART_MspInit+0x14c>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027f6:	4b26      	ldr	r3, [pc, #152]	@ (8002890 <HAL_UART_MspInit+0x14c>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027fc:	4b24      	ldr	r3, [pc, #144]	@ (8002890 <HAL_UART_MspInit+0x14c>)
 80027fe:	2200      	movs	r2, #0
 8002800:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002802:	4823      	ldr	r0, [pc, #140]	@ (8002890 <HAL_UART_MspInit+0x14c>)
 8002804:	f000 f9be 	bl	8002b84 <HAL_DMA_Init>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800280e:	f7ff faee 	bl	8001dee <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a1e      	ldr	r2, [pc, #120]	@ (8002890 <HAL_UART_MspInit+0x14c>)
 8002816:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002818:	4a1d      	ldr	r2, [pc, #116]	@ (8002890 <HAL_UART_MspInit+0x14c>)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800281e:	4b1e      	ldr	r3, [pc, #120]	@ (8002898 <HAL_UART_MspInit+0x154>)
 8002820:	4a1e      	ldr	r2, [pc, #120]	@ (800289c <HAL_UART_MspInit+0x158>)
 8002822:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002824:	4b1c      	ldr	r3, [pc, #112]	@ (8002898 <HAL_UART_MspInit+0x154>)
 8002826:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800282a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800282c:	4b1a      	ldr	r3, [pc, #104]	@ (8002898 <HAL_UART_MspInit+0x154>)
 800282e:	2240      	movs	r2, #64	@ 0x40
 8002830:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002832:	4b19      	ldr	r3, [pc, #100]	@ (8002898 <HAL_UART_MspInit+0x154>)
 8002834:	2200      	movs	r2, #0
 8002836:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002838:	4b17      	ldr	r3, [pc, #92]	@ (8002898 <HAL_UART_MspInit+0x154>)
 800283a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800283e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002840:	4b15      	ldr	r3, [pc, #84]	@ (8002898 <HAL_UART_MspInit+0x154>)
 8002842:	2200      	movs	r2, #0
 8002844:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002846:	4b14      	ldr	r3, [pc, #80]	@ (8002898 <HAL_UART_MspInit+0x154>)
 8002848:	2200      	movs	r2, #0
 800284a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800284c:	4b12      	ldr	r3, [pc, #72]	@ (8002898 <HAL_UART_MspInit+0x154>)
 800284e:	2200      	movs	r2, #0
 8002850:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002852:	4b11      	ldr	r3, [pc, #68]	@ (8002898 <HAL_UART_MspInit+0x154>)
 8002854:	2200      	movs	r2, #0
 8002856:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002858:	4b0f      	ldr	r3, [pc, #60]	@ (8002898 <HAL_UART_MspInit+0x154>)
 800285a:	2200      	movs	r2, #0
 800285c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800285e:	480e      	ldr	r0, [pc, #56]	@ (8002898 <HAL_UART_MspInit+0x154>)
 8002860:	f000 f990 	bl	8002b84 <HAL_DMA_Init>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800286a:	f7ff fac0 	bl	8001dee <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a09      	ldr	r2, [pc, #36]	@ (8002898 <HAL_UART_MspInit+0x154>)
 8002872:	639a      	str	r2, [r3, #56]	@ 0x38
 8002874:	4a08      	ldr	r2, [pc, #32]	@ (8002898 <HAL_UART_MspInit+0x154>)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800287a:	bf00      	nop
 800287c:	3728      	adds	r7, #40	@ 0x28
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40011000 	.word	0x40011000
 8002888:	40023800 	.word	0x40023800
 800288c:	40020000 	.word	0x40020000
 8002890:	2000039c 	.word	0x2000039c
 8002894:	40026440 	.word	0x40026440
 8002898:	200003fc 	.word	0x200003fc
 800289c:	400264b8 	.word	0x400264b8

080028a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80028a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80028a4:	f7ff fea0 	bl	80025e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028a8:	480c      	ldr	r0, [pc, #48]	@ (80028dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028aa:	490d      	ldr	r1, [pc, #52]	@ (80028e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028ac:	4a0d      	ldr	r2, [pc, #52]	@ (80028e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028b0:	e002      	b.n	80028b8 <LoopCopyDataInit>

080028b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028b6:	3304      	adds	r3, #4

080028b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028bc:	d3f9      	bcc.n	80028b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028be:	4a0a      	ldr	r2, [pc, #40]	@ (80028e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028c0:	4c0a      	ldr	r4, [pc, #40]	@ (80028ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80028c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028c4:	e001      	b.n	80028ca <LoopFillZerobss>

080028c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028c8:	3204      	adds	r2, #4

080028ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028cc:	d3fb      	bcc.n	80028c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028ce:	f006 fc7d 	bl	80091cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028d2:	f7ff f9f7 	bl	8001cc4 <main>
  bx  lr    
 80028d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80028d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028e0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80028e4:	0800c4a8 	.word	0x0800c4a8
  ldr r2, =_sbss
 80028e8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80028ec:	20004efc 	.word	0x20004efc

080028f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028f0:	e7fe      	b.n	80028f0 <ADC_IRQHandler>
	...

080028f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002934 <HAL_Init+0x40>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002934 <HAL_Init+0x40>)
 80028fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002902:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002904:	4b0b      	ldr	r3, [pc, #44]	@ (8002934 <HAL_Init+0x40>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a0a      	ldr	r2, [pc, #40]	@ (8002934 <HAL_Init+0x40>)
 800290a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800290e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002910:	4b08      	ldr	r3, [pc, #32]	@ (8002934 <HAL_Init+0x40>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a07      	ldr	r2, [pc, #28]	@ (8002934 <HAL_Init+0x40>)
 8002916:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800291a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800291c:	2003      	movs	r0, #3
 800291e:	f000 f8fc 	bl	8002b1a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002922:	200f      	movs	r0, #15
 8002924:	f7ff fd00 	bl	8002328 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002928:	f7ff fcd2 	bl	80022d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40023c00 	.word	0x40023c00

08002938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800293c:	4b06      	ldr	r3, [pc, #24]	@ (8002958 <HAL_IncTick+0x20>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	461a      	mov	r2, r3
 8002942:	4b06      	ldr	r3, [pc, #24]	@ (800295c <HAL_IncTick+0x24>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4413      	add	r3, r2
 8002948:	4a04      	ldr	r2, [pc, #16]	@ (800295c <HAL_IncTick+0x24>)
 800294a:	6013      	str	r3, [r2, #0]
}
 800294c:	bf00      	nop
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	20000010 	.word	0x20000010
 800295c:	2000045c 	.word	0x2000045c

08002960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return uwTick;
 8002964:	4b03      	ldr	r3, [pc, #12]	@ (8002974 <HAL_GetTick+0x14>)
 8002966:	681b      	ldr	r3, [r3, #0]
}
 8002968:	4618      	mov	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	2000045c 	.word	0x2000045c

08002978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002980:	f7ff ffee 	bl	8002960 <HAL_GetTick>
 8002984:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002990:	d005      	beq.n	800299e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002992:	4b0a      	ldr	r3, [pc, #40]	@ (80029bc <HAL_Delay+0x44>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4413      	add	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800299e:	bf00      	nop
 80029a0:	f7ff ffde 	bl	8002960 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d8f7      	bhi.n	80029a0 <HAL_Delay+0x28>
  {
  }
}
 80029b0:	bf00      	nop
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20000010 	.word	0x20000010

080029c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002a04 <__NVIC_SetPriorityGrouping+0x44>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029dc:	4013      	ands	r3, r2
 80029de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029f2:	4a04      	ldr	r2, [pc, #16]	@ (8002a04 <__NVIC_SetPriorityGrouping+0x44>)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	60d3      	str	r3, [r2, #12]
}
 80029f8:	bf00      	nop
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a0c:	4b04      	ldr	r3, [pc, #16]	@ (8002a20 <__NVIC_GetPriorityGrouping+0x18>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	0a1b      	lsrs	r3, r3, #8
 8002a12:	f003 0307 	and.w	r3, r3, #7
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	e000ed00 	.word	0xe000ed00

08002a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	db0b      	blt.n	8002a4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	f003 021f 	and.w	r2, r3, #31
 8002a3c:	4907      	ldr	r1, [pc, #28]	@ (8002a5c <__NVIC_EnableIRQ+0x38>)
 8002a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a42:	095b      	lsrs	r3, r3, #5
 8002a44:	2001      	movs	r0, #1
 8002a46:	fa00 f202 	lsl.w	r2, r0, r2
 8002a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	e000e100 	.word	0xe000e100

08002a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	6039      	str	r1, [r7, #0]
 8002a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	db0a      	blt.n	8002a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	490c      	ldr	r1, [pc, #48]	@ (8002aac <__NVIC_SetPriority+0x4c>)
 8002a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7e:	0112      	lsls	r2, r2, #4
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	440b      	add	r3, r1
 8002a84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a88:	e00a      	b.n	8002aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	4908      	ldr	r1, [pc, #32]	@ (8002ab0 <__NVIC_SetPriority+0x50>)
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	3b04      	subs	r3, #4
 8002a98:	0112      	lsls	r2, r2, #4
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	761a      	strb	r2, [r3, #24]
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	e000e100 	.word	0xe000e100
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b089      	sub	sp, #36	@ 0x24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f1c3 0307 	rsb	r3, r3, #7
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	bf28      	it	cs
 8002ad2:	2304      	movcs	r3, #4
 8002ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3304      	adds	r3, #4
 8002ada:	2b06      	cmp	r3, #6
 8002adc:	d902      	bls.n	8002ae4 <NVIC_EncodePriority+0x30>
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	3b03      	subs	r3, #3
 8002ae2:	e000      	b.n	8002ae6 <NVIC_EncodePriority+0x32>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43da      	mvns	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	401a      	ands	r2, r3
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002afc:	f04f 31ff 	mov.w	r1, #4294967295
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	fa01 f303 	lsl.w	r3, r1, r3
 8002b06:	43d9      	mvns	r1, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b0c:	4313      	orrs	r3, r2
         );
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3724      	adds	r7, #36	@ 0x24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff ff4c 	bl	80029c0 <__NVIC_SetPriorityGrouping>
}
 8002b28:	bf00      	nop
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b42:	f7ff ff61 	bl	8002a08 <__NVIC_GetPriorityGrouping>
 8002b46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	68b9      	ldr	r1, [r7, #8]
 8002b4c:	6978      	ldr	r0, [r7, #20]
 8002b4e:	f7ff ffb1 	bl	8002ab4 <NVIC_EncodePriority>
 8002b52:	4602      	mov	r2, r0
 8002b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b58:	4611      	mov	r1, r2
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff ff80 	bl	8002a60 <__NVIC_SetPriority>
}
 8002b60:	bf00      	nop
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff ff54 	bl	8002a24 <__NVIC_EnableIRQ>
}
 8002b7c:	bf00      	nop
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b90:	f7ff fee6 	bl	8002960 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e099      	b.n	8002cd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0201 	bic.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bc0:	e00f      	b.n	8002be2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bc2:	f7ff fecd 	bl	8002960 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b05      	cmp	r3, #5
 8002bce:	d908      	bls.n	8002be2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2203      	movs	r2, #3
 8002bda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e078      	b.n	8002cd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1e8      	bne.n	8002bc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	4b38      	ldr	r3, [pc, #224]	@ (8002cdc <HAL_DMA_Init+0x158>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d107      	bne.n	8002c4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c44:	4313      	orrs	r3, r2
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f023 0307 	bic.w	r3, r3, #7
 8002c62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d117      	bne.n	8002ca6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00e      	beq.n	8002ca6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f9e9 	bl	8003060 <DMA_CheckFifoParam>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d008      	beq.n	8002ca6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2240      	movs	r2, #64	@ 0x40
 8002c98:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e016      	b.n	8002cd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f9a0 	bl	8002ff4 <DMA_CalcBaseAndBitshift>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cbc:	223f      	movs	r2, #63	@ 0x3f
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	f010803f 	.word	0xf010803f

08002ce0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cec:	4b8e      	ldr	r3, [pc, #568]	@ (8002f28 <HAL_DMA_IRQHandler+0x248>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a8e      	ldr	r2, [pc, #568]	@ (8002f2c <HAL_DMA_IRQHandler+0x24c>)
 8002cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf6:	0a9b      	lsrs	r3, r3, #10
 8002cf8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0a:	2208      	movs	r2, #8
 8002d0c:	409a      	lsls	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4013      	ands	r3, r2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d01a      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d013      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0204 	bic.w	r2, r2, #4
 8002d32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d38:	2208      	movs	r2, #8
 8002d3a:	409a      	lsls	r2, r3
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d44:	f043 0201 	orr.w	r2, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d50:	2201      	movs	r2, #1
 8002d52:	409a      	lsls	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4013      	ands	r3, r2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d012      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00b      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d6e:	2201      	movs	r2, #1
 8002d70:	409a      	lsls	r2, r3
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d7a:	f043 0202 	orr.w	r2, r3, #2
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d86:	2204      	movs	r2, #4
 8002d88:	409a      	lsls	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d012      	beq.n	8002db8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00b      	beq.n	8002db8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da4:	2204      	movs	r2, #4
 8002da6:	409a      	lsls	r2, r3
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db0:	f043 0204 	orr.w	r2, r3, #4
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dbc:	2210      	movs	r2, #16
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d043      	beq.n	8002e50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d03c      	beq.n	8002e50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dda:	2210      	movs	r2, #16
 8002ddc:	409a      	lsls	r2, r3
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d018      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d108      	bne.n	8002e10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d024      	beq.n	8002e50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	4798      	blx	r3
 8002e0e:	e01f      	b.n	8002e50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d01b      	beq.n	8002e50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	4798      	blx	r3
 8002e20:	e016      	b.n	8002e50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d107      	bne.n	8002e40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0208 	bic.w	r2, r2, #8
 8002e3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e54:	2220      	movs	r2, #32
 8002e56:	409a      	lsls	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 808f 	beq.w	8002f80 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0310 	and.w	r3, r3, #16
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 8087 	beq.w	8002f80 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e76:	2220      	movs	r2, #32
 8002e78:	409a      	lsls	r2, r3
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b05      	cmp	r3, #5
 8002e88:	d136      	bne.n	8002ef8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0216 	bic.w	r2, r2, #22
 8002e98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695a      	ldr	r2, [r3, #20]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ea8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d103      	bne.n	8002eba <HAL_DMA_IRQHandler+0x1da>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d007      	beq.n	8002eca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0208 	bic.w	r2, r2, #8
 8002ec8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ece:	223f      	movs	r2, #63	@ 0x3f
 8002ed0:	409a      	lsls	r2, r3
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d07e      	beq.n	8002fec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	4798      	blx	r3
        }
        return;
 8002ef6:	e079      	b.n	8002fec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d01d      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10d      	bne.n	8002f30 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d031      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	4798      	blx	r3
 8002f24:	e02c      	b.n	8002f80 <HAL_DMA_IRQHandler+0x2a0>
 8002f26:	bf00      	nop
 8002f28:	20000008 	.word	0x20000008
 8002f2c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d023      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	4798      	blx	r3
 8002f40:	e01e      	b.n	8002f80 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10f      	bne.n	8002f70 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0210 	bic.w	r2, r2, #16
 8002f5e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d032      	beq.n	8002fee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d022      	beq.n	8002fda <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2205      	movs	r2, #5
 8002f98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0201 	bic.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d307      	bcc.n	8002fc8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f2      	bne.n	8002fac <HAL_DMA_IRQHandler+0x2cc>
 8002fc6:	e000      	b.n	8002fca <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002fc8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d005      	beq.n	8002fee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	4798      	blx	r3
 8002fea:	e000      	b.n	8002fee <HAL_DMA_IRQHandler+0x30e>
        return;
 8002fec:	bf00      	nop
    }
  }
}
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	3b10      	subs	r3, #16
 8003004:	4a14      	ldr	r2, [pc, #80]	@ (8003058 <DMA_CalcBaseAndBitshift+0x64>)
 8003006:	fba2 2303 	umull	r2, r3, r2, r3
 800300a:	091b      	lsrs	r3, r3, #4
 800300c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800300e:	4a13      	ldr	r2, [pc, #76]	@ (800305c <DMA_CalcBaseAndBitshift+0x68>)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4413      	add	r3, r2
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	461a      	mov	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2b03      	cmp	r3, #3
 8003020:	d909      	bls.n	8003036 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800302a:	f023 0303 	bic.w	r3, r3, #3
 800302e:	1d1a      	adds	r2, r3, #4
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	659a      	str	r2, [r3, #88]	@ 0x58
 8003034:	e007      	b.n	8003046 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800303e:	f023 0303 	bic.w	r3, r3, #3
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800304a:	4618      	mov	r0, r3
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	aaaaaaab 	.word	0xaaaaaaab
 800305c:	0800c120 	.word	0x0800c120

08003060 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003070:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d11f      	bne.n	80030ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2b03      	cmp	r3, #3
 800307e:	d856      	bhi.n	800312e <DMA_CheckFifoParam+0xce>
 8003080:	a201      	add	r2, pc, #4	@ (adr r2, 8003088 <DMA_CheckFifoParam+0x28>)
 8003082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003086:	bf00      	nop
 8003088:	08003099 	.word	0x08003099
 800308c:	080030ab 	.word	0x080030ab
 8003090:	08003099 	.word	0x08003099
 8003094:	0800312f 	.word	0x0800312f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d046      	beq.n	8003132 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030a8:	e043      	b.n	8003132 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030b2:	d140      	bne.n	8003136 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b8:	e03d      	b.n	8003136 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030c2:	d121      	bne.n	8003108 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b03      	cmp	r3, #3
 80030c8:	d837      	bhi.n	800313a <DMA_CheckFifoParam+0xda>
 80030ca:	a201      	add	r2, pc, #4	@ (adr r2, 80030d0 <DMA_CheckFifoParam+0x70>)
 80030cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d0:	080030e1 	.word	0x080030e1
 80030d4:	080030e7 	.word	0x080030e7
 80030d8:	080030e1 	.word	0x080030e1
 80030dc:	080030f9 	.word	0x080030f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	73fb      	strb	r3, [r7, #15]
      break;
 80030e4:	e030      	b.n	8003148 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d025      	beq.n	800313e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030f6:	e022      	b.n	800313e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003100:	d11f      	bne.n	8003142 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003106:	e01c      	b.n	8003142 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d903      	bls.n	8003116 <DMA_CheckFifoParam+0xb6>
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2b03      	cmp	r3, #3
 8003112:	d003      	beq.n	800311c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003114:	e018      	b.n	8003148 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	73fb      	strb	r3, [r7, #15]
      break;
 800311a:	e015      	b.n	8003148 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003120:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00e      	beq.n	8003146 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	73fb      	strb	r3, [r7, #15]
      break;
 800312c:	e00b      	b.n	8003146 <DMA_CheckFifoParam+0xe6>
      break;
 800312e:	bf00      	nop
 8003130:	e00a      	b.n	8003148 <DMA_CheckFifoParam+0xe8>
      break;
 8003132:	bf00      	nop
 8003134:	e008      	b.n	8003148 <DMA_CheckFifoParam+0xe8>
      break;
 8003136:	bf00      	nop
 8003138:	e006      	b.n	8003148 <DMA_CheckFifoParam+0xe8>
      break;
 800313a:	bf00      	nop
 800313c:	e004      	b.n	8003148 <DMA_CheckFifoParam+0xe8>
      break;
 800313e:	bf00      	nop
 8003140:	e002      	b.n	8003148 <DMA_CheckFifoParam+0xe8>
      break;   
 8003142:	bf00      	nop
 8003144:	e000      	b.n	8003148 <DMA_CheckFifoParam+0xe8>
      break;
 8003146:	bf00      	nop
    }
  } 
  
  return status; 
 8003148:	7bfb      	ldrb	r3, [r7, #15]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop

08003158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003158:	b480      	push	{r7}
 800315a:	b089      	sub	sp, #36	@ 0x24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003162:	2300      	movs	r3, #0
 8003164:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003166:	2300      	movs	r3, #0
 8003168:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800316a:	2300      	movs	r3, #0
 800316c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800316e:	2300      	movs	r3, #0
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	e159      	b.n	8003428 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003174:	2201      	movs	r2, #1
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	4013      	ands	r3, r2
 8003186:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	429a      	cmp	r2, r3
 800318e:	f040 8148 	bne.w	8003422 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	2b01      	cmp	r3, #1
 800319c:	d005      	beq.n	80031aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d130      	bne.n	800320c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	2203      	movs	r2, #3
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	43db      	mvns	r3, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	4013      	ands	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031e0:	2201      	movs	r2, #1
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4013      	ands	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	091b      	lsrs	r3, r3, #4
 80031f6:	f003 0201 	and.w	r2, r3, #1
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4313      	orrs	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 0303 	and.w	r3, r3, #3
 8003214:	2b03      	cmp	r3, #3
 8003216:	d017      	beq.n	8003248 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	2203      	movs	r2, #3
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	43db      	mvns	r3, r3
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	4013      	ands	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4313      	orrs	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 0303 	and.w	r3, r3, #3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d123      	bne.n	800329c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	08da      	lsrs	r2, r3, #3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3208      	adds	r2, #8
 800325c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003260:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	220f      	movs	r2, #15
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4313      	orrs	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	08da      	lsrs	r2, r3, #3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3208      	adds	r2, #8
 8003296:	69b9      	ldr	r1, [r7, #24]
 8003298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	2203      	movs	r2, #3
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4013      	ands	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 0203 	and.w	r2, r3, #3
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 80a2 	beq.w	8003422 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	4b57      	ldr	r3, [pc, #348]	@ (8003440 <HAL_GPIO_Init+0x2e8>)
 80032e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e6:	4a56      	ldr	r2, [pc, #344]	@ (8003440 <HAL_GPIO_Init+0x2e8>)
 80032e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80032ee:	4b54      	ldr	r3, [pc, #336]	@ (8003440 <HAL_GPIO_Init+0x2e8>)
 80032f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032fa:	4a52      	ldr	r2, [pc, #328]	@ (8003444 <HAL_GPIO_Init+0x2ec>)
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	089b      	lsrs	r3, r3, #2
 8003300:	3302      	adds	r3, #2
 8003302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003306:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f003 0303 	and.w	r3, r3, #3
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	220f      	movs	r2, #15
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43db      	mvns	r3, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4013      	ands	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a49      	ldr	r2, [pc, #292]	@ (8003448 <HAL_GPIO_Init+0x2f0>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d019      	beq.n	800335a <HAL_GPIO_Init+0x202>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a48      	ldr	r2, [pc, #288]	@ (800344c <HAL_GPIO_Init+0x2f4>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d013      	beq.n	8003356 <HAL_GPIO_Init+0x1fe>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a47      	ldr	r2, [pc, #284]	@ (8003450 <HAL_GPIO_Init+0x2f8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d00d      	beq.n	8003352 <HAL_GPIO_Init+0x1fa>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a46      	ldr	r2, [pc, #280]	@ (8003454 <HAL_GPIO_Init+0x2fc>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d007      	beq.n	800334e <HAL_GPIO_Init+0x1f6>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a45      	ldr	r2, [pc, #276]	@ (8003458 <HAL_GPIO_Init+0x300>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d101      	bne.n	800334a <HAL_GPIO_Init+0x1f2>
 8003346:	2304      	movs	r3, #4
 8003348:	e008      	b.n	800335c <HAL_GPIO_Init+0x204>
 800334a:	2307      	movs	r3, #7
 800334c:	e006      	b.n	800335c <HAL_GPIO_Init+0x204>
 800334e:	2303      	movs	r3, #3
 8003350:	e004      	b.n	800335c <HAL_GPIO_Init+0x204>
 8003352:	2302      	movs	r3, #2
 8003354:	e002      	b.n	800335c <HAL_GPIO_Init+0x204>
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <HAL_GPIO_Init+0x204>
 800335a:	2300      	movs	r3, #0
 800335c:	69fa      	ldr	r2, [r7, #28]
 800335e:	f002 0203 	and.w	r2, r2, #3
 8003362:	0092      	lsls	r2, r2, #2
 8003364:	4093      	lsls	r3, r2
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4313      	orrs	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800336c:	4935      	ldr	r1, [pc, #212]	@ (8003444 <HAL_GPIO_Init+0x2ec>)
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	089b      	lsrs	r3, r3, #2
 8003372:	3302      	adds	r3, #2
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800337a:	4b38      	ldr	r3, [pc, #224]	@ (800345c <HAL_GPIO_Init+0x304>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	43db      	mvns	r3, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4013      	ands	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	4313      	orrs	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800339e:	4a2f      	ldr	r2, [pc, #188]	@ (800345c <HAL_GPIO_Init+0x304>)
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033a4:	4b2d      	ldr	r3, [pc, #180]	@ (800345c <HAL_GPIO_Init+0x304>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	43db      	mvns	r3, r3
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4013      	ands	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033c8:	4a24      	ldr	r2, [pc, #144]	@ (800345c <HAL_GPIO_Init+0x304>)
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033ce:	4b23      	ldr	r3, [pc, #140]	@ (800345c <HAL_GPIO_Init+0x304>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	43db      	mvns	r3, r3
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	4013      	ands	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033f2:	4a1a      	ldr	r2, [pc, #104]	@ (800345c <HAL_GPIO_Init+0x304>)
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033f8:	4b18      	ldr	r3, [pc, #96]	@ (800345c <HAL_GPIO_Init+0x304>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	43db      	mvns	r3, r3
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4013      	ands	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800341c:	4a0f      	ldr	r2, [pc, #60]	@ (800345c <HAL_GPIO_Init+0x304>)
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	3301      	adds	r3, #1
 8003426:	61fb      	str	r3, [r7, #28]
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	2b0f      	cmp	r3, #15
 800342c:	f67f aea2 	bls.w	8003174 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003430:	bf00      	nop
 8003432:	bf00      	nop
 8003434:	3724      	adds	r7, #36	@ 0x24
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40023800 	.word	0x40023800
 8003444:	40013800 	.word	0x40013800
 8003448:	40020000 	.word	0x40020000
 800344c:	40020400 	.word	0x40020400
 8003450:	40020800 	.word	0x40020800
 8003454:	40020c00 	.word	0x40020c00
 8003458:	40021000 	.word	0x40021000
 800345c:	40013c00 	.word	0x40013c00

08003460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	807b      	strh	r3, [r7, #2]
 800346c:	4613      	mov	r3, r2
 800346e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003470:	787b      	ldrb	r3, [r7, #1]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003476:	887a      	ldrh	r2, [r7, #2]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800347c:	e003      	b.n	8003486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800347e:	887b      	ldrh	r3, [r7, #2]
 8003480:	041a      	lsls	r2, r3, #16
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	619a      	str	r2, [r3, #24]
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
	...

08003494 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e267      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d075      	beq.n	800359e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034b2:	4b88      	ldr	r3, [pc, #544]	@ (80036d4 <HAL_RCC_OscConfig+0x240>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 030c 	and.w	r3, r3, #12
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d00c      	beq.n	80034d8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034be:	4b85      	ldr	r3, [pc, #532]	@ (80036d4 <HAL_RCC_OscConfig+0x240>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d112      	bne.n	80034f0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ca:	4b82      	ldr	r3, [pc, #520]	@ (80036d4 <HAL_RCC_OscConfig+0x240>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034d6:	d10b      	bne.n	80034f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d8:	4b7e      	ldr	r3, [pc, #504]	@ (80036d4 <HAL_RCC_OscConfig+0x240>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d05b      	beq.n	800359c <HAL_RCC_OscConfig+0x108>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d157      	bne.n	800359c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e242      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034f8:	d106      	bne.n	8003508 <HAL_RCC_OscConfig+0x74>
 80034fa:	4b76      	ldr	r3, [pc, #472]	@ (80036d4 <HAL_RCC_OscConfig+0x240>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a75      	ldr	r2, [pc, #468]	@ (80036d4 <HAL_RCC_OscConfig+0x240>)
 8003500:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	e01d      	b.n	8003544 <HAL_RCC_OscConfig+0xb0>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003510:	d10c      	bne.n	800352c <HAL_RCC_OscConfig+0x98>
 8003512:	4b70      	ldr	r3, [pc, #448]	@ (80036d4 <HAL_RCC_OscConfig+0x240>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a6f      	ldr	r2, [pc, #444]	@ (80036d4 <HAL_RCC_OscConfig+0x240>)
 8003518:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	4b6d      	ldr	r3, [pc, #436]	@ (80036d4 <HAL_RCC_OscConfig+0x240>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a6c      	ldr	r2, [pc, #432]	@ (80036d4 <HAL_RCC_OscConfig+0x240>)
 8003524:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	e00b      	b.n	8003544 <HAL_RCC_OscConfig+0xb0>
 800352c:	4b69      	ldr	r3, [pc, #420]	@ (80036d4 <HAL_RCC_OscConfig+0x240>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a68      	ldr	r2, [pc, #416]	@ (80036d4 <HAL_RCC_OscConfig+0x240>)
 8003532:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003536:	6013      	str	r3, [r2, #0]
 8003538:	4b66      	ldr	r3, [pc, #408]	@ (80036d4 <HAL_RCC_OscConfig+0x240>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a65      	ldr	r2, [pc, #404]	@ (80036d4 <HAL_RCC_OscConfig+0x240>)
 800353e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003542:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d013      	beq.n	8003574 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354c:	f7ff fa08 	bl	8002960 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003554:	f7ff fa04 	bl	8002960 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b64      	cmp	r3, #100	@ 0x64
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e207      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003566:	4b5b      	ldr	r3, [pc, #364]	@ (80036d4 <HAL_RCC_OscConfig+0x240>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0xc0>
 8003572:	e014      	b.n	800359e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003574:	f7ff f9f4 	bl	8002960 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800357c:	f7ff f9f0 	bl	8002960 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b64      	cmp	r3, #100	@ 0x64
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e1f3      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800358e:	4b51      	ldr	r3, [pc, #324]	@ (80036d4 <HAL_RCC_OscConfig+0x240>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f0      	bne.n	800357c <HAL_RCC_OscConfig+0xe8>
 800359a:	e000      	b.n	800359e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800359c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d063      	beq.n	8003672 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035aa:	4b4a      	ldr	r3, [pc, #296]	@ (80036d4 <HAL_RCC_OscConfig+0x240>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 030c 	and.w	r3, r3, #12
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00b      	beq.n	80035ce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035b6:	4b47      	ldr	r3, [pc, #284]	@ (80036d4 <HAL_RCC_OscConfig+0x240>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035be:	2b08      	cmp	r3, #8
 80035c0:	d11c      	bne.n	80035fc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035c2:	4b44      	ldr	r3, [pc, #272]	@ (80036d4 <HAL_RCC_OscConfig+0x240>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d116      	bne.n	80035fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ce:	4b41      	ldr	r3, [pc, #260]	@ (80036d4 <HAL_RCC_OscConfig+0x240>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d005      	beq.n	80035e6 <HAL_RCC_OscConfig+0x152>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d001      	beq.n	80035e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e1c7      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e6:	4b3b      	ldr	r3, [pc, #236]	@ (80036d4 <HAL_RCC_OscConfig+0x240>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	4937      	ldr	r1, [pc, #220]	@ (80036d4 <HAL_RCC_OscConfig+0x240>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035fa:	e03a      	b.n	8003672 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d020      	beq.n	8003646 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003604:	4b34      	ldr	r3, [pc, #208]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 8003606:	2201      	movs	r2, #1
 8003608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360a:	f7ff f9a9 	bl	8002960 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003612:	f7ff f9a5 	bl	8002960 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e1a8      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003624:	4b2b      	ldr	r3, [pc, #172]	@ (80036d4 <HAL_RCC_OscConfig+0x240>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0f0      	beq.n	8003612 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003630:	4b28      	ldr	r3, [pc, #160]	@ (80036d4 <HAL_RCC_OscConfig+0x240>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	4925      	ldr	r1, [pc, #148]	@ (80036d4 <HAL_RCC_OscConfig+0x240>)
 8003640:	4313      	orrs	r3, r2
 8003642:	600b      	str	r3, [r1, #0]
 8003644:	e015      	b.n	8003672 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003646:	4b24      	ldr	r3, [pc, #144]	@ (80036d8 <HAL_RCC_OscConfig+0x244>)
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364c:	f7ff f988 	bl	8002960 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003654:	f7ff f984 	bl	8002960 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e187      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003666:	4b1b      	ldr	r3, [pc, #108]	@ (80036d4 <HAL_RCC_OscConfig+0x240>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1f0      	bne.n	8003654 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	2b00      	cmp	r3, #0
 800367c:	d036      	beq.n	80036ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d016      	beq.n	80036b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003686:	4b15      	ldr	r3, [pc, #84]	@ (80036dc <HAL_RCC_OscConfig+0x248>)
 8003688:	2201      	movs	r2, #1
 800368a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800368c:	f7ff f968 	bl	8002960 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003694:	f7ff f964 	bl	8002960 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e167      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036a6:	4b0b      	ldr	r3, [pc, #44]	@ (80036d4 <HAL_RCC_OscConfig+0x240>)
 80036a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d0f0      	beq.n	8003694 <HAL_RCC_OscConfig+0x200>
 80036b2:	e01b      	b.n	80036ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036b4:	4b09      	ldr	r3, [pc, #36]	@ (80036dc <HAL_RCC_OscConfig+0x248>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ba:	f7ff f951 	bl	8002960 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c0:	e00e      	b.n	80036e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036c2:	f7ff f94d 	bl	8002960 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d907      	bls.n	80036e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e150      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
 80036d4:	40023800 	.word	0x40023800
 80036d8:	42470000 	.word	0x42470000
 80036dc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e0:	4b88      	ldr	r3, [pc, #544]	@ (8003904 <HAL_RCC_OscConfig+0x470>)
 80036e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1ea      	bne.n	80036c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 8097 	beq.w	8003828 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036fa:	2300      	movs	r3, #0
 80036fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036fe:	4b81      	ldr	r3, [pc, #516]	@ (8003904 <HAL_RCC_OscConfig+0x470>)
 8003700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10f      	bne.n	800372a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	60bb      	str	r3, [r7, #8]
 800370e:	4b7d      	ldr	r3, [pc, #500]	@ (8003904 <HAL_RCC_OscConfig+0x470>)
 8003710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003712:	4a7c      	ldr	r2, [pc, #496]	@ (8003904 <HAL_RCC_OscConfig+0x470>)
 8003714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003718:	6413      	str	r3, [r2, #64]	@ 0x40
 800371a:	4b7a      	ldr	r3, [pc, #488]	@ (8003904 <HAL_RCC_OscConfig+0x470>)
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003722:	60bb      	str	r3, [r7, #8]
 8003724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003726:	2301      	movs	r3, #1
 8003728:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800372a:	4b77      	ldr	r3, [pc, #476]	@ (8003908 <HAL_RCC_OscConfig+0x474>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003732:	2b00      	cmp	r3, #0
 8003734:	d118      	bne.n	8003768 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003736:	4b74      	ldr	r3, [pc, #464]	@ (8003908 <HAL_RCC_OscConfig+0x474>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a73      	ldr	r2, [pc, #460]	@ (8003908 <HAL_RCC_OscConfig+0x474>)
 800373c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003742:	f7ff f90d 	bl	8002960 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800374a:	f7ff f909 	bl	8002960 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e10c      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375c:	4b6a      	ldr	r3, [pc, #424]	@ (8003908 <HAL_RCC_OscConfig+0x474>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0f0      	beq.n	800374a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d106      	bne.n	800377e <HAL_RCC_OscConfig+0x2ea>
 8003770:	4b64      	ldr	r3, [pc, #400]	@ (8003904 <HAL_RCC_OscConfig+0x470>)
 8003772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003774:	4a63      	ldr	r2, [pc, #396]	@ (8003904 <HAL_RCC_OscConfig+0x470>)
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	6713      	str	r3, [r2, #112]	@ 0x70
 800377c:	e01c      	b.n	80037b8 <HAL_RCC_OscConfig+0x324>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	2b05      	cmp	r3, #5
 8003784:	d10c      	bne.n	80037a0 <HAL_RCC_OscConfig+0x30c>
 8003786:	4b5f      	ldr	r3, [pc, #380]	@ (8003904 <HAL_RCC_OscConfig+0x470>)
 8003788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800378a:	4a5e      	ldr	r2, [pc, #376]	@ (8003904 <HAL_RCC_OscConfig+0x470>)
 800378c:	f043 0304 	orr.w	r3, r3, #4
 8003790:	6713      	str	r3, [r2, #112]	@ 0x70
 8003792:	4b5c      	ldr	r3, [pc, #368]	@ (8003904 <HAL_RCC_OscConfig+0x470>)
 8003794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003796:	4a5b      	ldr	r2, [pc, #364]	@ (8003904 <HAL_RCC_OscConfig+0x470>)
 8003798:	f043 0301 	orr.w	r3, r3, #1
 800379c:	6713      	str	r3, [r2, #112]	@ 0x70
 800379e:	e00b      	b.n	80037b8 <HAL_RCC_OscConfig+0x324>
 80037a0:	4b58      	ldr	r3, [pc, #352]	@ (8003904 <HAL_RCC_OscConfig+0x470>)
 80037a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a4:	4a57      	ldr	r2, [pc, #348]	@ (8003904 <HAL_RCC_OscConfig+0x470>)
 80037a6:	f023 0301 	bic.w	r3, r3, #1
 80037aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80037ac:	4b55      	ldr	r3, [pc, #340]	@ (8003904 <HAL_RCC_OscConfig+0x470>)
 80037ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b0:	4a54      	ldr	r2, [pc, #336]	@ (8003904 <HAL_RCC_OscConfig+0x470>)
 80037b2:	f023 0304 	bic.w	r3, r3, #4
 80037b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d015      	beq.n	80037ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c0:	f7ff f8ce 	bl	8002960 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c6:	e00a      	b.n	80037de <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c8:	f7ff f8ca 	bl	8002960 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e0cb      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037de:	4b49      	ldr	r3, [pc, #292]	@ (8003904 <HAL_RCC_OscConfig+0x470>)
 80037e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0ee      	beq.n	80037c8 <HAL_RCC_OscConfig+0x334>
 80037ea:	e014      	b.n	8003816 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ec:	f7ff f8b8 	bl	8002960 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f2:	e00a      	b.n	800380a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f4:	f7ff f8b4 	bl	8002960 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003802:	4293      	cmp	r3, r2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e0b5      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800380a:	4b3e      	ldr	r3, [pc, #248]	@ (8003904 <HAL_RCC_OscConfig+0x470>)
 800380c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1ee      	bne.n	80037f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003816:	7dfb      	ldrb	r3, [r7, #23]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d105      	bne.n	8003828 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800381c:	4b39      	ldr	r3, [pc, #228]	@ (8003904 <HAL_RCC_OscConfig+0x470>)
 800381e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003820:	4a38      	ldr	r2, [pc, #224]	@ (8003904 <HAL_RCC_OscConfig+0x470>)
 8003822:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003826:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 80a1 	beq.w	8003974 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003832:	4b34      	ldr	r3, [pc, #208]	@ (8003904 <HAL_RCC_OscConfig+0x470>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	2b08      	cmp	r3, #8
 800383c:	d05c      	beq.n	80038f8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d141      	bne.n	80038ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003846:	4b31      	ldr	r3, [pc, #196]	@ (800390c <HAL_RCC_OscConfig+0x478>)
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384c:	f7ff f888 	bl	8002960 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003854:	f7ff f884 	bl	8002960 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e087      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003866:	4b27      	ldr	r3, [pc, #156]	@ (8003904 <HAL_RCC_OscConfig+0x470>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1f0      	bne.n	8003854 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69da      	ldr	r2, [r3, #28]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003880:	019b      	lsls	r3, r3, #6
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003888:	085b      	lsrs	r3, r3, #1
 800388a:	3b01      	subs	r3, #1
 800388c:	041b      	lsls	r3, r3, #16
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003894:	061b      	lsls	r3, r3, #24
 8003896:	491b      	ldr	r1, [pc, #108]	@ (8003904 <HAL_RCC_OscConfig+0x470>)
 8003898:	4313      	orrs	r3, r2
 800389a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800389c:	4b1b      	ldr	r3, [pc, #108]	@ (800390c <HAL_RCC_OscConfig+0x478>)
 800389e:	2201      	movs	r2, #1
 80038a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a2:	f7ff f85d 	bl	8002960 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038aa:	f7ff f859 	bl	8002960 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e05c      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038bc:	4b11      	ldr	r3, [pc, #68]	@ (8003904 <HAL_RCC_OscConfig+0x470>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0f0      	beq.n	80038aa <HAL_RCC_OscConfig+0x416>
 80038c8:	e054      	b.n	8003974 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ca:	4b10      	ldr	r3, [pc, #64]	@ (800390c <HAL_RCC_OscConfig+0x478>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d0:	f7ff f846 	bl	8002960 <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d8:	f7ff f842 	bl	8002960 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e045      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ea:	4b06      	ldr	r3, [pc, #24]	@ (8003904 <HAL_RCC_OscConfig+0x470>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f0      	bne.n	80038d8 <HAL_RCC_OscConfig+0x444>
 80038f6:	e03d      	b.n	8003974 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d107      	bne.n	8003910 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e038      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
 8003904:	40023800 	.word	0x40023800
 8003908:	40007000 	.word	0x40007000
 800390c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003910:	4b1b      	ldr	r3, [pc, #108]	@ (8003980 <HAL_RCC_OscConfig+0x4ec>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d028      	beq.n	8003970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003928:	429a      	cmp	r2, r3
 800392a:	d121      	bne.n	8003970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003936:	429a      	cmp	r2, r3
 8003938:	d11a      	bne.n	8003970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003940:	4013      	ands	r3, r2
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003946:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003948:	4293      	cmp	r3, r2
 800394a:	d111      	bne.n	8003970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003956:	085b      	lsrs	r3, r3, #1
 8003958:	3b01      	subs	r3, #1
 800395a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800395c:	429a      	cmp	r2, r3
 800395e:	d107      	bne.n	8003970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800396a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800396c:	429a      	cmp	r2, r3
 800396e:	d001      	beq.n	8003974 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e000      	b.n	8003976 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40023800 	.word	0x40023800

08003984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e0cc      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003998:	4b68      	ldr	r3, [pc, #416]	@ (8003b3c <HAL_RCC_ClockConfig+0x1b8>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d90c      	bls.n	80039c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a6:	4b65      	ldr	r3, [pc, #404]	@ (8003b3c <HAL_RCC_ClockConfig+0x1b8>)
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ae:	4b63      	ldr	r3, [pc, #396]	@ (8003b3c <HAL_RCC_ClockConfig+0x1b8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d001      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e0b8      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d020      	beq.n	8003a0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039d8:	4b59      	ldr	r3, [pc, #356]	@ (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	4a58      	ldr	r2, [pc, #352]	@ (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d005      	beq.n	80039fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039f0:	4b53      	ldr	r3, [pc, #332]	@ (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	4a52      	ldr	r2, [pc, #328]	@ (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80039fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039fc:	4b50      	ldr	r3, [pc, #320]	@ (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	494d      	ldr	r1, [pc, #308]	@ (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d044      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d107      	bne.n	8003a32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a22:	4b47      	ldr	r3, [pc, #284]	@ (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d119      	bne.n	8003a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e07f      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d003      	beq.n	8003a42 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a3e:	2b03      	cmp	r3, #3
 8003a40:	d107      	bne.n	8003a52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a42:	4b3f      	ldr	r3, [pc, #252]	@ (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d109      	bne.n	8003a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e06f      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a52:	4b3b      	ldr	r3, [pc, #236]	@ (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e067      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a62:	4b37      	ldr	r3, [pc, #220]	@ (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f023 0203 	bic.w	r2, r3, #3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	4934      	ldr	r1, [pc, #208]	@ (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a74:	f7fe ff74 	bl	8002960 <HAL_GetTick>
 8003a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7a:	e00a      	b.n	8003a92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a7c:	f7fe ff70 	bl	8002960 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e04f      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a92:	4b2b      	ldr	r3, [pc, #172]	@ (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 020c 	and.w	r2, r3, #12
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d1eb      	bne.n	8003a7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003aa4:	4b25      	ldr	r3, [pc, #148]	@ (8003b3c <HAL_RCC_ClockConfig+0x1b8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d20c      	bcs.n	8003acc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ab2:	4b22      	ldr	r3, [pc, #136]	@ (8003b3c <HAL_RCC_ClockConfig+0x1b8>)
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aba:	4b20      	ldr	r3, [pc, #128]	@ (8003b3c <HAL_RCC_ClockConfig+0x1b8>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d001      	beq.n	8003acc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e032      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ad8:	4b19      	ldr	r3, [pc, #100]	@ (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	4916      	ldr	r1, [pc, #88]	@ (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d009      	beq.n	8003b0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003af6:	4b12      	ldr	r3, [pc, #72]	@ (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	490e      	ldr	r1, [pc, #56]	@ (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b0a:	f000 f821 	bl	8003b50 <HAL_RCC_GetSysClockFreq>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	4b0b      	ldr	r3, [pc, #44]	@ (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	091b      	lsrs	r3, r3, #4
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	490a      	ldr	r1, [pc, #40]	@ (8003b44 <HAL_RCC_ClockConfig+0x1c0>)
 8003b1c:	5ccb      	ldrb	r3, [r1, r3]
 8003b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b22:	4a09      	ldr	r2, [pc, #36]	@ (8003b48 <HAL_RCC_ClockConfig+0x1c4>)
 8003b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b26:	4b09      	ldr	r3, [pc, #36]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fe fbfc 	bl	8002328 <HAL_InitTick>

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40023c00 	.word	0x40023c00
 8003b40:	40023800 	.word	0x40023800
 8003b44:	0800c108 	.word	0x0800c108
 8003b48:	20000008 	.word	0x20000008
 8003b4c:	2000000c 	.word	0x2000000c

08003b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b54:	b090      	sub	sp, #64	@ 0x40
 8003b56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b68:	4b59      	ldr	r3, [pc, #356]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 030c 	and.w	r3, r3, #12
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d00d      	beq.n	8003b90 <HAL_RCC_GetSysClockFreq+0x40>
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	f200 80a1 	bhi.w	8003cbc <HAL_RCC_GetSysClockFreq+0x16c>
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d002      	beq.n	8003b84 <HAL_RCC_GetSysClockFreq+0x34>
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d003      	beq.n	8003b8a <HAL_RCC_GetSysClockFreq+0x3a>
 8003b82:	e09b      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b84:	4b53      	ldr	r3, [pc, #332]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b86:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b88:	e09b      	b.n	8003cc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b8a:	4b53      	ldr	r3, [pc, #332]	@ (8003cd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b8e:	e098      	b.n	8003cc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b90:	4b4f      	ldr	r3, [pc, #316]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b98:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b9a:	4b4d      	ldr	r3, [pc, #308]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d028      	beq.n	8003bf8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ba6:	4b4a      	ldr	r3, [pc, #296]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	099b      	lsrs	r3, r3, #6
 8003bac:	2200      	movs	r2, #0
 8003bae:	623b      	str	r3, [r7, #32]
 8003bb0:	627a      	str	r2, [r7, #36]	@ 0x24
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
 8003bb4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003bb8:	2100      	movs	r1, #0
 8003bba:	4b47      	ldr	r3, [pc, #284]	@ (8003cd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bbc:	fb03 f201 	mul.w	r2, r3, r1
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	fb00 f303 	mul.w	r3, r0, r3
 8003bc6:	4413      	add	r3, r2
 8003bc8:	4a43      	ldr	r2, [pc, #268]	@ (8003cd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bca:	fba0 1202 	umull	r1, r2, r0, r2
 8003bce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bd0:	460a      	mov	r2, r1
 8003bd2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003bd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bd6:	4413      	add	r3, r2
 8003bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bdc:	2200      	movs	r2, #0
 8003bde:	61bb      	str	r3, [r7, #24]
 8003be0:	61fa      	str	r2, [r7, #28]
 8003be2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003be6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003bea:	f7fd f835 	bl	8000c58 <__aeabi_uldivmod>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bf6:	e053      	b.n	8003ca0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bf8:	4b35      	ldr	r3, [pc, #212]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	099b      	lsrs	r3, r3, #6
 8003bfe:	2200      	movs	r2, #0
 8003c00:	613b      	str	r3, [r7, #16]
 8003c02:	617a      	str	r2, [r7, #20]
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c0a:	f04f 0b00 	mov.w	fp, #0
 8003c0e:	4652      	mov	r2, sl
 8003c10:	465b      	mov	r3, fp
 8003c12:	f04f 0000 	mov.w	r0, #0
 8003c16:	f04f 0100 	mov.w	r1, #0
 8003c1a:	0159      	lsls	r1, r3, #5
 8003c1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c20:	0150      	lsls	r0, r2, #5
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	ebb2 080a 	subs.w	r8, r2, sl
 8003c2a:	eb63 090b 	sbc.w	r9, r3, fp
 8003c2e:	f04f 0200 	mov.w	r2, #0
 8003c32:	f04f 0300 	mov.w	r3, #0
 8003c36:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c3a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c3e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c42:	ebb2 0408 	subs.w	r4, r2, r8
 8003c46:	eb63 0509 	sbc.w	r5, r3, r9
 8003c4a:	f04f 0200 	mov.w	r2, #0
 8003c4e:	f04f 0300 	mov.w	r3, #0
 8003c52:	00eb      	lsls	r3, r5, #3
 8003c54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c58:	00e2      	lsls	r2, r4, #3
 8003c5a:	4614      	mov	r4, r2
 8003c5c:	461d      	mov	r5, r3
 8003c5e:	eb14 030a 	adds.w	r3, r4, sl
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	eb45 030b 	adc.w	r3, r5, fp
 8003c68:	607b      	str	r3, [r7, #4]
 8003c6a:	f04f 0200 	mov.w	r2, #0
 8003c6e:	f04f 0300 	mov.w	r3, #0
 8003c72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c76:	4629      	mov	r1, r5
 8003c78:	028b      	lsls	r3, r1, #10
 8003c7a:	4621      	mov	r1, r4
 8003c7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c80:	4621      	mov	r1, r4
 8003c82:	028a      	lsls	r2, r1, #10
 8003c84:	4610      	mov	r0, r2
 8003c86:	4619      	mov	r1, r3
 8003c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	60bb      	str	r3, [r7, #8]
 8003c8e:	60fa      	str	r2, [r7, #12]
 8003c90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c94:	f7fc ffe0 	bl	8000c58 <__aeabi_uldivmod>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	0c1b      	lsrs	r3, r3, #16
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	3301      	adds	r3, #1
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003cb0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003cba:	e002      	b.n	8003cc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cbc:	4b05      	ldr	r3, [pc, #20]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003cc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3740      	adds	r7, #64	@ 0x40
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cce:	bf00      	nop
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	00f42400 	.word	0x00f42400
 8003cd8:	017d7840 	.word	0x017d7840

08003cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ce0:	4b03      	ldr	r3, [pc, #12]	@ (8003cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	20000008 	.word	0x20000008

08003cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cf8:	f7ff fff0 	bl	8003cdc <HAL_RCC_GetHCLKFreq>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	4b05      	ldr	r3, [pc, #20]	@ (8003d14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	0a9b      	lsrs	r3, r3, #10
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	4903      	ldr	r1, [pc, #12]	@ (8003d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d0a:	5ccb      	ldrb	r3, [r1, r3]
 8003d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40023800 	.word	0x40023800
 8003d18:	0800c118 	.word	0x0800c118

08003d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d20:	f7ff ffdc 	bl	8003cdc <HAL_RCC_GetHCLKFreq>
 8003d24:	4602      	mov	r2, r0
 8003d26:	4b05      	ldr	r3, [pc, #20]	@ (8003d3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	0b5b      	lsrs	r3, r3, #13
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	4903      	ldr	r1, [pc, #12]	@ (8003d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d32:	5ccb      	ldrb	r3, [r1, r3]
 8003d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	0800c118 	.word	0x0800c118

08003d44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	220f      	movs	r2, #15
 8003d52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d54:	4b12      	ldr	r3, [pc, #72]	@ (8003da0 <HAL_RCC_GetClockConfig+0x5c>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f003 0203 	and.w	r2, r3, #3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d60:	4b0f      	ldr	r3, [pc, #60]	@ (8003da0 <HAL_RCC_GetClockConfig+0x5c>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003da0 <HAL_RCC_GetClockConfig+0x5c>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003d78:	4b09      	ldr	r3, [pc, #36]	@ (8003da0 <HAL_RCC_GetClockConfig+0x5c>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	08db      	lsrs	r3, r3, #3
 8003d7e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d86:	4b07      	ldr	r3, [pc, #28]	@ (8003da4 <HAL_RCC_GetClockConfig+0x60>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0207 	and.w	r2, r3, #7
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	601a      	str	r2, [r3, #0]
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	40023800 	.word	0x40023800
 8003da4:	40023c00 	.word	0x40023c00

08003da8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e07b      	b.n	8003eb2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d108      	bne.n	8003dd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003dca:	d009      	beq.n	8003de0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	61da      	str	r2, [r3, #28]
 8003dd2:	e005      	b.n	8003de0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d106      	bne.n	8003e00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7fe f9ea 	bl	80021d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e64:	ea42 0103 	orr.w	r1, r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e6c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	0c1b      	lsrs	r3, r3, #16
 8003e7e:	f003 0104 	and.w	r1, r3, #4
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e86:	f003 0210 	and.w	r2, r3, #16
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	69da      	ldr	r2, [r3, #28]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ea0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b088      	sub	sp, #32
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	60f8      	str	r0, [r7, #12]
 8003ec2:	60b9      	str	r1, [r7, #8]
 8003ec4:	603b      	str	r3, [r7, #0]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003eca:	f7fe fd49 	bl	8002960 <HAL_GetTick>
 8003ece:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003ed0:	88fb      	ldrh	r3, [r7, #6]
 8003ed2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d001      	beq.n	8003ee4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e12a      	b.n	800413a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <HAL_SPI_Transmit+0x36>
 8003eea:	88fb      	ldrh	r3, [r7, #6]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e122      	b.n	800413a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d101      	bne.n	8003f02 <HAL_SPI_Transmit+0x48>
 8003efe:	2302      	movs	r3, #2
 8003f00:	e11b      	b.n	800413a <HAL_SPI_Transmit+0x280>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2203      	movs	r2, #3
 8003f0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	88fa      	ldrh	r2, [r7, #6]
 8003f22:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	88fa      	ldrh	r2, [r7, #6]
 8003f28:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f50:	d10f      	bne.n	8003f72 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f7c:	2b40      	cmp	r3, #64	@ 0x40
 8003f7e:	d007      	beq.n	8003f90 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f98:	d152      	bne.n	8004040 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <HAL_SPI_Transmit+0xee>
 8003fa2:	8b7b      	ldrh	r3, [r7, #26]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d145      	bne.n	8004034 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fac:	881a      	ldrh	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb8:	1c9a      	adds	r2, r3, #2
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003fcc:	e032      	b.n	8004034 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d112      	bne.n	8004002 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe0:	881a      	ldrh	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fec:	1c9a      	adds	r2, r3, #2
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004000:	e018      	b.n	8004034 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004002:	f7fe fcad 	bl	8002960 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	429a      	cmp	r2, r3
 8004010:	d803      	bhi.n	800401a <HAL_SPI_Transmit+0x160>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004018:	d102      	bne.n	8004020 <HAL_SPI_Transmit+0x166>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d109      	bne.n	8004034 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e082      	b.n	800413a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1c7      	bne.n	8003fce <HAL_SPI_Transmit+0x114>
 800403e:	e053      	b.n	80040e8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <HAL_SPI_Transmit+0x194>
 8004048:	8b7b      	ldrh	r3, [r7, #26]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d147      	bne.n	80040de <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	330c      	adds	r3, #12
 8004058:	7812      	ldrb	r2, [r2, #0]
 800405a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004060:	1c5a      	adds	r2, r3, #1
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004074:	e033      	b.n	80040de <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b02      	cmp	r3, #2
 8004082:	d113      	bne.n	80040ac <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	330c      	adds	r3, #12
 800408e:	7812      	ldrb	r2, [r2, #0]
 8004090:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80040aa:	e018      	b.n	80040de <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040ac:	f7fe fc58 	bl	8002960 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d803      	bhi.n	80040c4 <HAL_SPI_Transmit+0x20a>
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c2:	d102      	bne.n	80040ca <HAL_SPI_Transmit+0x210>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d109      	bne.n	80040de <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e02d      	b.n	800413a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1c6      	bne.n	8004076 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040e8:	69fa      	ldr	r2, [r7, #28]
 80040ea:	6839      	ldr	r1, [r7, #0]
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 fbe7 	bl	80048c0 <SPI_EndRxTxTransaction>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d002      	beq.n	80040fe <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2220      	movs	r2, #32
 80040fc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10a      	bne.n	800411c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	617b      	str	r3, [r7, #20]
 800411a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e000      	b.n	800413a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004138:	2300      	movs	r3, #0
  }
}
 800413a:	4618      	mov	r0, r3
 800413c:	3720      	adds	r7, #32
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b088      	sub	sp, #32
 8004146:	af02      	add	r7, sp, #8
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	60b9      	str	r1, [r7, #8]
 800414c:	603b      	str	r3, [r7, #0]
 800414e:	4613      	mov	r3, r2
 8004150:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b01      	cmp	r3, #1
 800415c:	d001      	beq.n	8004162 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800415e:	2302      	movs	r3, #2
 8004160:	e104      	b.n	800436c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800416a:	d112      	bne.n	8004192 <HAL_SPI_Receive+0x50>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10e      	bne.n	8004192 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2204      	movs	r2, #4
 8004178:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800417c:	88fa      	ldrh	r2, [r7, #6]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	4613      	mov	r3, r2
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	68b9      	ldr	r1, [r7, #8]
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 f8f3 	bl	8004374 <HAL_SPI_TransmitReceive>
 800418e:	4603      	mov	r3, r0
 8004190:	e0ec      	b.n	800436c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004192:	f7fe fbe5 	bl	8002960 <HAL_GetTick>
 8004196:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <HAL_SPI_Receive+0x62>
 800419e:	88fb      	ldrh	r3, [r7, #6]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e0e1      	b.n	800436c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d101      	bne.n	80041b6 <HAL_SPI_Receive+0x74>
 80041b2:	2302      	movs	r3, #2
 80041b4:	e0da      	b.n	800436c <HAL_SPI_Receive+0x22a>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2204      	movs	r2, #4
 80041c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	88fa      	ldrh	r2, [r7, #6]
 80041d6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	88fa      	ldrh	r2, [r7, #6]
 80041dc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004204:	d10f      	bne.n	8004226 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004214:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004224:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004230:	2b40      	cmp	r3, #64	@ 0x40
 8004232:	d007      	beq.n	8004244 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004242:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d170      	bne.n	800432e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800424c:	e035      	b.n	80042ba <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	2b01      	cmp	r3, #1
 800425a:	d115      	bne.n	8004288 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f103 020c 	add.w	r2, r3, #12
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004268:	7812      	ldrb	r2, [r2, #0]
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800427c:	b29b      	uxth	r3, r3
 800427e:	3b01      	subs	r3, #1
 8004280:	b29a      	uxth	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004286:	e018      	b.n	80042ba <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004288:	f7fe fb6a 	bl	8002960 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	429a      	cmp	r2, r3
 8004296:	d803      	bhi.n	80042a0 <HAL_SPI_Receive+0x15e>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429e:	d102      	bne.n	80042a6 <HAL_SPI_Receive+0x164>
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d109      	bne.n	80042ba <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e058      	b.n	800436c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042be:	b29b      	uxth	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1c4      	bne.n	800424e <HAL_SPI_Receive+0x10c>
 80042c4:	e038      	b.n	8004338 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d113      	bne.n	80042fc <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042de:	b292      	uxth	r2, r2
 80042e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e6:	1c9a      	adds	r2, r3, #2
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80042fa:	e018      	b.n	800432e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042fc:	f7fe fb30 	bl	8002960 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	429a      	cmp	r2, r3
 800430a:	d803      	bhi.n	8004314 <HAL_SPI_Receive+0x1d2>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004312:	d102      	bne.n	800431a <HAL_SPI_Receive+0x1d8>
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d109      	bne.n	800432e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e01e      	b.n	800436c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004332:	b29b      	uxth	r3, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1c6      	bne.n	80042c6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	6839      	ldr	r1, [r7, #0]
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 fa59 	bl	80047f4 <SPI_EndRxTransaction>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2220      	movs	r2, #32
 800434c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e000      	b.n	800436c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800436a:	2300      	movs	r3, #0
  }
}
 800436c:	4618      	mov	r0, r3
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b08a      	sub	sp, #40	@ 0x28
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
 8004380:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004382:	2301      	movs	r3, #1
 8004384:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004386:	f7fe faeb 	bl	8002960 <HAL_GetTick>
 800438a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004392:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800439a:	887b      	ldrh	r3, [r7, #2]
 800439c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800439e:	7ffb      	ldrb	r3, [r7, #31]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d00c      	beq.n	80043be <HAL_SPI_TransmitReceive+0x4a>
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043aa:	d106      	bne.n	80043ba <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d102      	bne.n	80043ba <HAL_SPI_TransmitReceive+0x46>
 80043b4:	7ffb      	ldrb	r3, [r7, #31]
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d001      	beq.n	80043be <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80043ba:	2302      	movs	r3, #2
 80043bc:	e17f      	b.n	80046be <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d005      	beq.n	80043d0 <HAL_SPI_TransmitReceive+0x5c>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d002      	beq.n	80043d0 <HAL_SPI_TransmitReceive+0x5c>
 80043ca:	887b      	ldrh	r3, [r7, #2]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e174      	b.n	80046be <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <HAL_SPI_TransmitReceive+0x6e>
 80043de:	2302      	movs	r3, #2
 80043e0:	e16d      	b.n	80046be <HAL_SPI_TransmitReceive+0x34a>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d003      	beq.n	80043fe <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2205      	movs	r2, #5
 80043fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	887a      	ldrh	r2, [r7, #2]
 800440e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	887a      	ldrh	r2, [r7, #2]
 8004414:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	887a      	ldrh	r2, [r7, #2]
 8004420:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	887a      	ldrh	r2, [r7, #2]
 8004426:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800443e:	2b40      	cmp	r3, #64	@ 0x40
 8004440:	d007      	beq.n	8004452 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004450:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800445a:	d17e      	bne.n	800455a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <HAL_SPI_TransmitReceive+0xf6>
 8004464:	8afb      	ldrh	r3, [r7, #22]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d16c      	bne.n	8004544 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446e:	881a      	ldrh	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447a:	1c9a      	adds	r2, r3, #2
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004484:	b29b      	uxth	r3, r3
 8004486:	3b01      	subs	r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800448e:	e059      	b.n	8004544 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b02      	cmp	r3, #2
 800449c:	d11b      	bne.n	80044d6 <HAL_SPI_TransmitReceive+0x162>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d016      	beq.n	80044d6 <HAL_SPI_TransmitReceive+0x162>
 80044a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d113      	bne.n	80044d6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b2:	881a      	ldrh	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044be:	1c9a      	adds	r2, r3, #2
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	3b01      	subs	r3, #1
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d119      	bne.n	8004518 <HAL_SPI_TransmitReceive+0x1a4>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d014      	beq.n	8004518 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68da      	ldr	r2, [r3, #12]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f8:	b292      	uxth	r2, r2
 80044fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004500:	1c9a      	adds	r2, r3, #2
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004514:	2301      	movs	r3, #1
 8004516:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004518:	f7fe fa22 	bl	8002960 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004524:	429a      	cmp	r2, r3
 8004526:	d80d      	bhi.n	8004544 <HAL_SPI_TransmitReceive+0x1d0>
 8004528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452e:	d009      	beq.n	8004544 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e0bc      	b.n	80046be <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004548:	b29b      	uxth	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1a0      	bne.n	8004490 <HAL_SPI_TransmitReceive+0x11c>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004552:	b29b      	uxth	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	d19b      	bne.n	8004490 <HAL_SPI_TransmitReceive+0x11c>
 8004558:	e082      	b.n	8004660 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <HAL_SPI_TransmitReceive+0x1f4>
 8004562:	8afb      	ldrh	r3, [r7, #22]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d171      	bne.n	800464c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	330c      	adds	r3, #12
 8004572:	7812      	ldrb	r2, [r2, #0]
 8004574:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004584:	b29b      	uxth	r3, r3
 8004586:	3b01      	subs	r3, #1
 8004588:	b29a      	uxth	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800458e:	e05d      	b.n	800464c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b02      	cmp	r3, #2
 800459c:	d11c      	bne.n	80045d8 <HAL_SPI_TransmitReceive+0x264>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d017      	beq.n	80045d8 <HAL_SPI_TransmitReceive+0x264>
 80045a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d114      	bne.n	80045d8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	330c      	adds	r3, #12
 80045b8:	7812      	ldrb	r2, [r2, #0]
 80045ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d119      	bne.n	800461a <HAL_SPI_TransmitReceive+0x2a6>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d014      	beq.n	800461a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800460c:	b29b      	uxth	r3, r3
 800460e:	3b01      	subs	r3, #1
 8004610:	b29a      	uxth	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004616:	2301      	movs	r3, #1
 8004618:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800461a:	f7fe f9a1 	bl	8002960 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004626:	429a      	cmp	r2, r3
 8004628:	d803      	bhi.n	8004632 <HAL_SPI_TransmitReceive+0x2be>
 800462a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800462c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004630:	d102      	bne.n	8004638 <HAL_SPI_TransmitReceive+0x2c4>
 8004632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004634:	2b00      	cmp	r3, #0
 8004636:	d109      	bne.n	800464c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e038      	b.n	80046be <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004650:	b29b      	uxth	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d19c      	bne.n	8004590 <HAL_SPI_TransmitReceive+0x21c>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800465a:	b29b      	uxth	r3, r3
 800465c:	2b00      	cmp	r3, #0
 800465e:	d197      	bne.n	8004590 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004660:	6a3a      	ldr	r2, [r7, #32]
 8004662:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 f92b 	bl	80048c0 <SPI_EndRxTxTransaction>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d008      	beq.n	8004682 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2220      	movs	r2, #32
 8004674:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e01d      	b.n	80046be <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10a      	bne.n	80046a0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800468a:	2300      	movs	r3, #0
 800468c:	613b      	str	r3, [r7, #16]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	613b      	str	r3, [r7, #16]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	613b      	str	r3, [r7, #16]
 800469e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e000      	b.n	80046be <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80046bc:	2300      	movs	r3, #0
  }
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3728      	adds	r7, #40	@ 0x28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b083      	sub	sp, #12
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046d4:	b2db      	uxtb	r3, r3
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
	...

080046e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b088      	sub	sp, #32
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	603b      	str	r3, [r7, #0]
 80046f0:	4613      	mov	r3, r2
 80046f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046f4:	f7fe f934 	bl	8002960 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046fc:	1a9b      	subs	r3, r3, r2
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	4413      	add	r3, r2
 8004702:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004704:	f7fe f92c 	bl	8002960 <HAL_GetTick>
 8004708:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800470a:	4b39      	ldr	r3, [pc, #228]	@ (80047f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	015b      	lsls	r3, r3, #5
 8004710:	0d1b      	lsrs	r3, r3, #20
 8004712:	69fa      	ldr	r2, [r7, #28]
 8004714:	fb02 f303 	mul.w	r3, r2, r3
 8004718:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800471a:	e054      	b.n	80047c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004722:	d050      	beq.n	80047c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004724:	f7fe f91c 	bl	8002960 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	69fa      	ldr	r2, [r7, #28]
 8004730:	429a      	cmp	r2, r3
 8004732:	d902      	bls.n	800473a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d13d      	bne.n	80047b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004748:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004752:	d111      	bne.n	8004778 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800475c:	d004      	beq.n	8004768 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004766:	d107      	bne.n	8004778 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004776:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004780:	d10f      	bne.n	80047a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e017      	b.n	80047e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	4013      	ands	r3, r2
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	bf0c      	ite	eq
 80047d6:	2301      	moveq	r3, #1
 80047d8:	2300      	movne	r3, #0
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	461a      	mov	r2, r3
 80047de:	79fb      	ldrb	r3, [r7, #7]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d19b      	bne.n	800471c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3720      	adds	r7, #32
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	20000008 	.word	0x20000008

080047f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af02      	add	r7, sp, #8
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004808:	d111      	bne.n	800482e <SPI_EndRxTransaction+0x3a>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004812:	d004      	beq.n	800481e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800481c:	d107      	bne.n	800482e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800482c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004836:	d12a      	bne.n	800488e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004840:	d012      	beq.n	8004868 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2200      	movs	r2, #0
 800484a:	2180      	movs	r1, #128	@ 0x80
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f7ff ff49 	bl	80046e4 <SPI_WaitFlagStateUntilTimeout>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d02d      	beq.n	80048b4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800485c:	f043 0220 	orr.w	r2, r3, #32
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e026      	b.n	80048b6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	2200      	movs	r2, #0
 8004870:	2101      	movs	r1, #1
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f7ff ff36 	bl	80046e4 <SPI_WaitFlagStateUntilTimeout>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d01a      	beq.n	80048b4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004882:	f043 0220 	orr.w	r2, r3, #32
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e013      	b.n	80048b6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2200      	movs	r2, #0
 8004896:	2101      	movs	r1, #1
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f7ff ff23 	bl	80046e4 <SPI_WaitFlagStateUntilTimeout>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d007      	beq.n	80048b4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048a8:	f043 0220 	orr.w	r2, r3, #32
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e000      	b.n	80048b6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
	...

080048c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b088      	sub	sp, #32
 80048c4:	af02      	add	r7, sp, #8
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	2201      	movs	r2, #1
 80048d4:	2102      	movs	r1, #2
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f7ff ff04 	bl	80046e4 <SPI_WaitFlagStateUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d007      	beq.n	80048f2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e6:	f043 0220 	orr.w	r2, r3, #32
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e032      	b.n	8004958 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80048f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004960 <SPI_EndRxTxTransaction+0xa0>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a1b      	ldr	r2, [pc, #108]	@ (8004964 <SPI_EndRxTxTransaction+0xa4>)
 80048f8:	fba2 2303 	umull	r2, r3, r2, r3
 80048fc:	0d5b      	lsrs	r3, r3, #21
 80048fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004902:	fb02 f303 	mul.w	r3, r2, r3
 8004906:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004910:	d112      	bne.n	8004938 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2200      	movs	r2, #0
 800491a:	2180      	movs	r1, #128	@ 0x80
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f7ff fee1 	bl	80046e4 <SPI_WaitFlagStateUntilTimeout>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d016      	beq.n	8004956 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800492c:	f043 0220 	orr.w	r2, r3, #32
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e00f      	b.n	8004958 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00a      	beq.n	8004954 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	3b01      	subs	r3, #1
 8004942:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800494e:	2b80      	cmp	r3, #128	@ 0x80
 8004950:	d0f2      	beq.n	8004938 <SPI_EndRxTxTransaction+0x78>
 8004952:	e000      	b.n	8004956 <SPI_EndRxTxTransaction+0x96>
        break;
 8004954:	bf00      	nop
  }

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3718      	adds	r7, #24
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	20000008 	.word	0x20000008
 8004964:	165e9f81 	.word	0x165e9f81

08004968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e041      	b.n	80049fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d106      	bne.n	8004994 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7fd fe8c 	bl	80026ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	3304      	adds	r3, #4
 80049a4:	4619      	mov	r1, r3
 80049a6:	4610      	mov	r0, r2
 80049a8:	f000 fa70 	bl	8004e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
	...

08004a08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d001      	beq.n	8004a20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e044      	b.n	8004aaa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0201 	orr.w	r2, r2, #1
 8004a36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a1e      	ldr	r2, [pc, #120]	@ (8004ab8 <HAL_TIM_Base_Start_IT+0xb0>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d018      	beq.n	8004a74 <HAL_TIM_Base_Start_IT+0x6c>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a4a:	d013      	beq.n	8004a74 <HAL_TIM_Base_Start_IT+0x6c>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a1a      	ldr	r2, [pc, #104]	@ (8004abc <HAL_TIM_Base_Start_IT+0xb4>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d00e      	beq.n	8004a74 <HAL_TIM_Base_Start_IT+0x6c>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a19      	ldr	r2, [pc, #100]	@ (8004ac0 <HAL_TIM_Base_Start_IT+0xb8>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d009      	beq.n	8004a74 <HAL_TIM_Base_Start_IT+0x6c>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a17      	ldr	r2, [pc, #92]	@ (8004ac4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d004      	beq.n	8004a74 <HAL_TIM_Base_Start_IT+0x6c>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a16      	ldr	r2, [pc, #88]	@ (8004ac8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d111      	bne.n	8004a98 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f003 0307 	and.w	r3, r3, #7
 8004a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2b06      	cmp	r3, #6
 8004a84:	d010      	beq.n	8004aa8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0201 	orr.w	r2, r2, #1
 8004a94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a96:	e007      	b.n	8004aa8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0201 	orr.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	40010000 	.word	0x40010000
 8004abc:	40000400 	.word	0x40000400
 8004ac0:	40000800 	.word	0x40000800
 8004ac4:	40000c00 	.word	0x40000c00
 8004ac8:	40014000 	.word	0x40014000

08004acc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d020      	beq.n	8004b30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d01b      	beq.n	8004b30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f06f 0202 	mvn.w	r2, #2
 8004b00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f999 	bl	8004e4e <HAL_TIM_IC_CaptureCallback>
 8004b1c:	e005      	b.n	8004b2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f98b 	bl	8004e3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f99c 	bl	8004e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	f003 0304 	and.w	r3, r3, #4
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d020      	beq.n	8004b7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f003 0304 	and.w	r3, r3, #4
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d01b      	beq.n	8004b7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0204 	mvn.w	r2, #4
 8004b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2202      	movs	r2, #2
 8004b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f973 	bl	8004e4e <HAL_TIM_IC_CaptureCallback>
 8004b68:	e005      	b.n	8004b76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f965 	bl	8004e3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f976 	bl	8004e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d020      	beq.n	8004bc8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f003 0308 	and.w	r3, r3, #8
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d01b      	beq.n	8004bc8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f06f 0208 	mvn.w	r2, #8
 8004b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2204      	movs	r2, #4
 8004b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f94d 	bl	8004e4e <HAL_TIM_IC_CaptureCallback>
 8004bb4:	e005      	b.n	8004bc2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f93f 	bl	8004e3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f950 	bl	8004e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f003 0310 	and.w	r3, r3, #16
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d020      	beq.n	8004c14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f003 0310 	and.w	r3, r3, #16
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d01b      	beq.n	8004c14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f06f 0210 	mvn.w	r2, #16
 8004be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2208      	movs	r2, #8
 8004bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f927 	bl	8004e4e <HAL_TIM_IC_CaptureCallback>
 8004c00:	e005      	b.n	8004c0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f919 	bl	8004e3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f92a 	bl	8004e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00c      	beq.n	8004c38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d007      	beq.n	8004c38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f06f 0201 	mvn.w	r2, #1
 8004c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7fd f8cc 	bl	8001dd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00c      	beq.n	8004c5c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d007      	beq.n	8004c5c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 fab6 	bl	80051c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00c      	beq.n	8004c80 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d007      	beq.n	8004c80 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f8fb 	bl	8004e76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f003 0320 	and.w	r3, r3, #32
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00c      	beq.n	8004ca4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f003 0320 	and.w	r3, r3, #32
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d007      	beq.n	8004ca4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0220 	mvn.w	r2, #32
 8004c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fa88 	bl	80051b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ca4:	bf00      	nop
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_TIM_ConfigClockSource+0x1c>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e0b4      	b.n	8004e32 <HAL_TIM_ConfigClockSource+0x186>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004ce6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d00:	d03e      	beq.n	8004d80 <HAL_TIM_ConfigClockSource+0xd4>
 8004d02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d06:	f200 8087 	bhi.w	8004e18 <HAL_TIM_ConfigClockSource+0x16c>
 8004d0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d0e:	f000 8086 	beq.w	8004e1e <HAL_TIM_ConfigClockSource+0x172>
 8004d12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d16:	d87f      	bhi.n	8004e18 <HAL_TIM_ConfigClockSource+0x16c>
 8004d18:	2b70      	cmp	r3, #112	@ 0x70
 8004d1a:	d01a      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0xa6>
 8004d1c:	2b70      	cmp	r3, #112	@ 0x70
 8004d1e:	d87b      	bhi.n	8004e18 <HAL_TIM_ConfigClockSource+0x16c>
 8004d20:	2b60      	cmp	r3, #96	@ 0x60
 8004d22:	d050      	beq.n	8004dc6 <HAL_TIM_ConfigClockSource+0x11a>
 8004d24:	2b60      	cmp	r3, #96	@ 0x60
 8004d26:	d877      	bhi.n	8004e18 <HAL_TIM_ConfigClockSource+0x16c>
 8004d28:	2b50      	cmp	r3, #80	@ 0x50
 8004d2a:	d03c      	beq.n	8004da6 <HAL_TIM_ConfigClockSource+0xfa>
 8004d2c:	2b50      	cmp	r3, #80	@ 0x50
 8004d2e:	d873      	bhi.n	8004e18 <HAL_TIM_ConfigClockSource+0x16c>
 8004d30:	2b40      	cmp	r3, #64	@ 0x40
 8004d32:	d058      	beq.n	8004de6 <HAL_TIM_ConfigClockSource+0x13a>
 8004d34:	2b40      	cmp	r3, #64	@ 0x40
 8004d36:	d86f      	bhi.n	8004e18 <HAL_TIM_ConfigClockSource+0x16c>
 8004d38:	2b30      	cmp	r3, #48	@ 0x30
 8004d3a:	d064      	beq.n	8004e06 <HAL_TIM_ConfigClockSource+0x15a>
 8004d3c:	2b30      	cmp	r3, #48	@ 0x30
 8004d3e:	d86b      	bhi.n	8004e18 <HAL_TIM_ConfigClockSource+0x16c>
 8004d40:	2b20      	cmp	r3, #32
 8004d42:	d060      	beq.n	8004e06 <HAL_TIM_ConfigClockSource+0x15a>
 8004d44:	2b20      	cmp	r3, #32
 8004d46:	d867      	bhi.n	8004e18 <HAL_TIM_ConfigClockSource+0x16c>
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d05c      	beq.n	8004e06 <HAL_TIM_ConfigClockSource+0x15a>
 8004d4c:	2b10      	cmp	r3, #16
 8004d4e:	d05a      	beq.n	8004e06 <HAL_TIM_ConfigClockSource+0x15a>
 8004d50:	e062      	b.n	8004e18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d62:	f000 f999 	bl	8005098 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	609a      	str	r2, [r3, #8]
      break;
 8004d7e:	e04f      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d90:	f000 f982 	bl	8005098 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689a      	ldr	r2, [r3, #8]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004da2:	609a      	str	r2, [r3, #8]
      break;
 8004da4:	e03c      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004db2:	461a      	mov	r2, r3
 8004db4:	f000 f8f6 	bl	8004fa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2150      	movs	r1, #80	@ 0x50
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 f94f 	bl	8005062 <TIM_ITRx_SetConfig>
      break;
 8004dc4:	e02c      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	f000 f915 	bl	8005002 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2160      	movs	r1, #96	@ 0x60
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 f93f 	bl	8005062 <TIM_ITRx_SetConfig>
      break;
 8004de4:	e01c      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004df2:	461a      	mov	r2, r3
 8004df4:	f000 f8d6 	bl	8004fa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2140      	movs	r1, #64	@ 0x40
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 f92f 	bl	8005062 <TIM_ITRx_SetConfig>
      break;
 8004e04:	e00c      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4619      	mov	r1, r3
 8004e10:	4610      	mov	r0, r2
 8004e12:	f000 f926 	bl	8005062 <TIM_ITRx_SetConfig>
      break;
 8004e16:	e003      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e1c:	e000      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b083      	sub	sp, #12
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b083      	sub	sp, #12
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e6a:	bf00      	nop
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b083      	sub	sp, #12
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e7e:	bf00      	nop
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
	...

08004e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a3a      	ldr	r2, [pc, #232]	@ (8004f88 <TIM_Base_SetConfig+0xfc>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d00f      	beq.n	8004ec4 <TIM_Base_SetConfig+0x38>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eaa:	d00b      	beq.n	8004ec4 <TIM_Base_SetConfig+0x38>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a37      	ldr	r2, [pc, #220]	@ (8004f8c <TIM_Base_SetConfig+0x100>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d007      	beq.n	8004ec4 <TIM_Base_SetConfig+0x38>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a36      	ldr	r2, [pc, #216]	@ (8004f90 <TIM_Base_SetConfig+0x104>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d003      	beq.n	8004ec4 <TIM_Base_SetConfig+0x38>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a35      	ldr	r2, [pc, #212]	@ (8004f94 <TIM_Base_SetConfig+0x108>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d108      	bne.n	8004ed6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a2b      	ldr	r2, [pc, #172]	@ (8004f88 <TIM_Base_SetConfig+0xfc>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d01b      	beq.n	8004f16 <TIM_Base_SetConfig+0x8a>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ee4:	d017      	beq.n	8004f16 <TIM_Base_SetConfig+0x8a>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a28      	ldr	r2, [pc, #160]	@ (8004f8c <TIM_Base_SetConfig+0x100>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d013      	beq.n	8004f16 <TIM_Base_SetConfig+0x8a>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a27      	ldr	r2, [pc, #156]	@ (8004f90 <TIM_Base_SetConfig+0x104>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d00f      	beq.n	8004f16 <TIM_Base_SetConfig+0x8a>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a26      	ldr	r2, [pc, #152]	@ (8004f94 <TIM_Base_SetConfig+0x108>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d00b      	beq.n	8004f16 <TIM_Base_SetConfig+0x8a>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a25      	ldr	r2, [pc, #148]	@ (8004f98 <TIM_Base_SetConfig+0x10c>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d007      	beq.n	8004f16 <TIM_Base_SetConfig+0x8a>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a24      	ldr	r2, [pc, #144]	@ (8004f9c <TIM_Base_SetConfig+0x110>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d003      	beq.n	8004f16 <TIM_Base_SetConfig+0x8a>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a23      	ldr	r2, [pc, #140]	@ (8004fa0 <TIM_Base_SetConfig+0x114>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d108      	bne.n	8004f28 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	689a      	ldr	r2, [r3, #8]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a0e      	ldr	r2, [pc, #56]	@ (8004f88 <TIM_Base_SetConfig+0xfc>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d103      	bne.n	8004f5c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	691a      	ldr	r2, [r3, #16]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d105      	bne.n	8004f7a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	f023 0201 	bic.w	r2, r3, #1
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	611a      	str	r2, [r3, #16]
  }
}
 8004f7a:	bf00      	nop
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	40010000 	.word	0x40010000
 8004f8c:	40000400 	.word	0x40000400
 8004f90:	40000800 	.word	0x40000800
 8004f94:	40000c00 	.word	0x40000c00
 8004f98:	40014000 	.word	0x40014000
 8004f9c:	40014400 	.word	0x40014400
 8004fa0:	40014800 	.word	0x40014800

08004fa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	f023 0201 	bic.w	r2, r3, #1
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f023 030a 	bic.w	r3, r3, #10
 8004fe0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	621a      	str	r2, [r3, #32]
}
 8004ff6:	bf00      	nop
 8004ff8:	371c      	adds	r7, #28
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005002:	b480      	push	{r7}
 8005004:	b087      	sub	sp, #28
 8005006:	af00      	add	r7, sp, #0
 8005008:	60f8      	str	r0, [r7, #12]
 800500a:	60b9      	str	r1, [r7, #8]
 800500c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	f023 0210 	bic.w	r2, r3, #16
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800502c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	031b      	lsls	r3, r3, #12
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	4313      	orrs	r3, r2
 8005036:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800503e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	4313      	orrs	r3, r2
 8005048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	621a      	str	r2, [r3, #32]
}
 8005056:	bf00      	nop
 8005058:	371c      	adds	r7, #28
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005062:	b480      	push	{r7}
 8005064:	b085      	sub	sp, #20
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
 800506a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005078:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4313      	orrs	r3, r2
 8005080:	f043 0307 	orr.w	r3, r3, #7
 8005084:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	609a      	str	r2, [r3, #8]
}
 800508c:	bf00      	nop
 800508e:	3714      	adds	r7, #20
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005098:	b480      	push	{r7}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
 80050a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	021a      	lsls	r2, r3, #8
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	431a      	orrs	r2, r3
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	4313      	orrs	r3, r2
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	609a      	str	r2, [r3, #8]
}
 80050cc:	bf00      	nop
 80050ce:	371c      	adds	r7, #28
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d101      	bne.n	80050f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050ec:	2302      	movs	r3, #2
 80050ee:	e050      	b.n	8005192 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005116:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	4313      	orrs	r3, r2
 8005120:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a1c      	ldr	r2, [pc, #112]	@ (80051a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d018      	beq.n	8005166 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800513c:	d013      	beq.n	8005166 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a18      	ldr	r2, [pc, #96]	@ (80051a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d00e      	beq.n	8005166 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a16      	ldr	r2, [pc, #88]	@ (80051a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d009      	beq.n	8005166 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a15      	ldr	r2, [pc, #84]	@ (80051ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d004      	beq.n	8005166 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a13      	ldr	r2, [pc, #76]	@ (80051b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d10c      	bne.n	8005180 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800516c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	4313      	orrs	r3, r2
 8005176:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	40010000 	.word	0x40010000
 80051a4:	40000400 	.word	0x40000400
 80051a8:	40000800 	.word	0x40000800
 80051ac:	40000c00 	.word	0x40000c00
 80051b0:	40014000 	.word	0x40014000

080051b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e042      	b.n	8005274 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d106      	bne.n	8005208 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7fd fa9e 	bl	8002744 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2224      	movs	r2, #36	@ 0x24
 800520c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68da      	ldr	r2, [r3, #12]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800521e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f973 	bl	800550c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	691a      	ldr	r2, [r3, #16]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005234:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	695a      	ldr	r2, [r3, #20]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005244:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68da      	ldr	r2, [r3, #12]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005254:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2220      	movs	r2, #32
 8005260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2220      	movs	r2, #32
 8005268:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b08a      	sub	sp, #40	@ 0x28
 8005280:	af02      	add	r7, sp, #8
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	603b      	str	r3, [r7, #0]
 8005288:	4613      	mov	r3, r2
 800528a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b20      	cmp	r3, #32
 800529a:	d175      	bne.n	8005388 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <HAL_UART_Transmit+0x2c>
 80052a2:	88fb      	ldrh	r3, [r7, #6]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e06e      	b.n	800538a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2221      	movs	r2, #33	@ 0x21
 80052b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052ba:	f7fd fb51 	bl	8002960 <HAL_GetTick>
 80052be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	88fa      	ldrh	r2, [r7, #6]
 80052c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	88fa      	ldrh	r2, [r7, #6]
 80052ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052d4:	d108      	bne.n	80052e8 <HAL_UART_Transmit+0x6c>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d104      	bne.n	80052e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80052de:	2300      	movs	r3, #0
 80052e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	61bb      	str	r3, [r7, #24]
 80052e6:	e003      	b.n	80052f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052ec:	2300      	movs	r3, #0
 80052ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052f0:	e02e      	b.n	8005350 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	2200      	movs	r2, #0
 80052fa:	2180      	movs	r1, #128	@ 0x80
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f000 f848 	bl	8005392 <UART_WaitOnFlagUntilTimeout>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d005      	beq.n	8005314 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2220      	movs	r2, #32
 800530c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e03a      	b.n	800538a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10b      	bne.n	8005332 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	881b      	ldrh	r3, [r3, #0]
 800531e:	461a      	mov	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005328:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	3302      	adds	r3, #2
 800532e:	61bb      	str	r3, [r7, #24]
 8005330:	e007      	b.n	8005342 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	781a      	ldrb	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	3301      	adds	r3, #1
 8005340:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005346:	b29b      	uxth	r3, r3
 8005348:	3b01      	subs	r3, #1
 800534a:	b29a      	uxth	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005354:	b29b      	uxth	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1cb      	bne.n	80052f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	2200      	movs	r2, #0
 8005362:	2140      	movs	r1, #64	@ 0x40
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f000 f814 	bl	8005392 <UART_WaitOnFlagUntilTimeout>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d005      	beq.n	800537c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2220      	movs	r2, #32
 8005374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e006      	b.n	800538a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2220      	movs	r2, #32
 8005380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005384:	2300      	movs	r3, #0
 8005386:	e000      	b.n	800538a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005388:	2302      	movs	r3, #2
  }
}
 800538a:	4618      	mov	r0, r3
 800538c:	3720      	adds	r7, #32
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b086      	sub	sp, #24
 8005396:	af00      	add	r7, sp, #0
 8005398:	60f8      	str	r0, [r7, #12]
 800539a:	60b9      	str	r1, [r7, #8]
 800539c:	603b      	str	r3, [r7, #0]
 800539e:	4613      	mov	r3, r2
 80053a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053a2:	e03b      	b.n	800541c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053aa:	d037      	beq.n	800541c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ac:	f7fd fad8 	bl	8002960 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	6a3a      	ldr	r2, [r7, #32]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d302      	bcc.n	80053c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e03a      	b.n	800543c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f003 0304 	and.w	r3, r3, #4
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d023      	beq.n	800541c <UART_WaitOnFlagUntilTimeout+0x8a>
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	2b80      	cmp	r3, #128	@ 0x80
 80053d8:	d020      	beq.n	800541c <UART_WaitOnFlagUntilTimeout+0x8a>
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	2b40      	cmp	r3, #64	@ 0x40
 80053de:	d01d      	beq.n	800541c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0308 	and.w	r3, r3, #8
 80053ea:	2b08      	cmp	r3, #8
 80053ec:	d116      	bne.n	800541c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80053ee:	2300      	movs	r3, #0
 80053f0:	617b      	str	r3, [r7, #20]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	617b      	str	r3, [r7, #20]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	617b      	str	r3, [r7, #20]
 8005402:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 f81d 	bl	8005444 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2208      	movs	r2, #8
 800540e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e00f      	b.n	800543c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	4013      	ands	r3, r2
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	429a      	cmp	r2, r3
 800542a:	bf0c      	ite	eq
 800542c:	2301      	moveq	r3, #1
 800542e:	2300      	movne	r3, #0
 8005430:	b2db      	uxtb	r3, r3
 8005432:	461a      	mov	r2, r3
 8005434:	79fb      	ldrb	r3, [r7, #7]
 8005436:	429a      	cmp	r2, r3
 8005438:	d0b4      	beq.n	80053a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3718      	adds	r7, #24
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005444:	b480      	push	{r7}
 8005446:	b095      	sub	sp, #84	@ 0x54
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	330c      	adds	r3, #12
 8005452:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005456:	e853 3f00 	ldrex	r3, [r3]
 800545a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800545c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005462:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	330c      	adds	r3, #12
 800546a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800546c:	643a      	str	r2, [r7, #64]	@ 0x40
 800546e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005470:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005472:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005474:	e841 2300 	strex	r3, r2, [r1]
 8005478:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800547a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1e5      	bne.n	800544c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3314      	adds	r3, #20
 8005486:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	e853 3f00 	ldrex	r3, [r3]
 800548e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	f023 0301 	bic.w	r3, r3, #1
 8005496:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3314      	adds	r3, #20
 800549e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054a8:	e841 2300 	strex	r3, r2, [r1]
 80054ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1e5      	bne.n	8005480 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d119      	bne.n	80054f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	330c      	adds	r3, #12
 80054c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	e853 3f00 	ldrex	r3, [r3]
 80054ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	f023 0310 	bic.w	r3, r3, #16
 80054d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	330c      	adds	r3, #12
 80054da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054dc:	61ba      	str	r2, [r7, #24]
 80054de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e0:	6979      	ldr	r1, [r7, #20]
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	e841 2300 	strex	r3, r2, [r1]
 80054e8:	613b      	str	r3, [r7, #16]
   return(result);
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1e5      	bne.n	80054bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80054fe:	bf00      	nop
 8005500:	3754      	adds	r7, #84	@ 0x54
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
	...

0800550c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800550c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005510:	b0c0      	sub	sp, #256	@ 0x100
 8005512:	af00      	add	r7, sp, #0
 8005514:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005528:	68d9      	ldr	r1, [r3, #12]
 800552a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	ea40 0301 	orr.w	r3, r0, r1
 8005534:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800553a:	689a      	ldr	r2, [r3, #8]
 800553c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	431a      	orrs	r2, r3
 8005544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	431a      	orrs	r2, r3
 800554c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	4313      	orrs	r3, r2
 8005554:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005564:	f021 010c 	bic.w	r1, r1, #12
 8005568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005572:	430b      	orrs	r3, r1
 8005574:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005586:	6999      	ldr	r1, [r3, #24]
 8005588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	ea40 0301 	orr.w	r3, r0, r1
 8005592:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	4b8f      	ldr	r3, [pc, #572]	@ (80057d8 <UART_SetConfig+0x2cc>)
 800559c:	429a      	cmp	r2, r3
 800559e:	d005      	beq.n	80055ac <UART_SetConfig+0xa0>
 80055a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	4b8d      	ldr	r3, [pc, #564]	@ (80057dc <UART_SetConfig+0x2d0>)
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d104      	bne.n	80055b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055ac:	f7fe fbb6 	bl	8003d1c <HAL_RCC_GetPCLK2Freq>
 80055b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80055b4:	e003      	b.n	80055be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055b6:	f7fe fb9d 	bl	8003cf4 <HAL_RCC_GetPCLK1Freq>
 80055ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055c8:	f040 810c 	bne.w	80057e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055d0:	2200      	movs	r2, #0
 80055d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80055d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80055da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80055de:	4622      	mov	r2, r4
 80055e0:	462b      	mov	r3, r5
 80055e2:	1891      	adds	r1, r2, r2
 80055e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80055e6:	415b      	adcs	r3, r3
 80055e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80055ee:	4621      	mov	r1, r4
 80055f0:	eb12 0801 	adds.w	r8, r2, r1
 80055f4:	4629      	mov	r1, r5
 80055f6:	eb43 0901 	adc.w	r9, r3, r1
 80055fa:	f04f 0200 	mov.w	r2, #0
 80055fe:	f04f 0300 	mov.w	r3, #0
 8005602:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005606:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800560a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800560e:	4690      	mov	r8, r2
 8005610:	4699      	mov	r9, r3
 8005612:	4623      	mov	r3, r4
 8005614:	eb18 0303 	adds.w	r3, r8, r3
 8005618:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800561c:	462b      	mov	r3, r5
 800561e:	eb49 0303 	adc.w	r3, r9, r3
 8005622:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005632:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005636:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800563a:	460b      	mov	r3, r1
 800563c:	18db      	adds	r3, r3, r3
 800563e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005640:	4613      	mov	r3, r2
 8005642:	eb42 0303 	adc.w	r3, r2, r3
 8005646:	657b      	str	r3, [r7, #84]	@ 0x54
 8005648:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800564c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005650:	f7fb fb02 	bl	8000c58 <__aeabi_uldivmod>
 8005654:	4602      	mov	r2, r0
 8005656:	460b      	mov	r3, r1
 8005658:	4b61      	ldr	r3, [pc, #388]	@ (80057e0 <UART_SetConfig+0x2d4>)
 800565a:	fba3 2302 	umull	r2, r3, r3, r2
 800565e:	095b      	lsrs	r3, r3, #5
 8005660:	011c      	lsls	r4, r3, #4
 8005662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005666:	2200      	movs	r2, #0
 8005668:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800566c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005670:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005674:	4642      	mov	r2, r8
 8005676:	464b      	mov	r3, r9
 8005678:	1891      	adds	r1, r2, r2
 800567a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800567c:	415b      	adcs	r3, r3
 800567e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005680:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005684:	4641      	mov	r1, r8
 8005686:	eb12 0a01 	adds.w	sl, r2, r1
 800568a:	4649      	mov	r1, r9
 800568c:	eb43 0b01 	adc.w	fp, r3, r1
 8005690:	f04f 0200 	mov.w	r2, #0
 8005694:	f04f 0300 	mov.w	r3, #0
 8005698:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800569c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056a4:	4692      	mov	sl, r2
 80056a6:	469b      	mov	fp, r3
 80056a8:	4643      	mov	r3, r8
 80056aa:	eb1a 0303 	adds.w	r3, sl, r3
 80056ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056b2:	464b      	mov	r3, r9
 80056b4:	eb4b 0303 	adc.w	r3, fp, r3
 80056b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80056bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80056cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80056d0:	460b      	mov	r3, r1
 80056d2:	18db      	adds	r3, r3, r3
 80056d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80056d6:	4613      	mov	r3, r2
 80056d8:	eb42 0303 	adc.w	r3, r2, r3
 80056dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80056de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80056e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80056e6:	f7fb fab7 	bl	8000c58 <__aeabi_uldivmod>
 80056ea:	4602      	mov	r2, r0
 80056ec:	460b      	mov	r3, r1
 80056ee:	4611      	mov	r1, r2
 80056f0:	4b3b      	ldr	r3, [pc, #236]	@ (80057e0 <UART_SetConfig+0x2d4>)
 80056f2:	fba3 2301 	umull	r2, r3, r3, r1
 80056f6:	095b      	lsrs	r3, r3, #5
 80056f8:	2264      	movs	r2, #100	@ 0x64
 80056fa:	fb02 f303 	mul.w	r3, r2, r3
 80056fe:	1acb      	subs	r3, r1, r3
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005706:	4b36      	ldr	r3, [pc, #216]	@ (80057e0 <UART_SetConfig+0x2d4>)
 8005708:	fba3 2302 	umull	r2, r3, r3, r2
 800570c:	095b      	lsrs	r3, r3, #5
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005714:	441c      	add	r4, r3
 8005716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800571a:	2200      	movs	r2, #0
 800571c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005720:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005724:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005728:	4642      	mov	r2, r8
 800572a:	464b      	mov	r3, r9
 800572c:	1891      	adds	r1, r2, r2
 800572e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005730:	415b      	adcs	r3, r3
 8005732:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005734:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005738:	4641      	mov	r1, r8
 800573a:	1851      	adds	r1, r2, r1
 800573c:	6339      	str	r1, [r7, #48]	@ 0x30
 800573e:	4649      	mov	r1, r9
 8005740:	414b      	adcs	r3, r1
 8005742:	637b      	str	r3, [r7, #52]	@ 0x34
 8005744:	f04f 0200 	mov.w	r2, #0
 8005748:	f04f 0300 	mov.w	r3, #0
 800574c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005750:	4659      	mov	r1, fp
 8005752:	00cb      	lsls	r3, r1, #3
 8005754:	4651      	mov	r1, sl
 8005756:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800575a:	4651      	mov	r1, sl
 800575c:	00ca      	lsls	r2, r1, #3
 800575e:	4610      	mov	r0, r2
 8005760:	4619      	mov	r1, r3
 8005762:	4603      	mov	r3, r0
 8005764:	4642      	mov	r2, r8
 8005766:	189b      	adds	r3, r3, r2
 8005768:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800576c:	464b      	mov	r3, r9
 800576e:	460a      	mov	r2, r1
 8005770:	eb42 0303 	adc.w	r3, r2, r3
 8005774:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005784:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005788:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800578c:	460b      	mov	r3, r1
 800578e:	18db      	adds	r3, r3, r3
 8005790:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005792:	4613      	mov	r3, r2
 8005794:	eb42 0303 	adc.w	r3, r2, r3
 8005798:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800579a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800579e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80057a2:	f7fb fa59 	bl	8000c58 <__aeabi_uldivmod>
 80057a6:	4602      	mov	r2, r0
 80057a8:	460b      	mov	r3, r1
 80057aa:	4b0d      	ldr	r3, [pc, #52]	@ (80057e0 <UART_SetConfig+0x2d4>)
 80057ac:	fba3 1302 	umull	r1, r3, r3, r2
 80057b0:	095b      	lsrs	r3, r3, #5
 80057b2:	2164      	movs	r1, #100	@ 0x64
 80057b4:	fb01 f303 	mul.w	r3, r1, r3
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	00db      	lsls	r3, r3, #3
 80057bc:	3332      	adds	r3, #50	@ 0x32
 80057be:	4a08      	ldr	r2, [pc, #32]	@ (80057e0 <UART_SetConfig+0x2d4>)
 80057c0:	fba2 2303 	umull	r2, r3, r2, r3
 80057c4:	095b      	lsrs	r3, r3, #5
 80057c6:	f003 0207 	and.w	r2, r3, #7
 80057ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4422      	add	r2, r4
 80057d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057d4:	e106      	b.n	80059e4 <UART_SetConfig+0x4d8>
 80057d6:	bf00      	nop
 80057d8:	40011000 	.word	0x40011000
 80057dc:	40011400 	.word	0x40011400
 80057e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057e8:	2200      	movs	r2, #0
 80057ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80057ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80057f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80057f6:	4642      	mov	r2, r8
 80057f8:	464b      	mov	r3, r9
 80057fa:	1891      	adds	r1, r2, r2
 80057fc:	6239      	str	r1, [r7, #32]
 80057fe:	415b      	adcs	r3, r3
 8005800:	627b      	str	r3, [r7, #36]	@ 0x24
 8005802:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005806:	4641      	mov	r1, r8
 8005808:	1854      	adds	r4, r2, r1
 800580a:	4649      	mov	r1, r9
 800580c:	eb43 0501 	adc.w	r5, r3, r1
 8005810:	f04f 0200 	mov.w	r2, #0
 8005814:	f04f 0300 	mov.w	r3, #0
 8005818:	00eb      	lsls	r3, r5, #3
 800581a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800581e:	00e2      	lsls	r2, r4, #3
 8005820:	4614      	mov	r4, r2
 8005822:	461d      	mov	r5, r3
 8005824:	4643      	mov	r3, r8
 8005826:	18e3      	adds	r3, r4, r3
 8005828:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800582c:	464b      	mov	r3, r9
 800582e:	eb45 0303 	adc.w	r3, r5, r3
 8005832:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005842:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005846:	f04f 0200 	mov.w	r2, #0
 800584a:	f04f 0300 	mov.w	r3, #0
 800584e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005852:	4629      	mov	r1, r5
 8005854:	008b      	lsls	r3, r1, #2
 8005856:	4621      	mov	r1, r4
 8005858:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800585c:	4621      	mov	r1, r4
 800585e:	008a      	lsls	r2, r1, #2
 8005860:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005864:	f7fb f9f8 	bl	8000c58 <__aeabi_uldivmod>
 8005868:	4602      	mov	r2, r0
 800586a:	460b      	mov	r3, r1
 800586c:	4b60      	ldr	r3, [pc, #384]	@ (80059f0 <UART_SetConfig+0x4e4>)
 800586e:	fba3 2302 	umull	r2, r3, r3, r2
 8005872:	095b      	lsrs	r3, r3, #5
 8005874:	011c      	lsls	r4, r3, #4
 8005876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800587a:	2200      	movs	r2, #0
 800587c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005880:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005884:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005888:	4642      	mov	r2, r8
 800588a:	464b      	mov	r3, r9
 800588c:	1891      	adds	r1, r2, r2
 800588e:	61b9      	str	r1, [r7, #24]
 8005890:	415b      	adcs	r3, r3
 8005892:	61fb      	str	r3, [r7, #28]
 8005894:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005898:	4641      	mov	r1, r8
 800589a:	1851      	adds	r1, r2, r1
 800589c:	6139      	str	r1, [r7, #16]
 800589e:	4649      	mov	r1, r9
 80058a0:	414b      	adcs	r3, r1
 80058a2:	617b      	str	r3, [r7, #20]
 80058a4:	f04f 0200 	mov.w	r2, #0
 80058a8:	f04f 0300 	mov.w	r3, #0
 80058ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058b0:	4659      	mov	r1, fp
 80058b2:	00cb      	lsls	r3, r1, #3
 80058b4:	4651      	mov	r1, sl
 80058b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058ba:	4651      	mov	r1, sl
 80058bc:	00ca      	lsls	r2, r1, #3
 80058be:	4610      	mov	r0, r2
 80058c0:	4619      	mov	r1, r3
 80058c2:	4603      	mov	r3, r0
 80058c4:	4642      	mov	r2, r8
 80058c6:	189b      	adds	r3, r3, r2
 80058c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80058cc:	464b      	mov	r3, r9
 80058ce:	460a      	mov	r2, r1
 80058d0:	eb42 0303 	adc.w	r3, r2, r3
 80058d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80058d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80058e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80058e4:	f04f 0200 	mov.w	r2, #0
 80058e8:	f04f 0300 	mov.w	r3, #0
 80058ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80058f0:	4649      	mov	r1, r9
 80058f2:	008b      	lsls	r3, r1, #2
 80058f4:	4641      	mov	r1, r8
 80058f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058fa:	4641      	mov	r1, r8
 80058fc:	008a      	lsls	r2, r1, #2
 80058fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005902:	f7fb f9a9 	bl	8000c58 <__aeabi_uldivmod>
 8005906:	4602      	mov	r2, r0
 8005908:	460b      	mov	r3, r1
 800590a:	4611      	mov	r1, r2
 800590c:	4b38      	ldr	r3, [pc, #224]	@ (80059f0 <UART_SetConfig+0x4e4>)
 800590e:	fba3 2301 	umull	r2, r3, r3, r1
 8005912:	095b      	lsrs	r3, r3, #5
 8005914:	2264      	movs	r2, #100	@ 0x64
 8005916:	fb02 f303 	mul.w	r3, r2, r3
 800591a:	1acb      	subs	r3, r1, r3
 800591c:	011b      	lsls	r3, r3, #4
 800591e:	3332      	adds	r3, #50	@ 0x32
 8005920:	4a33      	ldr	r2, [pc, #204]	@ (80059f0 <UART_SetConfig+0x4e4>)
 8005922:	fba2 2303 	umull	r2, r3, r2, r3
 8005926:	095b      	lsrs	r3, r3, #5
 8005928:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800592c:	441c      	add	r4, r3
 800592e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005932:	2200      	movs	r2, #0
 8005934:	673b      	str	r3, [r7, #112]	@ 0x70
 8005936:	677a      	str	r2, [r7, #116]	@ 0x74
 8005938:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800593c:	4642      	mov	r2, r8
 800593e:	464b      	mov	r3, r9
 8005940:	1891      	adds	r1, r2, r2
 8005942:	60b9      	str	r1, [r7, #8]
 8005944:	415b      	adcs	r3, r3
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800594c:	4641      	mov	r1, r8
 800594e:	1851      	adds	r1, r2, r1
 8005950:	6039      	str	r1, [r7, #0]
 8005952:	4649      	mov	r1, r9
 8005954:	414b      	adcs	r3, r1
 8005956:	607b      	str	r3, [r7, #4]
 8005958:	f04f 0200 	mov.w	r2, #0
 800595c:	f04f 0300 	mov.w	r3, #0
 8005960:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005964:	4659      	mov	r1, fp
 8005966:	00cb      	lsls	r3, r1, #3
 8005968:	4651      	mov	r1, sl
 800596a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800596e:	4651      	mov	r1, sl
 8005970:	00ca      	lsls	r2, r1, #3
 8005972:	4610      	mov	r0, r2
 8005974:	4619      	mov	r1, r3
 8005976:	4603      	mov	r3, r0
 8005978:	4642      	mov	r2, r8
 800597a:	189b      	adds	r3, r3, r2
 800597c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800597e:	464b      	mov	r3, r9
 8005980:	460a      	mov	r2, r1
 8005982:	eb42 0303 	adc.w	r3, r2, r3
 8005986:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	663b      	str	r3, [r7, #96]	@ 0x60
 8005992:	667a      	str	r2, [r7, #100]	@ 0x64
 8005994:	f04f 0200 	mov.w	r2, #0
 8005998:	f04f 0300 	mov.w	r3, #0
 800599c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80059a0:	4649      	mov	r1, r9
 80059a2:	008b      	lsls	r3, r1, #2
 80059a4:	4641      	mov	r1, r8
 80059a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059aa:	4641      	mov	r1, r8
 80059ac:	008a      	lsls	r2, r1, #2
 80059ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80059b2:	f7fb f951 	bl	8000c58 <__aeabi_uldivmod>
 80059b6:	4602      	mov	r2, r0
 80059b8:	460b      	mov	r3, r1
 80059ba:	4b0d      	ldr	r3, [pc, #52]	@ (80059f0 <UART_SetConfig+0x4e4>)
 80059bc:	fba3 1302 	umull	r1, r3, r3, r2
 80059c0:	095b      	lsrs	r3, r3, #5
 80059c2:	2164      	movs	r1, #100	@ 0x64
 80059c4:	fb01 f303 	mul.w	r3, r1, r3
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	011b      	lsls	r3, r3, #4
 80059cc:	3332      	adds	r3, #50	@ 0x32
 80059ce:	4a08      	ldr	r2, [pc, #32]	@ (80059f0 <UART_SetConfig+0x4e4>)
 80059d0:	fba2 2303 	umull	r2, r3, r2, r3
 80059d4:	095b      	lsrs	r3, r3, #5
 80059d6:	f003 020f 	and.w	r2, r3, #15
 80059da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4422      	add	r2, r4
 80059e2:	609a      	str	r2, [r3, #8]
}
 80059e4:	bf00      	nop
 80059e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80059ea:	46bd      	mov	sp, r7
 80059ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059f0:	51eb851f 	.word	0x51eb851f

080059f4 <__NVIC_SetPriority>:
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	4603      	mov	r3, r0
 80059fc:	6039      	str	r1, [r7, #0]
 80059fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	db0a      	blt.n	8005a1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	490c      	ldr	r1, [pc, #48]	@ (8005a40 <__NVIC_SetPriority+0x4c>)
 8005a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a12:	0112      	lsls	r2, r2, #4
 8005a14:	b2d2      	uxtb	r2, r2
 8005a16:	440b      	add	r3, r1
 8005a18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005a1c:	e00a      	b.n	8005a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	4908      	ldr	r1, [pc, #32]	@ (8005a44 <__NVIC_SetPriority+0x50>)
 8005a24:	79fb      	ldrb	r3, [r7, #7]
 8005a26:	f003 030f 	and.w	r3, r3, #15
 8005a2a:	3b04      	subs	r3, #4
 8005a2c:	0112      	lsls	r2, r2, #4
 8005a2e:	b2d2      	uxtb	r2, r2
 8005a30:	440b      	add	r3, r1
 8005a32:	761a      	strb	r2, [r3, #24]
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	e000e100 	.word	0xe000e100
 8005a44:	e000ed00 	.word	0xe000ed00

08005a48 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005a4c:	4b05      	ldr	r3, [pc, #20]	@ (8005a64 <SysTick_Handler+0x1c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005a50:	f001 fd54 	bl	80074fc <xTaskGetSchedulerState>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d001      	beq.n	8005a5e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005a5a:	f002 fb4d 	bl	80080f8 <xPortSysTickHandler>
  }
}
 8005a5e:	bf00      	nop
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	e000e010 	.word	0xe000e010

08005a68 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	f06f 0004 	mvn.w	r0, #4
 8005a72:	f7ff ffbf 	bl	80059f4 <__NVIC_SetPriority>
#endif
}
 8005a76:	bf00      	nop
 8005a78:	bd80      	pop	{r7, pc}
	...

08005a7c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a82:	f3ef 8305 	mrs	r3, IPSR
 8005a86:	603b      	str	r3, [r7, #0]
  return(result);
 8005a88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005a8e:	f06f 0305 	mvn.w	r3, #5
 8005a92:	607b      	str	r3, [r7, #4]
 8005a94:	e00c      	b.n	8005ab0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005a96:	4b0a      	ldr	r3, [pc, #40]	@ (8005ac0 <osKernelInitialize+0x44>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d105      	bne.n	8005aaa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005a9e:	4b08      	ldr	r3, [pc, #32]	@ (8005ac0 <osKernelInitialize+0x44>)
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	607b      	str	r3, [r7, #4]
 8005aa8:	e002      	b.n	8005ab0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8005aae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005ab0:	687b      	ldr	r3, [r7, #4]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	20000460 	.word	0x20000460

08005ac4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005aca:	f3ef 8305 	mrs	r3, IPSR
 8005ace:	603b      	str	r3, [r7, #0]
  return(result);
 8005ad0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <osKernelStart+0x1a>
    stat = osErrorISR;
 8005ad6:	f06f 0305 	mvn.w	r3, #5
 8005ada:	607b      	str	r3, [r7, #4]
 8005adc:	e010      	b.n	8005b00 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005ade:	4b0b      	ldr	r3, [pc, #44]	@ (8005b0c <osKernelStart+0x48>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d109      	bne.n	8005afa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005ae6:	f7ff ffbf 	bl	8005a68 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005aea:	4b08      	ldr	r3, [pc, #32]	@ (8005b0c <osKernelStart+0x48>)
 8005aec:	2202      	movs	r2, #2
 8005aee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005af0:	f001 f8b6 	bl	8006c60 <vTaskStartScheduler>
      stat = osOK;
 8005af4:	2300      	movs	r3, #0
 8005af6:	607b      	str	r3, [r7, #4]
 8005af8:	e002      	b.n	8005b00 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005afa:	f04f 33ff 	mov.w	r3, #4294967295
 8005afe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005b00:	687b      	ldr	r3, [r7, #4]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3708      	adds	r7, #8
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	20000460 	.word	0x20000460

08005b10 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b08e      	sub	sp, #56	@ 0x38
 8005b14:	af04      	add	r7, sp, #16
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b20:	f3ef 8305 	mrs	r3, IPSR
 8005b24:	617b      	str	r3, [r7, #20]
  return(result);
 8005b26:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d17e      	bne.n	8005c2a <osThreadNew+0x11a>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d07b      	beq.n	8005c2a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005b32:	2380      	movs	r3, #128	@ 0x80
 8005b34:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005b36:	2318      	movs	r3, #24
 8005b38:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b42:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d045      	beq.n	8005bd6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d002      	beq.n	8005b58 <osThreadNew+0x48>
        name = attr->name;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d002      	beq.n	8005b66 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d008      	beq.n	8005b7e <osThreadNew+0x6e>
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	2b38      	cmp	r3, #56	@ 0x38
 8005b70:	d805      	bhi.n	8005b7e <osThreadNew+0x6e>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <osThreadNew+0x72>
        return (NULL);
 8005b7e:	2300      	movs	r3, #0
 8005b80:	e054      	b.n	8005c2c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d003      	beq.n	8005b92 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	089b      	lsrs	r3, r3, #2
 8005b90:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00e      	beq.n	8005bb8 <osThreadNew+0xa8>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	2b5b      	cmp	r3, #91	@ 0x5b
 8005ba0:	d90a      	bls.n	8005bb8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d006      	beq.n	8005bb8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d002      	beq.n	8005bb8 <osThreadNew+0xa8>
        mem = 1;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	61bb      	str	r3, [r7, #24]
 8005bb6:	e010      	b.n	8005bda <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10c      	bne.n	8005bda <osThreadNew+0xca>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d108      	bne.n	8005bda <osThreadNew+0xca>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d104      	bne.n	8005bda <osThreadNew+0xca>
          mem = 0;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	61bb      	str	r3, [r7, #24]
 8005bd4:	e001      	b.n	8005bda <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d110      	bne.n	8005c02 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005be8:	9202      	str	r2, [sp, #8]
 8005bea:	9301      	str	r3, [sp, #4]
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	6a3a      	ldr	r2, [r7, #32]
 8005bf4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f000 fe56 	bl	80068a8 <xTaskCreateStatic>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	613b      	str	r3, [r7, #16]
 8005c00:	e013      	b.n	8005c2a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d110      	bne.n	8005c2a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	f107 0310 	add.w	r3, r7, #16
 8005c10:	9301      	str	r3, [sp, #4]
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 fea4 	bl	8006968 <xTaskCreate>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d001      	beq.n	8005c2a <osThreadNew+0x11a>
            hTask = NULL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005c2a:	693b      	ldr	r3, [r7, #16]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3728      	adds	r7, #40	@ 0x28
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c3c:	f3ef 8305 	mrs	r3, IPSR
 8005c40:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c42:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d003      	beq.n	8005c50 <osDelay+0x1c>
    stat = osErrorISR;
 8005c48:	f06f 0305 	mvn.w	r3, #5
 8005c4c:	60fb      	str	r3, [r7, #12]
 8005c4e:	e007      	b.n	8005c60 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005c50:	2300      	movs	r3, #0
 8005c52:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d002      	beq.n	8005c60 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 ffca 	bl	8006bf4 <vTaskDelay>
    }
  }

  return (stat);
 8005c60:	68fb      	ldr	r3, [r7, #12]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
	...

08005c6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	4a07      	ldr	r2, [pc, #28]	@ (8005c98 <vApplicationGetIdleTaskMemory+0x2c>)
 8005c7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	4a06      	ldr	r2, [pc, #24]	@ (8005c9c <vApplicationGetIdleTaskMemory+0x30>)
 8005c82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2280      	movs	r2, #128	@ 0x80
 8005c88:	601a      	str	r2, [r3, #0]
}
 8005c8a:	bf00      	nop
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	20000464 	.word	0x20000464
 8005c9c:	200004c0 	.word	0x200004c0

08005ca0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4a07      	ldr	r2, [pc, #28]	@ (8005ccc <vApplicationGetTimerTaskMemory+0x2c>)
 8005cb0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	4a06      	ldr	r2, [pc, #24]	@ (8005cd0 <vApplicationGetTimerTaskMemory+0x30>)
 8005cb6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005cbe:	601a      	str	r2, [r3, #0]
}
 8005cc0:	bf00      	nop
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	200006c0 	.word	0x200006c0
 8005cd0:	2000071c 	.word	0x2000071c

08005cd4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f103 0208 	add.w	r2, r3, #8
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f103 0208 	add.w	r2, r3, #8
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f103 0208 	add.w	r2, r3, #8
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d22:	bf00      	nop
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b085      	sub	sp, #20
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
 8005d36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	683a      	ldr	r2, [r7, #0]
 8005d52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	601a      	str	r2, [r3, #0]
}
 8005d6a:	bf00      	nop
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d76:	b480      	push	{r7}
 8005d78:	b085      	sub	sp, #20
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
 8005d7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8c:	d103      	bne.n	8005d96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	e00c      	b.n	8005db0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	3308      	adds	r3, #8
 8005d9a:	60fb      	str	r3, [r7, #12]
 8005d9c:	e002      	b.n	8005da4 <vListInsert+0x2e>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d2f6      	bcs.n	8005d9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	1c5a      	adds	r2, r3, #1
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	601a      	str	r2, [r3, #0]
}
 8005ddc:	bf00      	nop
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6892      	ldr	r2, [r2, #8]
 8005dfe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	6852      	ldr	r2, [r2, #4]
 8005e08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d103      	bne.n	8005e1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	689a      	ldr	r2, [r3, #8]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	1e5a      	subs	r2, r3, #1
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10b      	bne.n	8005e68 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e54:	f383 8811 	msr	BASEPRI, r3
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005e62:	bf00      	nop
 8005e64:	bf00      	nop
 8005e66:	e7fd      	b.n	8005e64 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005e68:	f002 f8b6 	bl	8007fd8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e74:	68f9      	ldr	r1, [r7, #12]
 8005e76:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005e78:	fb01 f303 	mul.w	r3, r1, r3
 8005e7c:	441a      	add	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	68f9      	ldr	r1, [r7, #12]
 8005e9c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005e9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ea2:	441a      	add	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	22ff      	movs	r2, #255	@ 0xff
 8005eac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	22ff      	movs	r2, #255	@ 0xff
 8005eb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d114      	bne.n	8005ee8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d01a      	beq.n	8005efc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	3310      	adds	r3, #16
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f001 f956 	bl	800717c <xTaskRemoveFromEventList>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d012      	beq.n	8005efc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8005f0c <xQueueGenericReset+0xd0>)
 8005ed8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005edc:	601a      	str	r2, [r3, #0]
 8005ede:	f3bf 8f4f 	dsb	sy
 8005ee2:	f3bf 8f6f 	isb	sy
 8005ee6:	e009      	b.n	8005efc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	3310      	adds	r3, #16
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7ff fef1 	bl	8005cd4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	3324      	adds	r3, #36	@ 0x24
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7ff feec 	bl	8005cd4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005efc:	f002 f89e 	bl	800803c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f00:	2301      	movs	r3, #1
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	e000ed04 	.word	0xe000ed04

08005f10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b08e      	sub	sp, #56	@ 0x38
 8005f14:	af02      	add	r7, sp, #8
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
 8005f1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10b      	bne.n	8005f3c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f28:	f383 8811 	msr	BASEPRI, r3
 8005f2c:	f3bf 8f6f 	isb	sy
 8005f30:	f3bf 8f4f 	dsb	sy
 8005f34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005f36:	bf00      	nop
 8005f38:	bf00      	nop
 8005f3a:	e7fd      	b.n	8005f38 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10b      	bne.n	8005f5a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f46:	f383 8811 	msr	BASEPRI, r3
 8005f4a:	f3bf 8f6f 	isb	sy
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005f54:	bf00      	nop
 8005f56:	bf00      	nop
 8005f58:	e7fd      	b.n	8005f56 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d002      	beq.n	8005f66 <xQueueGenericCreateStatic+0x56>
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <xQueueGenericCreateStatic+0x5a>
 8005f66:	2301      	movs	r3, #1
 8005f68:	e000      	b.n	8005f6c <xQueueGenericCreateStatic+0x5c>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10b      	bne.n	8005f88 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	623b      	str	r3, [r7, #32]
}
 8005f82:	bf00      	nop
 8005f84:	bf00      	nop
 8005f86:	e7fd      	b.n	8005f84 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d102      	bne.n	8005f94 <xQueueGenericCreateStatic+0x84>
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <xQueueGenericCreateStatic+0x88>
 8005f94:	2301      	movs	r3, #1
 8005f96:	e000      	b.n	8005f9a <xQueueGenericCreateStatic+0x8a>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10b      	bne.n	8005fb6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	61fb      	str	r3, [r7, #28]
}
 8005fb0:	bf00      	nop
 8005fb2:	bf00      	nop
 8005fb4:	e7fd      	b.n	8005fb2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005fb6:	2350      	movs	r3, #80	@ 0x50
 8005fb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	2b50      	cmp	r3, #80	@ 0x50
 8005fbe:	d00b      	beq.n	8005fd8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	61bb      	str	r3, [r7, #24]
}
 8005fd2:	bf00      	nop
 8005fd4:	bf00      	nop
 8005fd6:	e7fd      	b.n	8005fd4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005fd8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00d      	beq.n	8006000 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	68b9      	ldr	r1, [r7, #8]
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f000 f840 	bl	8006080 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006002:	4618      	mov	r0, r3
 8006004:	3730      	adds	r7, #48	@ 0x30
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800600a:	b580      	push	{r7, lr}
 800600c:	b08a      	sub	sp, #40	@ 0x28
 800600e:	af02      	add	r7, sp, #8
 8006010:	60f8      	str	r0, [r7, #12]
 8006012:	60b9      	str	r1, [r7, #8]
 8006014:	4613      	mov	r3, r2
 8006016:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10b      	bne.n	8006036 <xQueueGenericCreate+0x2c>
	__asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	613b      	str	r3, [r7, #16]
}
 8006030:	bf00      	nop
 8006032:	bf00      	nop
 8006034:	e7fd      	b.n	8006032 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	fb02 f303 	mul.w	r3, r2, r3
 800603e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	3350      	adds	r3, #80	@ 0x50
 8006044:	4618      	mov	r0, r3
 8006046:	f002 f8e9 	bl	800821c <pvPortMalloc>
 800604a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d011      	beq.n	8006076 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	3350      	adds	r3, #80	@ 0x50
 800605a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006064:	79fa      	ldrb	r2, [r7, #7]
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	9300      	str	r3, [sp, #0]
 800606a:	4613      	mov	r3, r2
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	68b9      	ldr	r1, [r7, #8]
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f000 f805 	bl	8006080 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006076:	69bb      	ldr	r3, [r7, #24]
	}
 8006078:	4618      	mov	r0, r3
 800607a:	3720      	adds	r7, #32
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
 800608c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d103      	bne.n	800609c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	601a      	str	r2, [r3, #0]
 800609a:	e002      	b.n	80060a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80060ae:	2101      	movs	r1, #1
 80060b0:	69b8      	ldr	r0, [r7, #24]
 80060b2:	f7ff fec3 	bl	8005e3c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	78fa      	ldrb	r2, [r7, #3]
 80060ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80060be:	bf00      	nop
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
	...

080060c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b08e      	sub	sp, #56	@ 0x38
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
 80060d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80060d6:	2300      	movs	r3, #0
 80060d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80060de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10b      	bne.n	80060fc <xQueueGenericSend+0x34>
	__asm volatile
 80060e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e8:	f383 8811 	msr	BASEPRI, r3
 80060ec:	f3bf 8f6f 	isb	sy
 80060f0:	f3bf 8f4f 	dsb	sy
 80060f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80060f6:	bf00      	nop
 80060f8:	bf00      	nop
 80060fa:	e7fd      	b.n	80060f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d103      	bne.n	800610a <xQueueGenericSend+0x42>
 8006102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <xQueueGenericSend+0x46>
 800610a:	2301      	movs	r3, #1
 800610c:	e000      	b.n	8006110 <xQueueGenericSend+0x48>
 800610e:	2300      	movs	r3, #0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10b      	bne.n	800612c <xQueueGenericSend+0x64>
	__asm volatile
 8006114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006118:	f383 8811 	msr	BASEPRI, r3
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006126:	bf00      	nop
 8006128:	bf00      	nop
 800612a:	e7fd      	b.n	8006128 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	2b02      	cmp	r3, #2
 8006130:	d103      	bne.n	800613a <xQueueGenericSend+0x72>
 8006132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006136:	2b01      	cmp	r3, #1
 8006138:	d101      	bne.n	800613e <xQueueGenericSend+0x76>
 800613a:	2301      	movs	r3, #1
 800613c:	e000      	b.n	8006140 <xQueueGenericSend+0x78>
 800613e:	2300      	movs	r3, #0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10b      	bne.n	800615c <xQueueGenericSend+0x94>
	__asm volatile
 8006144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006148:	f383 8811 	msr	BASEPRI, r3
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	623b      	str	r3, [r7, #32]
}
 8006156:	bf00      	nop
 8006158:	bf00      	nop
 800615a:	e7fd      	b.n	8006158 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800615c:	f001 f9ce 	bl	80074fc <xTaskGetSchedulerState>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d102      	bne.n	800616c <xQueueGenericSend+0xa4>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d101      	bne.n	8006170 <xQueueGenericSend+0xa8>
 800616c:	2301      	movs	r3, #1
 800616e:	e000      	b.n	8006172 <xQueueGenericSend+0xaa>
 8006170:	2300      	movs	r3, #0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10b      	bne.n	800618e <xQueueGenericSend+0xc6>
	__asm volatile
 8006176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800617a:	f383 8811 	msr	BASEPRI, r3
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	61fb      	str	r3, [r7, #28]
}
 8006188:	bf00      	nop
 800618a:	bf00      	nop
 800618c:	e7fd      	b.n	800618a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800618e:	f001 ff23 	bl	8007fd8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006194:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800619a:	429a      	cmp	r2, r3
 800619c:	d302      	bcc.n	80061a4 <xQueueGenericSend+0xdc>
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d129      	bne.n	80061f8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	68b9      	ldr	r1, [r7, #8]
 80061a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061aa:	f000 fa0f 	bl	80065cc <prvCopyDataToQueue>
 80061ae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d010      	beq.n	80061da <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ba:	3324      	adds	r3, #36	@ 0x24
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 ffdd 	bl	800717c <xTaskRemoveFromEventList>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d013      	beq.n	80061f0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80061c8:	4b3f      	ldr	r3, [pc, #252]	@ (80062c8 <xQueueGenericSend+0x200>)
 80061ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061ce:	601a      	str	r2, [r3, #0]
 80061d0:	f3bf 8f4f 	dsb	sy
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	e00a      	b.n	80061f0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80061da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d007      	beq.n	80061f0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80061e0:	4b39      	ldr	r3, [pc, #228]	@ (80062c8 <xQueueGenericSend+0x200>)
 80061e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061e6:	601a      	str	r2, [r3, #0]
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80061f0:	f001 ff24 	bl	800803c <vPortExitCritical>
				return pdPASS;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e063      	b.n	80062c0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d103      	bne.n	8006206 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061fe:	f001 ff1d 	bl	800803c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006202:	2300      	movs	r3, #0
 8006204:	e05c      	b.n	80062c0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006208:	2b00      	cmp	r3, #0
 800620a:	d106      	bne.n	800621a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800620c:	f107 0314 	add.w	r3, r7, #20
 8006210:	4618      	mov	r0, r3
 8006212:	f001 f817 	bl	8007244 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006216:	2301      	movs	r3, #1
 8006218:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800621a:	f001 ff0f 	bl	800803c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800621e:	f000 fd87 	bl	8006d30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006222:	f001 fed9 	bl	8007fd8 <vPortEnterCritical>
 8006226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006228:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800622c:	b25b      	sxtb	r3, r3
 800622e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006232:	d103      	bne.n	800623c <xQueueGenericSend+0x174>
 8006234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800623c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006242:	b25b      	sxtb	r3, r3
 8006244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006248:	d103      	bne.n	8006252 <xQueueGenericSend+0x18a>
 800624a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006252:	f001 fef3 	bl	800803c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006256:	1d3a      	adds	r2, r7, #4
 8006258:	f107 0314 	add.w	r3, r7, #20
 800625c:	4611      	mov	r1, r2
 800625e:	4618      	mov	r0, r3
 8006260:	f001 f806 	bl	8007270 <xTaskCheckForTimeOut>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d124      	bne.n	80062b4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800626a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800626c:	f000 faa6 	bl	80067bc <prvIsQueueFull>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d018      	beq.n	80062a8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006278:	3310      	adds	r3, #16
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	4611      	mov	r1, r2
 800627e:	4618      	mov	r0, r3
 8006280:	f000 ff2a 	bl	80070d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006284:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006286:	f000 fa31 	bl	80066ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800628a:	f000 fd5f 	bl	8006d4c <xTaskResumeAll>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	f47f af7c 	bne.w	800618e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006296:	4b0c      	ldr	r3, [pc, #48]	@ (80062c8 <xQueueGenericSend+0x200>)
 8006298:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	f3bf 8f6f 	isb	sy
 80062a6:	e772      	b.n	800618e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80062a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062aa:	f000 fa1f 	bl	80066ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062ae:	f000 fd4d 	bl	8006d4c <xTaskResumeAll>
 80062b2:	e76c      	b.n	800618e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80062b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062b6:	f000 fa19 	bl	80066ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062ba:	f000 fd47 	bl	8006d4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80062be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3738      	adds	r7, #56	@ 0x38
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	e000ed04 	.word	0xe000ed04

080062cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b090      	sub	sp, #64	@ 0x40
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
 80062d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80062de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10b      	bne.n	80062fc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80062e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e8:	f383 8811 	msr	BASEPRI, r3
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	f3bf 8f4f 	dsb	sy
 80062f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80062f6:	bf00      	nop
 80062f8:	bf00      	nop
 80062fa:	e7fd      	b.n	80062f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d103      	bne.n	800630a <xQueueGenericSendFromISR+0x3e>
 8006302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006306:	2b00      	cmp	r3, #0
 8006308:	d101      	bne.n	800630e <xQueueGenericSendFromISR+0x42>
 800630a:	2301      	movs	r3, #1
 800630c:	e000      	b.n	8006310 <xQueueGenericSendFromISR+0x44>
 800630e:	2300      	movs	r3, #0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d10b      	bne.n	800632c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006326:	bf00      	nop
 8006328:	bf00      	nop
 800632a:	e7fd      	b.n	8006328 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	2b02      	cmp	r3, #2
 8006330:	d103      	bne.n	800633a <xQueueGenericSendFromISR+0x6e>
 8006332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006336:	2b01      	cmp	r3, #1
 8006338:	d101      	bne.n	800633e <xQueueGenericSendFromISR+0x72>
 800633a:	2301      	movs	r3, #1
 800633c:	e000      	b.n	8006340 <xQueueGenericSendFromISR+0x74>
 800633e:	2300      	movs	r3, #0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10b      	bne.n	800635c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006348:	f383 8811 	msr	BASEPRI, r3
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	623b      	str	r3, [r7, #32]
}
 8006356:	bf00      	nop
 8006358:	bf00      	nop
 800635a:	e7fd      	b.n	8006358 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800635c:	f001 ff1c 	bl	8008198 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006360:	f3ef 8211 	mrs	r2, BASEPRI
 8006364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006368:	f383 8811 	msr	BASEPRI, r3
 800636c:	f3bf 8f6f 	isb	sy
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	61fa      	str	r2, [r7, #28]
 8006376:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006378:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800637a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800637c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800637e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006384:	429a      	cmp	r2, r3
 8006386:	d302      	bcc.n	800638e <xQueueGenericSendFromISR+0xc2>
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	2b02      	cmp	r3, #2
 800638c:	d12f      	bne.n	80063ee <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800638e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006390:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006394:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800639a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800639c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	68b9      	ldr	r1, [r7, #8]
 80063a2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80063a4:	f000 f912 	bl	80065cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80063a8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80063ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b0:	d112      	bne.n	80063d8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d016      	beq.n	80063e8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063bc:	3324      	adds	r3, #36	@ 0x24
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 fedc 	bl	800717c <xTaskRemoveFromEventList>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00e      	beq.n	80063e8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00b      	beq.n	80063e8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	e007      	b.n	80063e8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80063d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80063dc:	3301      	adds	r3, #1
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	b25a      	sxtb	r2, r3
 80063e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80063e8:	2301      	movs	r3, #1
 80063ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80063ec:	e001      	b.n	80063f2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80063ee:	2300      	movs	r3, #0
 80063f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063f4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80063fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006400:	4618      	mov	r0, r3
 8006402:	3740      	adds	r7, #64	@ 0x40
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b08c      	sub	sp, #48	@ 0x30
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006414:	2300      	movs	r3, #0
 8006416:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800641c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10b      	bne.n	800643a <xQueueReceive+0x32>
	__asm volatile
 8006422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006426:	f383 8811 	msr	BASEPRI, r3
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	623b      	str	r3, [r7, #32]
}
 8006434:	bf00      	nop
 8006436:	bf00      	nop
 8006438:	e7fd      	b.n	8006436 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d103      	bne.n	8006448 <xQueueReceive+0x40>
 8006440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <xQueueReceive+0x44>
 8006448:	2301      	movs	r3, #1
 800644a:	e000      	b.n	800644e <xQueueReceive+0x46>
 800644c:	2300      	movs	r3, #0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10b      	bne.n	800646a <xQueueReceive+0x62>
	__asm volatile
 8006452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006456:	f383 8811 	msr	BASEPRI, r3
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	61fb      	str	r3, [r7, #28]
}
 8006464:	bf00      	nop
 8006466:	bf00      	nop
 8006468:	e7fd      	b.n	8006466 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800646a:	f001 f847 	bl	80074fc <xTaskGetSchedulerState>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d102      	bne.n	800647a <xQueueReceive+0x72>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <xQueueReceive+0x76>
 800647a:	2301      	movs	r3, #1
 800647c:	e000      	b.n	8006480 <xQueueReceive+0x78>
 800647e:	2300      	movs	r3, #0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10b      	bne.n	800649c <xQueueReceive+0x94>
	__asm volatile
 8006484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	61bb      	str	r3, [r7, #24]
}
 8006496:	bf00      	nop
 8006498:	bf00      	nop
 800649a:	e7fd      	b.n	8006498 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800649c:	f001 fd9c 	bl	8007fd8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d01f      	beq.n	80064ec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80064ac:	68b9      	ldr	r1, [r7, #8]
 80064ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064b0:	f000 f8f6 	bl	80066a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80064b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b6:	1e5a      	subs	r2, r3, #1
 80064b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00f      	beq.n	80064e4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c6:	3310      	adds	r3, #16
 80064c8:	4618      	mov	r0, r3
 80064ca:	f000 fe57 	bl	800717c <xTaskRemoveFromEventList>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d007      	beq.n	80064e4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80064d4:	4b3c      	ldr	r3, [pc, #240]	@ (80065c8 <xQueueReceive+0x1c0>)
 80064d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064da:	601a      	str	r2, [r3, #0]
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80064e4:	f001 fdaa 	bl	800803c <vPortExitCritical>
				return pdPASS;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e069      	b.n	80065c0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d103      	bne.n	80064fa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064f2:	f001 fda3 	bl	800803c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80064f6:	2300      	movs	r3, #0
 80064f8:	e062      	b.n	80065c0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d106      	bne.n	800650e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006500:	f107 0310 	add.w	r3, r7, #16
 8006504:	4618      	mov	r0, r3
 8006506:	f000 fe9d 	bl	8007244 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800650a:	2301      	movs	r3, #1
 800650c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800650e:	f001 fd95 	bl	800803c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006512:	f000 fc0d 	bl	8006d30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006516:	f001 fd5f 	bl	8007fd8 <vPortEnterCritical>
 800651a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800651c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006520:	b25b      	sxtb	r3, r3
 8006522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006526:	d103      	bne.n	8006530 <xQueueReceive+0x128>
 8006528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006532:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006536:	b25b      	sxtb	r3, r3
 8006538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800653c:	d103      	bne.n	8006546 <xQueueReceive+0x13e>
 800653e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006540:	2200      	movs	r2, #0
 8006542:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006546:	f001 fd79 	bl	800803c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800654a:	1d3a      	adds	r2, r7, #4
 800654c:	f107 0310 	add.w	r3, r7, #16
 8006550:	4611      	mov	r1, r2
 8006552:	4618      	mov	r0, r3
 8006554:	f000 fe8c 	bl	8007270 <xTaskCheckForTimeOut>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d123      	bne.n	80065a6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800655e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006560:	f000 f916 	bl	8006790 <prvIsQueueEmpty>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d017      	beq.n	800659a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800656a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800656c:	3324      	adds	r3, #36	@ 0x24
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	4611      	mov	r1, r2
 8006572:	4618      	mov	r0, r3
 8006574:	f000 fdb0 	bl	80070d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006578:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800657a:	f000 f8b7 	bl	80066ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800657e:	f000 fbe5 	bl	8006d4c <xTaskResumeAll>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d189      	bne.n	800649c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006588:	4b0f      	ldr	r3, [pc, #60]	@ (80065c8 <xQueueReceive+0x1c0>)
 800658a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800658e:	601a      	str	r2, [r3, #0]
 8006590:	f3bf 8f4f 	dsb	sy
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	e780      	b.n	800649c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800659a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800659c:	f000 f8a6 	bl	80066ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065a0:	f000 fbd4 	bl	8006d4c <xTaskResumeAll>
 80065a4:	e77a      	b.n	800649c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80065a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065a8:	f000 f8a0 	bl	80066ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065ac:	f000 fbce 	bl	8006d4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065b2:	f000 f8ed 	bl	8006790 <prvIsQueueEmpty>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f43f af6f 	beq.w	800649c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80065be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3730      	adds	r7, #48	@ 0x30
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	e000ed04 	.word	0xe000ed04

080065cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80065d8:	2300      	movs	r3, #0
 80065da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10d      	bne.n	8006606 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d14d      	bne.n	800668e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f000 ff9e 	bl	8007538 <xTaskPriorityDisinherit>
 80065fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	609a      	str	r2, [r3, #8]
 8006604:	e043      	b.n	800668e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d119      	bne.n	8006640 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6858      	ldr	r0, [r3, #4]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006614:	461a      	mov	r2, r3
 8006616:	68b9      	ldr	r1, [r7, #8]
 8006618:	f002 fdff 	bl	800921a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006624:	441a      	add	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	429a      	cmp	r2, r3
 8006634:	d32b      	bcc.n	800668e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	605a      	str	r2, [r3, #4]
 800663e:	e026      	b.n	800668e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	68d8      	ldr	r0, [r3, #12]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006648:	461a      	mov	r2, r3
 800664a:	68b9      	ldr	r1, [r7, #8]
 800664c:	f002 fde5 	bl	800921a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	68da      	ldr	r2, [r3, #12]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006658:	425b      	negs	r3, r3
 800665a:	441a      	add	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	68da      	ldr	r2, [r3, #12]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	429a      	cmp	r2, r3
 800666a:	d207      	bcs.n	800667c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	689a      	ldr	r2, [r3, #8]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006674:	425b      	negs	r3, r3
 8006676:	441a      	add	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b02      	cmp	r3, #2
 8006680:	d105      	bne.n	800668e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d002      	beq.n	800668e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	3b01      	subs	r3, #1
 800668c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	1c5a      	adds	r2, r3, #1
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006696:	697b      	ldr	r3, [r7, #20]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3718      	adds	r7, #24
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d018      	beq.n	80066e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68da      	ldr	r2, [r3, #12]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ba:	441a      	add	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	68da      	ldr	r2, [r3, #12]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d303      	bcc.n	80066d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	68d9      	ldr	r1, [r3, #12]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066dc:	461a      	mov	r2, r3
 80066de:	6838      	ldr	r0, [r7, #0]
 80066e0:	f002 fd9b 	bl	800921a <memcpy>
	}
}
 80066e4:	bf00      	nop
 80066e6:	3708      	adds	r7, #8
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80066f4:	f001 fc70 	bl	8007fd8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80066fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006700:	e011      	b.n	8006726 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006706:	2b00      	cmp	r3, #0
 8006708:	d012      	beq.n	8006730 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	3324      	adds	r3, #36	@ 0x24
 800670e:	4618      	mov	r0, r3
 8006710:	f000 fd34 	bl	800717c <xTaskRemoveFromEventList>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800671a:	f000 fe0d 	bl	8007338 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800671e:	7bfb      	ldrb	r3, [r7, #15]
 8006720:	3b01      	subs	r3, #1
 8006722:	b2db      	uxtb	r3, r3
 8006724:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800672a:	2b00      	cmp	r3, #0
 800672c:	dce9      	bgt.n	8006702 <prvUnlockQueue+0x16>
 800672e:	e000      	b.n	8006732 <prvUnlockQueue+0x46>
					break;
 8006730:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	22ff      	movs	r2, #255	@ 0xff
 8006736:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800673a:	f001 fc7f 	bl	800803c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800673e:	f001 fc4b 	bl	8007fd8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006748:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800674a:	e011      	b.n	8006770 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d012      	beq.n	800677a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	3310      	adds	r3, #16
 8006758:	4618      	mov	r0, r3
 800675a:	f000 fd0f 	bl	800717c <xTaskRemoveFromEventList>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d001      	beq.n	8006768 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006764:	f000 fde8 	bl	8007338 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006768:	7bbb      	ldrb	r3, [r7, #14]
 800676a:	3b01      	subs	r3, #1
 800676c:	b2db      	uxtb	r3, r3
 800676e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006770:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006774:	2b00      	cmp	r3, #0
 8006776:	dce9      	bgt.n	800674c <prvUnlockQueue+0x60>
 8006778:	e000      	b.n	800677c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800677a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	22ff      	movs	r2, #255	@ 0xff
 8006780:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006784:	f001 fc5a 	bl	800803c <vPortExitCritical>
}
 8006788:	bf00      	nop
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006798:	f001 fc1e 	bl	8007fd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d102      	bne.n	80067aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80067a4:	2301      	movs	r3, #1
 80067a6:	60fb      	str	r3, [r7, #12]
 80067a8:	e001      	b.n	80067ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80067aa:	2300      	movs	r3, #0
 80067ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067ae:	f001 fc45 	bl	800803c <vPortExitCritical>

	return xReturn;
 80067b2:	68fb      	ldr	r3, [r7, #12]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067c4:	f001 fc08 	bl	8007fd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d102      	bne.n	80067da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80067d4:	2301      	movs	r3, #1
 80067d6:	60fb      	str	r3, [r7, #12]
 80067d8:	e001      	b.n	80067de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80067da:	2300      	movs	r3, #0
 80067dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067de:	f001 fc2d 	bl	800803c <vPortExitCritical>

	return xReturn;
 80067e2:	68fb      	ldr	r3, [r7, #12]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067f6:	2300      	movs	r3, #0
 80067f8:	60fb      	str	r3, [r7, #12]
 80067fa:	e014      	b.n	8006826 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80067fc:	4a0f      	ldr	r2, [pc, #60]	@ (800683c <vQueueAddToRegistry+0x50>)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10b      	bne.n	8006820 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006808:	490c      	ldr	r1, [pc, #48]	@ (800683c <vQueueAddToRegistry+0x50>)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006812:	4a0a      	ldr	r2, [pc, #40]	@ (800683c <vQueueAddToRegistry+0x50>)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	00db      	lsls	r3, r3, #3
 8006818:	4413      	add	r3, r2
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800681e:	e006      	b.n	800682e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	3301      	adds	r3, #1
 8006824:	60fb      	str	r3, [r7, #12]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2b07      	cmp	r3, #7
 800682a:	d9e7      	bls.n	80067fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800682c:	bf00      	nop
 800682e:	bf00      	nop
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	20000b1c 	.word	0x20000b1c

08006840 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006850:	f001 fbc2 	bl	8007fd8 <vPortEnterCritical>
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800685a:	b25b      	sxtb	r3, r3
 800685c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006860:	d103      	bne.n	800686a <vQueueWaitForMessageRestricted+0x2a>
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006870:	b25b      	sxtb	r3, r3
 8006872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006876:	d103      	bne.n	8006880 <vQueueWaitForMessageRestricted+0x40>
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006880:	f001 fbdc 	bl	800803c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006888:	2b00      	cmp	r3, #0
 800688a:	d106      	bne.n	800689a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	3324      	adds	r3, #36	@ 0x24
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	68b9      	ldr	r1, [r7, #8]
 8006894:	4618      	mov	r0, r3
 8006896:	f000 fc45 	bl	8007124 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800689a:	6978      	ldr	r0, [r7, #20]
 800689c:	f7ff ff26 	bl	80066ec <prvUnlockQueue>
	}
 80068a0:	bf00      	nop
 80068a2:	3718      	adds	r7, #24
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b08e      	sub	sp, #56	@ 0x38
 80068ac:	af04      	add	r7, sp, #16
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
 80068b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80068b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10b      	bne.n	80068d4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80068bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c0:	f383 8811 	msr	BASEPRI, r3
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	623b      	str	r3, [r7, #32]
}
 80068ce:	bf00      	nop
 80068d0:	bf00      	nop
 80068d2:	e7fd      	b.n	80068d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80068d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10b      	bne.n	80068f2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80068da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	61fb      	str	r3, [r7, #28]
}
 80068ec:	bf00      	nop
 80068ee:	bf00      	nop
 80068f0:	e7fd      	b.n	80068ee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80068f2:	235c      	movs	r3, #92	@ 0x5c
 80068f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	2b5c      	cmp	r3, #92	@ 0x5c
 80068fa:	d00b      	beq.n	8006914 <xTaskCreateStatic+0x6c>
	__asm volatile
 80068fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	61bb      	str	r3, [r7, #24]
}
 800690e:	bf00      	nop
 8006910:	bf00      	nop
 8006912:	e7fd      	b.n	8006910 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006914:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006918:	2b00      	cmp	r3, #0
 800691a:	d01e      	beq.n	800695a <xTaskCreateStatic+0xb2>
 800691c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800691e:	2b00      	cmp	r3, #0
 8006920:	d01b      	beq.n	800695a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006924:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006928:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800692a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800692c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692e:	2202      	movs	r2, #2
 8006930:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006934:	2300      	movs	r3, #0
 8006936:	9303      	str	r3, [sp, #12]
 8006938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693a:	9302      	str	r3, [sp, #8]
 800693c:	f107 0314 	add.w	r3, r7, #20
 8006940:	9301      	str	r3, [sp, #4]
 8006942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	68b9      	ldr	r1, [r7, #8]
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f000 f850 	bl	80069f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006952:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006954:	f000 f8de 	bl	8006b14 <prvAddNewTaskToReadyList>
 8006958:	e001      	b.n	800695e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800695a:	2300      	movs	r3, #0
 800695c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800695e:	697b      	ldr	r3, [r7, #20]
	}
 8006960:	4618      	mov	r0, r3
 8006962:	3728      	adds	r7, #40	@ 0x28
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006968:	b580      	push	{r7, lr}
 800696a:	b08c      	sub	sp, #48	@ 0x30
 800696c:	af04      	add	r7, sp, #16
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	603b      	str	r3, [r7, #0]
 8006974:	4613      	mov	r3, r2
 8006976:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006978:	88fb      	ldrh	r3, [r7, #6]
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4618      	mov	r0, r3
 800697e:	f001 fc4d 	bl	800821c <pvPortMalloc>
 8006982:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00e      	beq.n	80069a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800698a:	205c      	movs	r0, #92	@ 0x5c
 800698c:	f001 fc46 	bl	800821c <pvPortMalloc>
 8006990:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d003      	beq.n	80069a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	631a      	str	r2, [r3, #48]	@ 0x30
 800699e:	e005      	b.n	80069ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80069a0:	6978      	ldr	r0, [r7, #20]
 80069a2:	f001 fd09 	bl	80083b8 <vPortFree>
 80069a6:	e001      	b.n	80069ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80069a8:	2300      	movs	r3, #0
 80069aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d017      	beq.n	80069e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80069ba:	88fa      	ldrh	r2, [r7, #6]
 80069bc:	2300      	movs	r3, #0
 80069be:	9303      	str	r3, [sp, #12]
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	9302      	str	r3, [sp, #8]
 80069c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069c6:	9301      	str	r3, [sp, #4]
 80069c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ca:	9300      	str	r3, [sp, #0]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	68b9      	ldr	r1, [r7, #8]
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f000 f80e 	bl	80069f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069d6:	69f8      	ldr	r0, [r7, #28]
 80069d8:	f000 f89c 	bl	8006b14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80069dc:	2301      	movs	r3, #1
 80069de:	61bb      	str	r3, [r7, #24]
 80069e0:	e002      	b.n	80069e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80069e2:	f04f 33ff 	mov.w	r3, #4294967295
 80069e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80069e8:	69bb      	ldr	r3, [r7, #24]
	}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3720      	adds	r7, #32
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b088      	sub	sp, #32
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	60f8      	str	r0, [r7, #12]
 80069fa:	60b9      	str	r1, [r7, #8]
 80069fc:	607a      	str	r2, [r7, #4]
 80069fe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a02:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	461a      	mov	r2, r3
 8006a0a:	21a5      	movs	r1, #165	@ 0xa5
 8006a0c:	f002 fb85 	bl	800911a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4413      	add	r3, r2
 8006a20:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	f023 0307 	bic.w	r3, r3, #7
 8006a28:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	f003 0307 	and.w	r3, r3, #7
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00b      	beq.n	8006a4c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a38:	f383 8811 	msr	BASEPRI, r3
 8006a3c:	f3bf 8f6f 	isb	sy
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	617b      	str	r3, [r7, #20]
}
 8006a46:	bf00      	nop
 8006a48:	bf00      	nop
 8006a4a:	e7fd      	b.n	8006a48 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d01f      	beq.n	8006a92 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a52:	2300      	movs	r3, #0
 8006a54:	61fb      	str	r3, [r7, #28]
 8006a56:	e012      	b.n	8006a7e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	7819      	ldrb	r1, [r3, #0]
 8006a60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	4413      	add	r3, r2
 8006a66:	3334      	adds	r3, #52	@ 0x34
 8006a68:	460a      	mov	r2, r1
 8006a6a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	4413      	add	r3, r2
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d006      	beq.n	8006a86 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	61fb      	str	r3, [r7, #28]
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	2b0f      	cmp	r3, #15
 8006a82:	d9e9      	bls.n	8006a58 <prvInitialiseNewTask+0x66>
 8006a84:	e000      	b.n	8006a88 <prvInitialiseNewTask+0x96>
			{
				break;
 8006a86:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a90:	e003      	b.n	8006a9a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a9c:	2b37      	cmp	r3, #55	@ 0x37
 8006a9e:	d901      	bls.n	8006aa4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006aa0:	2337      	movs	r3, #55	@ 0x37
 8006aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006aa8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006aae:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab8:	3304      	adds	r3, #4
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7ff f92a 	bl	8005d14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac2:	3318      	adds	r3, #24
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7ff f925 	bl	8005d14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006acc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ace:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006adc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ade:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	68f9      	ldr	r1, [r7, #12]
 8006af2:	69b8      	ldr	r0, [r7, #24]
 8006af4:	f001 f93e 	bl	8007d74 <pxPortInitialiseStack>
 8006af8:	4602      	mov	r2, r0
 8006afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006afc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d002      	beq.n	8006b0a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b0a:	bf00      	nop
 8006b0c:	3720      	adds	r7, #32
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
	...

08006b14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b1c:	f001 fa5c 	bl	8007fd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b20:	4b2d      	ldr	r3, [pc, #180]	@ (8006bd8 <prvAddNewTaskToReadyList+0xc4>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3301      	adds	r3, #1
 8006b26:	4a2c      	ldr	r2, [pc, #176]	@ (8006bd8 <prvAddNewTaskToReadyList+0xc4>)
 8006b28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b2a:	4b2c      	ldr	r3, [pc, #176]	@ (8006bdc <prvAddNewTaskToReadyList+0xc8>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d109      	bne.n	8006b46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006b32:	4a2a      	ldr	r2, [pc, #168]	@ (8006bdc <prvAddNewTaskToReadyList+0xc8>)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006b38:	4b27      	ldr	r3, [pc, #156]	@ (8006bd8 <prvAddNewTaskToReadyList+0xc4>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d110      	bne.n	8006b62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006b40:	f000 fc1e 	bl	8007380 <prvInitialiseTaskLists>
 8006b44:	e00d      	b.n	8006b62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006b46:	4b26      	ldr	r3, [pc, #152]	@ (8006be0 <prvAddNewTaskToReadyList+0xcc>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d109      	bne.n	8006b62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006b4e:	4b23      	ldr	r3, [pc, #140]	@ (8006bdc <prvAddNewTaskToReadyList+0xc8>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d802      	bhi.n	8006b62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006b5c:	4a1f      	ldr	r2, [pc, #124]	@ (8006bdc <prvAddNewTaskToReadyList+0xc8>)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006b62:	4b20      	ldr	r3, [pc, #128]	@ (8006be4 <prvAddNewTaskToReadyList+0xd0>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	3301      	adds	r3, #1
 8006b68:	4a1e      	ldr	r2, [pc, #120]	@ (8006be4 <prvAddNewTaskToReadyList+0xd0>)
 8006b6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8006be4 <prvAddNewTaskToReadyList+0xd0>)
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b78:	4b1b      	ldr	r3, [pc, #108]	@ (8006be8 <prvAddNewTaskToReadyList+0xd4>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d903      	bls.n	8006b88 <prvAddNewTaskToReadyList+0x74>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b84:	4a18      	ldr	r2, [pc, #96]	@ (8006be8 <prvAddNewTaskToReadyList+0xd4>)
 8006b86:	6013      	str	r3, [r2, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4413      	add	r3, r2
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4a15      	ldr	r2, [pc, #84]	@ (8006bec <prvAddNewTaskToReadyList+0xd8>)
 8006b96:	441a      	add	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	3304      	adds	r3, #4
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	4610      	mov	r0, r2
 8006ba0:	f7ff f8c5 	bl	8005d2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ba4:	f001 fa4a 	bl	800803c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8006be0 <prvAddNewTaskToReadyList+0xcc>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00e      	beq.n	8006bce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8006bdc <prvAddNewTaskToReadyList+0xc8>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d207      	bcs.n	8006bce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8006bf0 <prvAddNewTaskToReadyList+0xdc>)
 8006bc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bc4:	601a      	str	r2, [r3, #0]
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bce:	bf00      	nop
 8006bd0:	3708      	adds	r7, #8
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	20001030 	.word	0x20001030
 8006bdc:	20000b5c 	.word	0x20000b5c
 8006be0:	2000103c 	.word	0x2000103c
 8006be4:	2000104c 	.word	0x2000104c
 8006be8:	20001038 	.word	0x20001038
 8006bec:	20000b60 	.word	0x20000b60
 8006bf0:	e000ed04 	.word	0xe000ed04

08006bf4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d018      	beq.n	8006c38 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c06:	4b14      	ldr	r3, [pc, #80]	@ (8006c58 <vTaskDelay+0x64>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00b      	beq.n	8006c26 <vTaskDelay+0x32>
	__asm volatile
 8006c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	60bb      	str	r3, [r7, #8]
}
 8006c20:	bf00      	nop
 8006c22:	bf00      	nop
 8006c24:	e7fd      	b.n	8006c22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006c26:	f000 f883 	bl	8006d30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 fcf3 	bl	8007618 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006c32:	f000 f88b 	bl	8006d4c <xTaskResumeAll>
 8006c36:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d107      	bne.n	8006c4e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006c3e:	4b07      	ldr	r3, [pc, #28]	@ (8006c5c <vTaskDelay+0x68>)
 8006c40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c44:	601a      	str	r2, [r3, #0]
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c4e:	bf00      	nop
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	20001058 	.word	0x20001058
 8006c5c:	e000ed04 	.word	0xe000ed04

08006c60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b08a      	sub	sp, #40	@ 0x28
 8006c64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006c66:	2300      	movs	r3, #0
 8006c68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006c6e:	463a      	mov	r2, r7
 8006c70:	1d39      	adds	r1, r7, #4
 8006c72:	f107 0308 	add.w	r3, r7, #8
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7fe fff8 	bl	8005c6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c7c:	6839      	ldr	r1, [r7, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	68ba      	ldr	r2, [r7, #8]
 8006c82:	9202      	str	r2, [sp, #8]
 8006c84:	9301      	str	r3, [sp, #4]
 8006c86:	2300      	movs	r3, #0
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	460a      	mov	r2, r1
 8006c8e:	4922      	ldr	r1, [pc, #136]	@ (8006d18 <vTaskStartScheduler+0xb8>)
 8006c90:	4822      	ldr	r0, [pc, #136]	@ (8006d1c <vTaskStartScheduler+0xbc>)
 8006c92:	f7ff fe09 	bl	80068a8 <xTaskCreateStatic>
 8006c96:	4603      	mov	r3, r0
 8006c98:	4a21      	ldr	r2, [pc, #132]	@ (8006d20 <vTaskStartScheduler+0xc0>)
 8006c9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c9c:	4b20      	ldr	r3, [pc, #128]	@ (8006d20 <vTaskStartScheduler+0xc0>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d002      	beq.n	8006caa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	617b      	str	r3, [r7, #20]
 8006ca8:	e001      	b.n	8006cae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006caa:	2300      	movs	r3, #0
 8006cac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d102      	bne.n	8006cba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006cb4:	f000 fd04 	bl	80076c0 <xTimerCreateTimerTask>
 8006cb8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d116      	bne.n	8006cee <vTaskStartScheduler+0x8e>
	__asm volatile
 8006cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	613b      	str	r3, [r7, #16]
}
 8006cd2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006cd4:	4b13      	ldr	r3, [pc, #76]	@ (8006d24 <vTaskStartScheduler+0xc4>)
 8006cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cda:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006cdc:	4b12      	ldr	r3, [pc, #72]	@ (8006d28 <vTaskStartScheduler+0xc8>)
 8006cde:	2201      	movs	r2, #1
 8006ce0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006ce2:	4b12      	ldr	r3, [pc, #72]	@ (8006d2c <vTaskStartScheduler+0xcc>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006ce8:	f001 f8d2 	bl	8007e90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006cec:	e00f      	b.n	8006d0e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf4:	d10b      	bne.n	8006d0e <vTaskStartScheduler+0xae>
	__asm volatile
 8006cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	60fb      	str	r3, [r7, #12]
}
 8006d08:	bf00      	nop
 8006d0a:	bf00      	nop
 8006d0c:	e7fd      	b.n	8006d0a <vTaskStartScheduler+0xaa>
}
 8006d0e:	bf00      	nop
 8006d10:	3718      	adds	r7, #24
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	0800b2fc 	.word	0x0800b2fc
 8006d1c:	08007351 	.word	0x08007351
 8006d20:	20001054 	.word	0x20001054
 8006d24:	20001050 	.word	0x20001050
 8006d28:	2000103c 	.word	0x2000103c
 8006d2c:	20001034 	.word	0x20001034

08006d30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006d30:	b480      	push	{r7}
 8006d32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006d34:	4b04      	ldr	r3, [pc, #16]	@ (8006d48 <vTaskSuspendAll+0x18>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	4a03      	ldr	r2, [pc, #12]	@ (8006d48 <vTaskSuspendAll+0x18>)
 8006d3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006d3e:	bf00      	nop
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	20001058 	.word	0x20001058

08006d4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006d52:	2300      	movs	r3, #0
 8006d54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006d56:	2300      	movs	r3, #0
 8006d58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006d5a:	4b42      	ldr	r3, [pc, #264]	@ (8006e64 <xTaskResumeAll+0x118>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10b      	bne.n	8006d7a <xTaskResumeAll+0x2e>
	__asm volatile
 8006d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	603b      	str	r3, [r7, #0]
}
 8006d74:	bf00      	nop
 8006d76:	bf00      	nop
 8006d78:	e7fd      	b.n	8006d76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d7a:	f001 f92d 	bl	8007fd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d7e:	4b39      	ldr	r3, [pc, #228]	@ (8006e64 <xTaskResumeAll+0x118>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	3b01      	subs	r3, #1
 8006d84:	4a37      	ldr	r2, [pc, #220]	@ (8006e64 <xTaskResumeAll+0x118>)
 8006d86:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d88:	4b36      	ldr	r3, [pc, #216]	@ (8006e64 <xTaskResumeAll+0x118>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d162      	bne.n	8006e56 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d90:	4b35      	ldr	r3, [pc, #212]	@ (8006e68 <xTaskResumeAll+0x11c>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d05e      	beq.n	8006e56 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d98:	e02f      	b.n	8006dfa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d9a:	4b34      	ldr	r3, [pc, #208]	@ (8006e6c <xTaskResumeAll+0x120>)
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	3318      	adds	r3, #24
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7ff f81e 	bl	8005de8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	3304      	adds	r3, #4
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7ff f819 	bl	8005de8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dba:	4b2d      	ldr	r3, [pc, #180]	@ (8006e70 <xTaskResumeAll+0x124>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d903      	bls.n	8006dca <xTaskResumeAll+0x7e>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc6:	4a2a      	ldr	r2, [pc, #168]	@ (8006e70 <xTaskResumeAll+0x124>)
 8006dc8:	6013      	str	r3, [r2, #0]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dce:	4613      	mov	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4413      	add	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4a27      	ldr	r2, [pc, #156]	@ (8006e74 <xTaskResumeAll+0x128>)
 8006dd8:	441a      	add	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	3304      	adds	r3, #4
 8006dde:	4619      	mov	r1, r3
 8006de0:	4610      	mov	r0, r2
 8006de2:	f7fe ffa4 	bl	8005d2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dea:	4b23      	ldr	r3, [pc, #140]	@ (8006e78 <xTaskResumeAll+0x12c>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d302      	bcc.n	8006dfa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006df4:	4b21      	ldr	r3, [pc, #132]	@ (8006e7c <xTaskResumeAll+0x130>)
 8006df6:	2201      	movs	r2, #1
 8006df8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006dfa:	4b1c      	ldr	r3, [pc, #112]	@ (8006e6c <xTaskResumeAll+0x120>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1cb      	bne.n	8006d9a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d001      	beq.n	8006e0c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006e08:	f000 fb58 	bl	80074bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8006e80 <xTaskResumeAll+0x134>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d010      	beq.n	8006e3a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006e18:	f000 f846 	bl	8006ea8 <xTaskIncrementTick>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d002      	beq.n	8006e28 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006e22:	4b16      	ldr	r3, [pc, #88]	@ (8006e7c <xTaskResumeAll+0x130>)
 8006e24:	2201      	movs	r2, #1
 8006e26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1f1      	bne.n	8006e18 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006e34:	4b12      	ldr	r3, [pc, #72]	@ (8006e80 <xTaskResumeAll+0x134>)
 8006e36:	2200      	movs	r2, #0
 8006e38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006e3a:	4b10      	ldr	r3, [pc, #64]	@ (8006e7c <xTaskResumeAll+0x130>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d009      	beq.n	8006e56 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006e42:	2301      	movs	r3, #1
 8006e44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006e46:	4b0f      	ldr	r3, [pc, #60]	@ (8006e84 <xTaskResumeAll+0x138>)
 8006e48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	f3bf 8f4f 	dsb	sy
 8006e52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e56:	f001 f8f1 	bl	800803c <vPortExitCritical>

	return xAlreadyYielded;
 8006e5a:	68bb      	ldr	r3, [r7, #8]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3710      	adds	r7, #16
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	20001058 	.word	0x20001058
 8006e68:	20001030 	.word	0x20001030
 8006e6c:	20000ff0 	.word	0x20000ff0
 8006e70:	20001038 	.word	0x20001038
 8006e74:	20000b60 	.word	0x20000b60
 8006e78:	20000b5c 	.word	0x20000b5c
 8006e7c:	20001044 	.word	0x20001044
 8006e80:	20001040 	.word	0x20001040
 8006e84:	e000ed04 	.word	0xe000ed04

08006e88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006e8e:	4b05      	ldr	r3, [pc, #20]	@ (8006ea4 <xTaskGetTickCount+0x1c>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006e94:	687b      	ldr	r3, [r7, #4]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	370c      	adds	r7, #12
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	20001034 	.word	0x20001034

08006ea8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006eb2:	4b4f      	ldr	r3, [pc, #316]	@ (8006ff0 <xTaskIncrementTick+0x148>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f040 8090 	bne.w	8006fdc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ebc:	4b4d      	ldr	r3, [pc, #308]	@ (8006ff4 <xTaskIncrementTick+0x14c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ec4:	4a4b      	ldr	r2, [pc, #300]	@ (8006ff4 <xTaskIncrementTick+0x14c>)
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d121      	bne.n	8006f14 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ed0:	4b49      	ldr	r3, [pc, #292]	@ (8006ff8 <xTaskIncrementTick+0x150>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00b      	beq.n	8006ef2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	603b      	str	r3, [r7, #0]
}
 8006eec:	bf00      	nop
 8006eee:	bf00      	nop
 8006ef0:	e7fd      	b.n	8006eee <xTaskIncrementTick+0x46>
 8006ef2:	4b41      	ldr	r3, [pc, #260]	@ (8006ff8 <xTaskIncrementTick+0x150>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	60fb      	str	r3, [r7, #12]
 8006ef8:	4b40      	ldr	r3, [pc, #256]	@ (8006ffc <xTaskIncrementTick+0x154>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a3e      	ldr	r2, [pc, #248]	@ (8006ff8 <xTaskIncrementTick+0x150>)
 8006efe:	6013      	str	r3, [r2, #0]
 8006f00:	4a3e      	ldr	r2, [pc, #248]	@ (8006ffc <xTaskIncrementTick+0x154>)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6013      	str	r3, [r2, #0]
 8006f06:	4b3e      	ldr	r3, [pc, #248]	@ (8007000 <xTaskIncrementTick+0x158>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	4a3c      	ldr	r2, [pc, #240]	@ (8007000 <xTaskIncrementTick+0x158>)
 8006f0e:	6013      	str	r3, [r2, #0]
 8006f10:	f000 fad4 	bl	80074bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f14:	4b3b      	ldr	r3, [pc, #236]	@ (8007004 <xTaskIncrementTick+0x15c>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	693a      	ldr	r2, [r7, #16]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d349      	bcc.n	8006fb2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f1e:	4b36      	ldr	r3, [pc, #216]	@ (8006ff8 <xTaskIncrementTick+0x150>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d104      	bne.n	8006f32 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f28:	4b36      	ldr	r3, [pc, #216]	@ (8007004 <xTaskIncrementTick+0x15c>)
 8006f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f2e:	601a      	str	r2, [r3, #0]
					break;
 8006f30:	e03f      	b.n	8006fb2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f32:	4b31      	ldr	r3, [pc, #196]	@ (8006ff8 <xTaskIncrementTick+0x150>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006f42:	693a      	ldr	r2, [r7, #16]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d203      	bcs.n	8006f52 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006f4a:	4a2e      	ldr	r2, [pc, #184]	@ (8007004 <xTaskIncrementTick+0x15c>)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006f50:	e02f      	b.n	8006fb2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	3304      	adds	r3, #4
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7fe ff46 	bl	8005de8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d004      	beq.n	8006f6e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	3318      	adds	r3, #24
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7fe ff3d 	bl	8005de8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f72:	4b25      	ldr	r3, [pc, #148]	@ (8007008 <xTaskIncrementTick+0x160>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d903      	bls.n	8006f82 <xTaskIncrementTick+0xda>
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f7e:	4a22      	ldr	r2, [pc, #136]	@ (8007008 <xTaskIncrementTick+0x160>)
 8006f80:	6013      	str	r3, [r2, #0]
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f86:	4613      	mov	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4a1f      	ldr	r2, [pc, #124]	@ (800700c <xTaskIncrementTick+0x164>)
 8006f90:	441a      	add	r2, r3
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	3304      	adds	r3, #4
 8006f96:	4619      	mov	r1, r3
 8006f98:	4610      	mov	r0, r2
 8006f9a:	f7fe fec8 	bl	8005d2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8007010 <xTaskIncrementTick+0x168>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d3b8      	bcc.n	8006f1e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006fac:	2301      	movs	r3, #1
 8006fae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fb0:	e7b5      	b.n	8006f1e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006fb2:	4b17      	ldr	r3, [pc, #92]	@ (8007010 <xTaskIncrementTick+0x168>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fb8:	4914      	ldr	r1, [pc, #80]	@ (800700c <xTaskIncrementTick+0x164>)
 8006fba:	4613      	mov	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	440b      	add	r3, r1
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d901      	bls.n	8006fce <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006fce:	4b11      	ldr	r3, [pc, #68]	@ (8007014 <xTaskIncrementTick+0x16c>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d007      	beq.n	8006fe6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	617b      	str	r3, [r7, #20]
 8006fda:	e004      	b.n	8006fe6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006fdc:	4b0e      	ldr	r3, [pc, #56]	@ (8007018 <xTaskIncrementTick+0x170>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	4a0d      	ldr	r2, [pc, #52]	@ (8007018 <xTaskIncrementTick+0x170>)
 8006fe4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006fe6:	697b      	ldr	r3, [r7, #20]
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3718      	adds	r7, #24
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	20001058 	.word	0x20001058
 8006ff4:	20001034 	.word	0x20001034
 8006ff8:	20000fe8 	.word	0x20000fe8
 8006ffc:	20000fec 	.word	0x20000fec
 8007000:	20001048 	.word	0x20001048
 8007004:	20001050 	.word	0x20001050
 8007008:	20001038 	.word	0x20001038
 800700c:	20000b60 	.word	0x20000b60
 8007010:	20000b5c 	.word	0x20000b5c
 8007014:	20001044 	.word	0x20001044
 8007018:	20001040 	.word	0x20001040

0800701c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007022:	4b28      	ldr	r3, [pc, #160]	@ (80070c4 <vTaskSwitchContext+0xa8>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800702a:	4b27      	ldr	r3, [pc, #156]	@ (80070c8 <vTaskSwitchContext+0xac>)
 800702c:	2201      	movs	r2, #1
 800702e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007030:	e042      	b.n	80070b8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007032:	4b25      	ldr	r3, [pc, #148]	@ (80070c8 <vTaskSwitchContext+0xac>)
 8007034:	2200      	movs	r2, #0
 8007036:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007038:	4b24      	ldr	r3, [pc, #144]	@ (80070cc <vTaskSwitchContext+0xb0>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	60fb      	str	r3, [r7, #12]
 800703e:	e011      	b.n	8007064 <vTaskSwitchContext+0x48>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d10b      	bne.n	800705e <vTaskSwitchContext+0x42>
	__asm volatile
 8007046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800704a:	f383 8811 	msr	BASEPRI, r3
 800704e:	f3bf 8f6f 	isb	sy
 8007052:	f3bf 8f4f 	dsb	sy
 8007056:	607b      	str	r3, [r7, #4]
}
 8007058:	bf00      	nop
 800705a:	bf00      	nop
 800705c:	e7fd      	b.n	800705a <vTaskSwitchContext+0x3e>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	3b01      	subs	r3, #1
 8007062:	60fb      	str	r3, [r7, #12]
 8007064:	491a      	ldr	r1, [pc, #104]	@ (80070d0 <vTaskSwitchContext+0xb4>)
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	4613      	mov	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	4413      	add	r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	440b      	add	r3, r1
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d0e3      	beq.n	8007040 <vTaskSwitchContext+0x24>
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	4613      	mov	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4a13      	ldr	r2, [pc, #76]	@ (80070d0 <vTaskSwitchContext+0xb4>)
 8007084:	4413      	add	r3, r2
 8007086:	60bb      	str	r3, [r7, #8]
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	685a      	ldr	r2, [r3, #4]
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	605a      	str	r2, [r3, #4]
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	3308      	adds	r3, #8
 800709a:	429a      	cmp	r2, r3
 800709c:	d104      	bne.n	80070a8 <vTaskSwitchContext+0x8c>
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	685a      	ldr	r2, [r3, #4]
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	605a      	str	r2, [r3, #4]
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	4a09      	ldr	r2, [pc, #36]	@ (80070d4 <vTaskSwitchContext+0xb8>)
 80070b0:	6013      	str	r3, [r2, #0]
 80070b2:	4a06      	ldr	r2, [pc, #24]	@ (80070cc <vTaskSwitchContext+0xb0>)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6013      	str	r3, [r2, #0]
}
 80070b8:	bf00      	nop
 80070ba:	3714      	adds	r7, #20
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr
 80070c4:	20001058 	.word	0x20001058
 80070c8:	20001044 	.word	0x20001044
 80070cc:	20001038 	.word	0x20001038
 80070d0:	20000b60 	.word	0x20000b60
 80070d4:	20000b5c 	.word	0x20000b5c

080070d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10b      	bne.n	8007100 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80070e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ec:	f383 8811 	msr	BASEPRI, r3
 80070f0:	f3bf 8f6f 	isb	sy
 80070f4:	f3bf 8f4f 	dsb	sy
 80070f8:	60fb      	str	r3, [r7, #12]
}
 80070fa:	bf00      	nop
 80070fc:	bf00      	nop
 80070fe:	e7fd      	b.n	80070fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007100:	4b07      	ldr	r3, [pc, #28]	@ (8007120 <vTaskPlaceOnEventList+0x48>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	3318      	adds	r3, #24
 8007106:	4619      	mov	r1, r3
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f7fe fe34 	bl	8005d76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800710e:	2101      	movs	r1, #1
 8007110:	6838      	ldr	r0, [r7, #0]
 8007112:	f000 fa81 	bl	8007618 <prvAddCurrentTaskToDelayedList>
}
 8007116:	bf00      	nop
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	20000b5c 	.word	0x20000b5c

08007124 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10b      	bne.n	800714e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	617b      	str	r3, [r7, #20]
}
 8007148:	bf00      	nop
 800714a:	bf00      	nop
 800714c:	e7fd      	b.n	800714a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800714e:	4b0a      	ldr	r3, [pc, #40]	@ (8007178 <vTaskPlaceOnEventListRestricted+0x54>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	3318      	adds	r3, #24
 8007154:	4619      	mov	r1, r3
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f7fe fde9 	bl	8005d2e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d002      	beq.n	8007168 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007162:	f04f 33ff 	mov.w	r3, #4294967295
 8007166:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007168:	6879      	ldr	r1, [r7, #4]
 800716a:	68b8      	ldr	r0, [r7, #8]
 800716c:	f000 fa54 	bl	8007618 <prvAddCurrentTaskToDelayedList>
	}
 8007170:	bf00      	nop
 8007172:	3718      	adds	r7, #24
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	20000b5c 	.word	0x20000b5c

0800717c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b086      	sub	sp, #24
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10b      	bne.n	80071aa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	60fb      	str	r3, [r7, #12]
}
 80071a4:	bf00      	nop
 80071a6:	bf00      	nop
 80071a8:	e7fd      	b.n	80071a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	3318      	adds	r3, #24
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7fe fe1a 	bl	8005de8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071b4:	4b1d      	ldr	r3, [pc, #116]	@ (800722c <xTaskRemoveFromEventList+0xb0>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d11d      	bne.n	80071f8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	3304      	adds	r3, #4
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7fe fe11 	bl	8005de8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ca:	4b19      	ldr	r3, [pc, #100]	@ (8007230 <xTaskRemoveFromEventList+0xb4>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d903      	bls.n	80071da <xTaskRemoveFromEventList+0x5e>
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d6:	4a16      	ldr	r2, [pc, #88]	@ (8007230 <xTaskRemoveFromEventList+0xb4>)
 80071d8:	6013      	str	r3, [r2, #0]
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071de:	4613      	mov	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4a13      	ldr	r2, [pc, #76]	@ (8007234 <xTaskRemoveFromEventList+0xb8>)
 80071e8:	441a      	add	r2, r3
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	3304      	adds	r3, #4
 80071ee:	4619      	mov	r1, r3
 80071f0:	4610      	mov	r0, r2
 80071f2:	f7fe fd9c 	bl	8005d2e <vListInsertEnd>
 80071f6:	e005      	b.n	8007204 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	3318      	adds	r3, #24
 80071fc:	4619      	mov	r1, r3
 80071fe:	480e      	ldr	r0, [pc, #56]	@ (8007238 <xTaskRemoveFromEventList+0xbc>)
 8007200:	f7fe fd95 	bl	8005d2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007208:	4b0c      	ldr	r3, [pc, #48]	@ (800723c <xTaskRemoveFromEventList+0xc0>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720e:	429a      	cmp	r2, r3
 8007210:	d905      	bls.n	800721e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007212:	2301      	movs	r3, #1
 8007214:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007216:	4b0a      	ldr	r3, [pc, #40]	@ (8007240 <xTaskRemoveFromEventList+0xc4>)
 8007218:	2201      	movs	r2, #1
 800721a:	601a      	str	r2, [r3, #0]
 800721c:	e001      	b.n	8007222 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800721e:	2300      	movs	r3, #0
 8007220:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007222:	697b      	ldr	r3, [r7, #20]
}
 8007224:	4618      	mov	r0, r3
 8007226:	3718      	adds	r7, #24
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	20001058 	.word	0x20001058
 8007230:	20001038 	.word	0x20001038
 8007234:	20000b60 	.word	0x20000b60
 8007238:	20000ff0 	.word	0x20000ff0
 800723c:	20000b5c 	.word	0x20000b5c
 8007240:	20001044 	.word	0x20001044

08007244 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800724c:	4b06      	ldr	r3, [pc, #24]	@ (8007268 <vTaskInternalSetTimeOutState+0x24>)
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007254:	4b05      	ldr	r3, [pc, #20]	@ (800726c <vTaskInternalSetTimeOutState+0x28>)
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	605a      	str	r2, [r3, #4]
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	20001048 	.word	0x20001048
 800726c:	20001034 	.word	0x20001034

08007270 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b088      	sub	sp, #32
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d10b      	bne.n	8007298 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007284:	f383 8811 	msr	BASEPRI, r3
 8007288:	f3bf 8f6f 	isb	sy
 800728c:	f3bf 8f4f 	dsb	sy
 8007290:	613b      	str	r3, [r7, #16]
}
 8007292:	bf00      	nop
 8007294:	bf00      	nop
 8007296:	e7fd      	b.n	8007294 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10b      	bne.n	80072b6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800729e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072a2:	f383 8811 	msr	BASEPRI, r3
 80072a6:	f3bf 8f6f 	isb	sy
 80072aa:	f3bf 8f4f 	dsb	sy
 80072ae:	60fb      	str	r3, [r7, #12]
}
 80072b0:	bf00      	nop
 80072b2:	bf00      	nop
 80072b4:	e7fd      	b.n	80072b2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80072b6:	f000 fe8f 	bl	8007fd8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80072ba:	4b1d      	ldr	r3, [pc, #116]	@ (8007330 <xTaskCheckForTimeOut+0xc0>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	69ba      	ldr	r2, [r7, #24]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d2:	d102      	bne.n	80072da <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80072d4:	2300      	movs	r3, #0
 80072d6:	61fb      	str	r3, [r7, #28]
 80072d8:	e023      	b.n	8007322 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	4b15      	ldr	r3, [pc, #84]	@ (8007334 <xTaskCheckForTimeOut+0xc4>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d007      	beq.n	80072f6 <xTaskCheckForTimeOut+0x86>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	69ba      	ldr	r2, [r7, #24]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d302      	bcc.n	80072f6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80072f0:	2301      	movs	r3, #1
 80072f2:	61fb      	str	r3, [r7, #28]
 80072f4:	e015      	b.n	8007322 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d20b      	bcs.n	8007318 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	1ad2      	subs	r2, r2, r3
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f7ff ff99 	bl	8007244 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007312:	2300      	movs	r3, #0
 8007314:	61fb      	str	r3, [r7, #28]
 8007316:	e004      	b.n	8007322 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	2200      	movs	r2, #0
 800731c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800731e:	2301      	movs	r3, #1
 8007320:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007322:	f000 fe8b 	bl	800803c <vPortExitCritical>

	return xReturn;
 8007326:	69fb      	ldr	r3, [r7, #28]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3720      	adds	r7, #32
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	20001034 	.word	0x20001034
 8007334:	20001048 	.word	0x20001048

08007338 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007338:	b480      	push	{r7}
 800733a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800733c:	4b03      	ldr	r3, [pc, #12]	@ (800734c <vTaskMissedYield+0x14>)
 800733e:	2201      	movs	r2, #1
 8007340:	601a      	str	r2, [r3, #0]
}
 8007342:	bf00      	nop
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr
 800734c:	20001044 	.word	0x20001044

08007350 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007358:	f000 f852 	bl	8007400 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800735c:	4b06      	ldr	r3, [pc, #24]	@ (8007378 <prvIdleTask+0x28>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2b01      	cmp	r3, #1
 8007362:	d9f9      	bls.n	8007358 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007364:	4b05      	ldr	r3, [pc, #20]	@ (800737c <prvIdleTask+0x2c>)
 8007366:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800736a:	601a      	str	r2, [r3, #0]
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007374:	e7f0      	b.n	8007358 <prvIdleTask+0x8>
 8007376:	bf00      	nop
 8007378:	20000b60 	.word	0x20000b60
 800737c:	e000ed04 	.word	0xe000ed04

08007380 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007386:	2300      	movs	r3, #0
 8007388:	607b      	str	r3, [r7, #4]
 800738a:	e00c      	b.n	80073a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	4613      	mov	r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4a12      	ldr	r2, [pc, #72]	@ (80073e0 <prvInitialiseTaskLists+0x60>)
 8007398:	4413      	add	r3, r2
 800739a:	4618      	mov	r0, r3
 800739c:	f7fe fc9a 	bl	8005cd4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	3301      	adds	r3, #1
 80073a4:	607b      	str	r3, [r7, #4]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2b37      	cmp	r3, #55	@ 0x37
 80073aa:	d9ef      	bls.n	800738c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80073ac:	480d      	ldr	r0, [pc, #52]	@ (80073e4 <prvInitialiseTaskLists+0x64>)
 80073ae:	f7fe fc91 	bl	8005cd4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80073b2:	480d      	ldr	r0, [pc, #52]	@ (80073e8 <prvInitialiseTaskLists+0x68>)
 80073b4:	f7fe fc8e 	bl	8005cd4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80073b8:	480c      	ldr	r0, [pc, #48]	@ (80073ec <prvInitialiseTaskLists+0x6c>)
 80073ba:	f7fe fc8b 	bl	8005cd4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80073be:	480c      	ldr	r0, [pc, #48]	@ (80073f0 <prvInitialiseTaskLists+0x70>)
 80073c0:	f7fe fc88 	bl	8005cd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80073c4:	480b      	ldr	r0, [pc, #44]	@ (80073f4 <prvInitialiseTaskLists+0x74>)
 80073c6:	f7fe fc85 	bl	8005cd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80073ca:	4b0b      	ldr	r3, [pc, #44]	@ (80073f8 <prvInitialiseTaskLists+0x78>)
 80073cc:	4a05      	ldr	r2, [pc, #20]	@ (80073e4 <prvInitialiseTaskLists+0x64>)
 80073ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80073d0:	4b0a      	ldr	r3, [pc, #40]	@ (80073fc <prvInitialiseTaskLists+0x7c>)
 80073d2:	4a05      	ldr	r2, [pc, #20]	@ (80073e8 <prvInitialiseTaskLists+0x68>)
 80073d4:	601a      	str	r2, [r3, #0]
}
 80073d6:	bf00      	nop
 80073d8:	3708      	adds	r7, #8
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	20000b60 	.word	0x20000b60
 80073e4:	20000fc0 	.word	0x20000fc0
 80073e8:	20000fd4 	.word	0x20000fd4
 80073ec:	20000ff0 	.word	0x20000ff0
 80073f0:	20001004 	.word	0x20001004
 80073f4:	2000101c 	.word	0x2000101c
 80073f8:	20000fe8 	.word	0x20000fe8
 80073fc:	20000fec 	.word	0x20000fec

08007400 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007406:	e019      	b.n	800743c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007408:	f000 fde6 	bl	8007fd8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800740c:	4b10      	ldr	r3, [pc, #64]	@ (8007450 <prvCheckTasksWaitingTermination+0x50>)
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	3304      	adds	r3, #4
 8007418:	4618      	mov	r0, r3
 800741a:	f7fe fce5 	bl	8005de8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800741e:	4b0d      	ldr	r3, [pc, #52]	@ (8007454 <prvCheckTasksWaitingTermination+0x54>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	3b01      	subs	r3, #1
 8007424:	4a0b      	ldr	r2, [pc, #44]	@ (8007454 <prvCheckTasksWaitingTermination+0x54>)
 8007426:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007428:	4b0b      	ldr	r3, [pc, #44]	@ (8007458 <prvCheckTasksWaitingTermination+0x58>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3b01      	subs	r3, #1
 800742e:	4a0a      	ldr	r2, [pc, #40]	@ (8007458 <prvCheckTasksWaitingTermination+0x58>)
 8007430:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007432:	f000 fe03 	bl	800803c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f810 	bl	800745c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800743c:	4b06      	ldr	r3, [pc, #24]	@ (8007458 <prvCheckTasksWaitingTermination+0x58>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1e1      	bne.n	8007408 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007444:	bf00      	nop
 8007446:	bf00      	nop
 8007448:	3708      	adds	r7, #8
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	20001004 	.word	0x20001004
 8007454:	20001030 	.word	0x20001030
 8007458:	20001018 	.word	0x20001018

0800745c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800746a:	2b00      	cmp	r3, #0
 800746c:	d108      	bne.n	8007480 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007472:	4618      	mov	r0, r3
 8007474:	f000 ffa0 	bl	80083b8 <vPortFree>
				vPortFree( pxTCB );
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 ff9d 	bl	80083b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800747e:	e019      	b.n	80074b4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007486:	2b01      	cmp	r3, #1
 8007488:	d103      	bne.n	8007492 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 ff94 	bl	80083b8 <vPortFree>
	}
 8007490:	e010      	b.n	80074b4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007498:	2b02      	cmp	r3, #2
 800749a:	d00b      	beq.n	80074b4 <prvDeleteTCB+0x58>
	__asm volatile
 800749c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a0:	f383 8811 	msr	BASEPRI, r3
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	60fb      	str	r3, [r7, #12]
}
 80074ae:	bf00      	nop
 80074b0:	bf00      	nop
 80074b2:	e7fd      	b.n	80074b0 <prvDeleteTCB+0x54>
	}
 80074b4:	bf00      	nop
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074c2:	4b0c      	ldr	r3, [pc, #48]	@ (80074f4 <prvResetNextTaskUnblockTime+0x38>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d104      	bne.n	80074d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80074cc:	4b0a      	ldr	r3, [pc, #40]	@ (80074f8 <prvResetNextTaskUnblockTime+0x3c>)
 80074ce:	f04f 32ff 	mov.w	r2, #4294967295
 80074d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80074d4:	e008      	b.n	80074e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074d6:	4b07      	ldr	r3, [pc, #28]	@ (80074f4 <prvResetNextTaskUnblockTime+0x38>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	4a04      	ldr	r2, [pc, #16]	@ (80074f8 <prvResetNextTaskUnblockTime+0x3c>)
 80074e6:	6013      	str	r3, [r2, #0]
}
 80074e8:	bf00      	nop
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr
 80074f4:	20000fe8 	.word	0x20000fe8
 80074f8:	20001050 	.word	0x20001050

080074fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007502:	4b0b      	ldr	r3, [pc, #44]	@ (8007530 <xTaskGetSchedulerState+0x34>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d102      	bne.n	8007510 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800750a:	2301      	movs	r3, #1
 800750c:	607b      	str	r3, [r7, #4]
 800750e:	e008      	b.n	8007522 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007510:	4b08      	ldr	r3, [pc, #32]	@ (8007534 <xTaskGetSchedulerState+0x38>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d102      	bne.n	800751e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007518:	2302      	movs	r3, #2
 800751a:	607b      	str	r3, [r7, #4]
 800751c:	e001      	b.n	8007522 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800751e:	2300      	movs	r3, #0
 8007520:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007522:	687b      	ldr	r3, [r7, #4]
	}
 8007524:	4618      	mov	r0, r3
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr
 8007530:	2000103c 	.word	0x2000103c
 8007534:	20001058 	.word	0x20001058

08007538 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007538:	b580      	push	{r7, lr}
 800753a:	b086      	sub	sp, #24
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007544:	2300      	movs	r3, #0
 8007546:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d058      	beq.n	8007600 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800754e:	4b2f      	ldr	r3, [pc, #188]	@ (800760c <xTaskPriorityDisinherit+0xd4>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	693a      	ldr	r2, [r7, #16]
 8007554:	429a      	cmp	r2, r3
 8007556:	d00b      	beq.n	8007570 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800755c:	f383 8811 	msr	BASEPRI, r3
 8007560:	f3bf 8f6f 	isb	sy
 8007564:	f3bf 8f4f 	dsb	sy
 8007568:	60fb      	str	r3, [r7, #12]
}
 800756a:	bf00      	nop
 800756c:	bf00      	nop
 800756e:	e7fd      	b.n	800756c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10b      	bne.n	8007590 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800757c:	f383 8811 	msr	BASEPRI, r3
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	60bb      	str	r3, [r7, #8]
}
 800758a:	bf00      	nop
 800758c:	bf00      	nop
 800758e:	e7fd      	b.n	800758c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007594:	1e5a      	subs	r2, r3, #1
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d02c      	beq.n	8007600 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d128      	bne.n	8007600 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	3304      	adds	r3, #4
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7fe fc18 	bl	8005de8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075d0:	4b0f      	ldr	r3, [pc, #60]	@ (8007610 <xTaskPriorityDisinherit+0xd8>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d903      	bls.n	80075e0 <xTaskPriorityDisinherit+0xa8>
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075dc:	4a0c      	ldr	r2, [pc, #48]	@ (8007610 <xTaskPriorityDisinherit+0xd8>)
 80075de:	6013      	str	r3, [r2, #0]
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075e4:	4613      	mov	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4a09      	ldr	r2, [pc, #36]	@ (8007614 <xTaskPriorityDisinherit+0xdc>)
 80075ee:	441a      	add	r2, r3
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	3304      	adds	r3, #4
 80075f4:	4619      	mov	r1, r3
 80075f6:	4610      	mov	r0, r2
 80075f8:	f7fe fb99 	bl	8005d2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80075fc:	2301      	movs	r3, #1
 80075fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007600:	697b      	ldr	r3, [r7, #20]
	}
 8007602:	4618      	mov	r0, r3
 8007604:	3718      	adds	r7, #24
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	20000b5c 	.word	0x20000b5c
 8007610:	20001038 	.word	0x20001038
 8007614:	20000b60 	.word	0x20000b60

08007618 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007622:	4b21      	ldr	r3, [pc, #132]	@ (80076a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007628:	4b20      	ldr	r3, [pc, #128]	@ (80076ac <prvAddCurrentTaskToDelayedList+0x94>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	3304      	adds	r3, #4
 800762e:	4618      	mov	r0, r3
 8007630:	f7fe fbda 	bl	8005de8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800763a:	d10a      	bne.n	8007652 <prvAddCurrentTaskToDelayedList+0x3a>
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d007      	beq.n	8007652 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007642:	4b1a      	ldr	r3, [pc, #104]	@ (80076ac <prvAddCurrentTaskToDelayedList+0x94>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	3304      	adds	r3, #4
 8007648:	4619      	mov	r1, r3
 800764a:	4819      	ldr	r0, [pc, #100]	@ (80076b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800764c:	f7fe fb6f 	bl	8005d2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007650:	e026      	b.n	80076a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4413      	add	r3, r2
 8007658:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800765a:	4b14      	ldr	r3, [pc, #80]	@ (80076ac <prvAddCurrentTaskToDelayedList+0x94>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	429a      	cmp	r2, r3
 8007668:	d209      	bcs.n	800767e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800766a:	4b12      	ldr	r3, [pc, #72]	@ (80076b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	4b0f      	ldr	r3, [pc, #60]	@ (80076ac <prvAddCurrentTaskToDelayedList+0x94>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	3304      	adds	r3, #4
 8007674:	4619      	mov	r1, r3
 8007676:	4610      	mov	r0, r2
 8007678:	f7fe fb7d 	bl	8005d76 <vListInsert>
}
 800767c:	e010      	b.n	80076a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800767e:	4b0e      	ldr	r3, [pc, #56]	@ (80076b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	4b0a      	ldr	r3, [pc, #40]	@ (80076ac <prvAddCurrentTaskToDelayedList+0x94>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	3304      	adds	r3, #4
 8007688:	4619      	mov	r1, r3
 800768a:	4610      	mov	r0, r2
 800768c:	f7fe fb73 	bl	8005d76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007690:	4b0a      	ldr	r3, [pc, #40]	@ (80076bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	429a      	cmp	r2, r3
 8007698:	d202      	bcs.n	80076a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800769a:	4a08      	ldr	r2, [pc, #32]	@ (80076bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	6013      	str	r3, [r2, #0]
}
 80076a0:	bf00      	nop
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	20001034 	.word	0x20001034
 80076ac:	20000b5c 	.word	0x20000b5c
 80076b0:	2000101c 	.word	0x2000101c
 80076b4:	20000fec 	.word	0x20000fec
 80076b8:	20000fe8 	.word	0x20000fe8
 80076bc:	20001050 	.word	0x20001050

080076c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b08a      	sub	sp, #40	@ 0x28
 80076c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80076c6:	2300      	movs	r3, #0
 80076c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80076ca:	f000 fb13 	bl	8007cf4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80076ce:	4b1d      	ldr	r3, [pc, #116]	@ (8007744 <xTimerCreateTimerTask+0x84>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d021      	beq.n	800771a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80076d6:	2300      	movs	r3, #0
 80076d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80076da:	2300      	movs	r3, #0
 80076dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80076de:	1d3a      	adds	r2, r7, #4
 80076e0:	f107 0108 	add.w	r1, r7, #8
 80076e4:	f107 030c 	add.w	r3, r7, #12
 80076e8:	4618      	mov	r0, r3
 80076ea:	f7fe fad9 	bl	8005ca0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80076ee:	6879      	ldr	r1, [r7, #4]
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	9202      	str	r2, [sp, #8]
 80076f6:	9301      	str	r3, [sp, #4]
 80076f8:	2302      	movs	r3, #2
 80076fa:	9300      	str	r3, [sp, #0]
 80076fc:	2300      	movs	r3, #0
 80076fe:	460a      	mov	r2, r1
 8007700:	4911      	ldr	r1, [pc, #68]	@ (8007748 <xTimerCreateTimerTask+0x88>)
 8007702:	4812      	ldr	r0, [pc, #72]	@ (800774c <xTimerCreateTimerTask+0x8c>)
 8007704:	f7ff f8d0 	bl	80068a8 <xTaskCreateStatic>
 8007708:	4603      	mov	r3, r0
 800770a:	4a11      	ldr	r2, [pc, #68]	@ (8007750 <xTimerCreateTimerTask+0x90>)
 800770c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800770e:	4b10      	ldr	r3, [pc, #64]	@ (8007750 <xTimerCreateTimerTask+0x90>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d001      	beq.n	800771a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007716:	2301      	movs	r3, #1
 8007718:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d10b      	bne.n	8007738 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007724:	f383 8811 	msr	BASEPRI, r3
 8007728:	f3bf 8f6f 	isb	sy
 800772c:	f3bf 8f4f 	dsb	sy
 8007730:	613b      	str	r3, [r7, #16]
}
 8007732:	bf00      	nop
 8007734:	bf00      	nop
 8007736:	e7fd      	b.n	8007734 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007738:	697b      	ldr	r3, [r7, #20]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3718      	adds	r7, #24
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	2000108c 	.word	0x2000108c
 8007748:	0800b304 	.word	0x0800b304
 800774c:	0800788d 	.word	0x0800788d
 8007750:	20001090 	.word	0x20001090

08007754 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b08a      	sub	sp, #40	@ 0x28
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	607a      	str	r2, [r7, #4]
 8007760:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007762:	2300      	movs	r3, #0
 8007764:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10b      	bne.n	8007784 <xTimerGenericCommand+0x30>
	__asm volatile
 800776c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007770:	f383 8811 	msr	BASEPRI, r3
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	623b      	str	r3, [r7, #32]
}
 800777e:	bf00      	nop
 8007780:	bf00      	nop
 8007782:	e7fd      	b.n	8007780 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007784:	4b19      	ldr	r3, [pc, #100]	@ (80077ec <xTimerGenericCommand+0x98>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d02a      	beq.n	80077e2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	2b05      	cmp	r3, #5
 800779c:	dc18      	bgt.n	80077d0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800779e:	f7ff fead 	bl	80074fc <xTaskGetSchedulerState>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d109      	bne.n	80077bc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80077a8:	4b10      	ldr	r3, [pc, #64]	@ (80077ec <xTimerGenericCommand+0x98>)
 80077aa:	6818      	ldr	r0, [r3, #0]
 80077ac:	f107 0110 	add.w	r1, r7, #16
 80077b0:	2300      	movs	r3, #0
 80077b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077b4:	f7fe fc88 	bl	80060c8 <xQueueGenericSend>
 80077b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80077ba:	e012      	b.n	80077e2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80077bc:	4b0b      	ldr	r3, [pc, #44]	@ (80077ec <xTimerGenericCommand+0x98>)
 80077be:	6818      	ldr	r0, [r3, #0]
 80077c0:	f107 0110 	add.w	r1, r7, #16
 80077c4:	2300      	movs	r3, #0
 80077c6:	2200      	movs	r2, #0
 80077c8:	f7fe fc7e 	bl	80060c8 <xQueueGenericSend>
 80077cc:	6278      	str	r0, [r7, #36]	@ 0x24
 80077ce:	e008      	b.n	80077e2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80077d0:	4b06      	ldr	r3, [pc, #24]	@ (80077ec <xTimerGenericCommand+0x98>)
 80077d2:	6818      	ldr	r0, [r3, #0]
 80077d4:	f107 0110 	add.w	r1, r7, #16
 80077d8:	2300      	movs	r3, #0
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	f7fe fd76 	bl	80062cc <xQueueGenericSendFromISR>
 80077e0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80077e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3728      	adds	r7, #40	@ 0x28
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	2000108c 	.word	0x2000108c

080077f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b088      	sub	sp, #32
 80077f4:	af02      	add	r7, sp, #8
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077fa:	4b23      	ldr	r3, [pc, #140]	@ (8007888 <prvProcessExpiredTimer+0x98>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	3304      	adds	r3, #4
 8007808:	4618      	mov	r0, r3
 800780a:	f7fe faed 	bl	8005de8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007814:	f003 0304 	and.w	r3, r3, #4
 8007818:	2b00      	cmp	r3, #0
 800781a:	d023      	beq.n	8007864 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	699a      	ldr	r2, [r3, #24]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	18d1      	adds	r1, r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	683a      	ldr	r2, [r7, #0]
 8007828:	6978      	ldr	r0, [r7, #20]
 800782a:	f000 f8d5 	bl	80079d8 <prvInsertTimerInActiveList>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d020      	beq.n	8007876 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007834:	2300      	movs	r3, #0
 8007836:	9300      	str	r3, [sp, #0]
 8007838:	2300      	movs	r3, #0
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	2100      	movs	r1, #0
 800783e:	6978      	ldr	r0, [r7, #20]
 8007840:	f7ff ff88 	bl	8007754 <xTimerGenericCommand>
 8007844:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d114      	bne.n	8007876 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800784c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007850:	f383 8811 	msr	BASEPRI, r3
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	f3bf 8f4f 	dsb	sy
 800785c:	60fb      	str	r3, [r7, #12]
}
 800785e:	bf00      	nop
 8007860:	bf00      	nop
 8007862:	e7fd      	b.n	8007860 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800786a:	f023 0301 	bic.w	r3, r3, #1
 800786e:	b2da      	uxtb	r2, r3
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	6978      	ldr	r0, [r7, #20]
 800787c:	4798      	blx	r3
}
 800787e:	bf00      	nop
 8007880:	3718      	adds	r7, #24
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	20001084 	.word	0x20001084

0800788c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007894:	f107 0308 	add.w	r3, r7, #8
 8007898:	4618      	mov	r0, r3
 800789a:	f000 f859 	bl	8007950 <prvGetNextExpireTime>
 800789e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	4619      	mov	r1, r3
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f000 f805 	bl	80078b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80078aa:	f000 f8d7 	bl	8007a5c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80078ae:	bf00      	nop
 80078b0:	e7f0      	b.n	8007894 <prvTimerTask+0x8>
	...

080078b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80078be:	f7ff fa37 	bl	8006d30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80078c2:	f107 0308 	add.w	r3, r7, #8
 80078c6:	4618      	mov	r0, r3
 80078c8:	f000 f866 	bl	8007998 <prvSampleTimeNow>
 80078cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d130      	bne.n	8007936 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d10a      	bne.n	80078f0 <prvProcessTimerOrBlockTask+0x3c>
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d806      	bhi.n	80078f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80078e2:	f7ff fa33 	bl	8006d4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80078e6:	68f9      	ldr	r1, [r7, #12]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f7ff ff81 	bl	80077f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80078ee:	e024      	b.n	800793a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d008      	beq.n	8007908 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80078f6:	4b13      	ldr	r3, [pc, #76]	@ (8007944 <prvProcessTimerOrBlockTask+0x90>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d101      	bne.n	8007904 <prvProcessTimerOrBlockTask+0x50>
 8007900:	2301      	movs	r3, #1
 8007902:	e000      	b.n	8007906 <prvProcessTimerOrBlockTask+0x52>
 8007904:	2300      	movs	r3, #0
 8007906:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007908:	4b0f      	ldr	r3, [pc, #60]	@ (8007948 <prvProcessTimerOrBlockTask+0x94>)
 800790a:	6818      	ldr	r0, [r3, #0]
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	683a      	ldr	r2, [r7, #0]
 8007914:	4619      	mov	r1, r3
 8007916:	f7fe ff93 	bl	8006840 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800791a:	f7ff fa17 	bl	8006d4c <xTaskResumeAll>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d10a      	bne.n	800793a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007924:	4b09      	ldr	r3, [pc, #36]	@ (800794c <prvProcessTimerOrBlockTask+0x98>)
 8007926:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800792a:	601a      	str	r2, [r3, #0]
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	f3bf 8f6f 	isb	sy
}
 8007934:	e001      	b.n	800793a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007936:	f7ff fa09 	bl	8006d4c <xTaskResumeAll>
}
 800793a:	bf00      	nop
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	20001088 	.word	0x20001088
 8007948:	2000108c 	.word	0x2000108c
 800794c:	e000ed04 	.word	0xe000ed04

08007950 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007958:	4b0e      	ldr	r3, [pc, #56]	@ (8007994 <prvGetNextExpireTime+0x44>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d101      	bne.n	8007966 <prvGetNextExpireTime+0x16>
 8007962:	2201      	movs	r2, #1
 8007964:	e000      	b.n	8007968 <prvGetNextExpireTime+0x18>
 8007966:	2200      	movs	r2, #0
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d105      	bne.n	8007980 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007974:	4b07      	ldr	r3, [pc, #28]	@ (8007994 <prvGetNextExpireTime+0x44>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	60fb      	str	r3, [r7, #12]
 800797e:	e001      	b.n	8007984 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007980:	2300      	movs	r3, #0
 8007982:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007984:	68fb      	ldr	r3, [r7, #12]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3714      	adds	r7, #20
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	20001084 	.word	0x20001084

08007998 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80079a0:	f7ff fa72 	bl	8006e88 <xTaskGetTickCount>
 80079a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80079a6:	4b0b      	ldr	r3, [pc, #44]	@ (80079d4 <prvSampleTimeNow+0x3c>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d205      	bcs.n	80079bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80079b0:	f000 f93a 	bl	8007c28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	601a      	str	r2, [r3, #0]
 80079ba:	e002      	b.n	80079c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80079c2:	4a04      	ldr	r2, [pc, #16]	@ (80079d4 <prvSampleTimeNow+0x3c>)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80079c8:	68fb      	ldr	r3, [r7, #12]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	20001094 	.word	0x20001094

080079d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b086      	sub	sp, #24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
 80079e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80079e6:	2300      	movs	r3, #0
 80079e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	68ba      	ldr	r2, [r7, #8]
 80079ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d812      	bhi.n	8007a24 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	1ad2      	subs	r2, r2, r3
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	699b      	ldr	r3, [r3, #24]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d302      	bcc.n	8007a12 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	617b      	str	r3, [r7, #20]
 8007a10:	e01b      	b.n	8007a4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007a12:	4b10      	ldr	r3, [pc, #64]	@ (8007a54 <prvInsertTimerInActiveList+0x7c>)
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	3304      	adds	r3, #4
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	4610      	mov	r0, r2
 8007a1e:	f7fe f9aa 	bl	8005d76 <vListInsert>
 8007a22:	e012      	b.n	8007a4a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d206      	bcs.n	8007a3a <prvInsertTimerInActiveList+0x62>
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d302      	bcc.n	8007a3a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007a34:	2301      	movs	r3, #1
 8007a36:	617b      	str	r3, [r7, #20]
 8007a38:	e007      	b.n	8007a4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a3a:	4b07      	ldr	r3, [pc, #28]	@ (8007a58 <prvInsertTimerInActiveList+0x80>)
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	3304      	adds	r3, #4
 8007a42:	4619      	mov	r1, r3
 8007a44:	4610      	mov	r0, r2
 8007a46:	f7fe f996 	bl	8005d76 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007a4a:	697b      	ldr	r3, [r7, #20]
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3718      	adds	r7, #24
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	20001088 	.word	0x20001088
 8007a58:	20001084 	.word	0x20001084

08007a5c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b08e      	sub	sp, #56	@ 0x38
 8007a60:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a62:	e0ce      	b.n	8007c02 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	da19      	bge.n	8007a9e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007a6a:	1d3b      	adds	r3, r7, #4
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d10b      	bne.n	8007a8e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a7a:	f383 8811 	msr	BASEPRI, r3
 8007a7e:	f3bf 8f6f 	isb	sy
 8007a82:	f3bf 8f4f 	dsb	sy
 8007a86:	61fb      	str	r3, [r7, #28]
}
 8007a88:	bf00      	nop
 8007a8a:	bf00      	nop
 8007a8c:	e7fd      	b.n	8007a8a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a94:	6850      	ldr	r0, [r2, #4]
 8007a96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a98:	6892      	ldr	r2, [r2, #8]
 8007a9a:	4611      	mov	r1, r2
 8007a9c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f2c0 80ae 	blt.w	8007c02 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d004      	beq.n	8007abc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ab4:	3304      	adds	r3, #4
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7fe f996 	bl	8005de8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007abc:	463b      	mov	r3, r7
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7ff ff6a 	bl	8007998 <prvSampleTimeNow>
 8007ac4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b09      	cmp	r3, #9
 8007aca:	f200 8097 	bhi.w	8007bfc <prvProcessReceivedCommands+0x1a0>
 8007ace:	a201      	add	r2, pc, #4	@ (adr r2, 8007ad4 <prvProcessReceivedCommands+0x78>)
 8007ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad4:	08007afd 	.word	0x08007afd
 8007ad8:	08007afd 	.word	0x08007afd
 8007adc:	08007afd 	.word	0x08007afd
 8007ae0:	08007b73 	.word	0x08007b73
 8007ae4:	08007b87 	.word	0x08007b87
 8007ae8:	08007bd3 	.word	0x08007bd3
 8007aec:	08007afd 	.word	0x08007afd
 8007af0:	08007afd 	.word	0x08007afd
 8007af4:	08007b73 	.word	0x08007b73
 8007af8:	08007b87 	.word	0x08007b87
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007afe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b02:	f043 0301 	orr.w	r3, r3, #1
 8007b06:	b2da      	uxtb	r2, r3
 8007b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	18d1      	adds	r1, r2, r3
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b1c:	f7ff ff5c 	bl	80079d8 <prvInsertTimerInActiveList>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d06c      	beq.n	8007c00 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b28:	6a1b      	ldr	r3, [r3, #32]
 8007b2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b34:	f003 0304 	and.w	r3, r3, #4
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d061      	beq.n	8007c00 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	441a      	add	r2, r3
 8007b44:	2300      	movs	r3, #0
 8007b46:	9300      	str	r3, [sp, #0]
 8007b48:	2300      	movs	r3, #0
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b4e:	f7ff fe01 	bl	8007754 <xTimerGenericCommand>
 8007b52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007b54:	6a3b      	ldr	r3, [r7, #32]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d152      	bne.n	8007c00 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b5e:	f383 8811 	msr	BASEPRI, r3
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	61bb      	str	r3, [r7, #24]
}
 8007b6c:	bf00      	nop
 8007b6e:	bf00      	nop
 8007b70:	e7fd      	b.n	8007b6e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b78:	f023 0301 	bic.w	r3, r3, #1
 8007b7c:	b2da      	uxtb	r2, r3
 8007b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b80:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007b84:	e03d      	b.n	8007c02 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b8c:	f043 0301 	orr.w	r3, r3, #1
 8007b90:	b2da      	uxtb	r2, r3
 8007b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007b98:	68ba      	ldr	r2, [r7, #8]
 8007b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b9c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10b      	bne.n	8007bbe <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	617b      	str	r3, [r7, #20]
}
 8007bb8:	bf00      	nop
 8007bba:	bf00      	nop
 8007bbc:	e7fd      	b.n	8007bba <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc0:	699a      	ldr	r2, [r3, #24]
 8007bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc4:	18d1      	adds	r1, r2, r3
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bcc:	f7ff ff04 	bl	80079d8 <prvInsertTimerInActiveList>
					break;
 8007bd0:	e017      	b.n	8007c02 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007bd8:	f003 0302 	and.w	r3, r3, #2
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d103      	bne.n	8007be8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007be0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007be2:	f000 fbe9 	bl	80083b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007be6:	e00c      	b.n	8007c02 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007bee:	f023 0301 	bic.w	r3, r3, #1
 8007bf2:	b2da      	uxtb	r2, r3
 8007bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bf6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007bfa:	e002      	b.n	8007c02 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007bfc:	bf00      	nop
 8007bfe:	e000      	b.n	8007c02 <prvProcessReceivedCommands+0x1a6>
					break;
 8007c00:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c02:	4b08      	ldr	r3, [pc, #32]	@ (8007c24 <prvProcessReceivedCommands+0x1c8>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	1d39      	adds	r1, r7, #4
 8007c08:	2200      	movs	r2, #0
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7fe fbfc 	bl	8006408 <xQueueReceive>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f47f af26 	bne.w	8007a64 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007c18:	bf00      	nop
 8007c1a:	bf00      	nop
 8007c1c:	3730      	adds	r7, #48	@ 0x30
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	2000108c 	.word	0x2000108c

08007c28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b088      	sub	sp, #32
 8007c2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c2e:	e049      	b.n	8007cc4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c30:	4b2e      	ldr	r3, [pc, #184]	@ (8007cec <prvSwitchTimerLists+0xc4>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c3a:	4b2c      	ldr	r3, [pc, #176]	@ (8007cec <prvSwitchTimerLists+0xc4>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	3304      	adds	r3, #4
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7fe f8cd 	bl	8005de8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c5c:	f003 0304 	and.w	r3, r3, #4
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d02f      	beq.n	8007cc4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d90e      	bls.n	8007c94 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c82:	4b1a      	ldr	r3, [pc, #104]	@ (8007cec <prvSwitchTimerLists+0xc4>)
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	3304      	adds	r3, #4
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	4610      	mov	r0, r2
 8007c8e:	f7fe f872 	bl	8005d76 <vListInsert>
 8007c92:	e017      	b.n	8007cc4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c94:	2300      	movs	r3, #0
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	2300      	movs	r3, #0
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f7ff fd58 	bl	8007754 <xTimerGenericCommand>
 8007ca4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10b      	bne.n	8007cc4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb0:	f383 8811 	msr	BASEPRI, r3
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	f3bf 8f4f 	dsb	sy
 8007cbc:	603b      	str	r3, [r7, #0]
}
 8007cbe:	bf00      	nop
 8007cc0:	bf00      	nop
 8007cc2:	e7fd      	b.n	8007cc0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007cc4:	4b09      	ldr	r3, [pc, #36]	@ (8007cec <prvSwitchTimerLists+0xc4>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1b0      	bne.n	8007c30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007cce:	4b07      	ldr	r3, [pc, #28]	@ (8007cec <prvSwitchTimerLists+0xc4>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007cd4:	4b06      	ldr	r3, [pc, #24]	@ (8007cf0 <prvSwitchTimerLists+0xc8>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a04      	ldr	r2, [pc, #16]	@ (8007cec <prvSwitchTimerLists+0xc4>)
 8007cda:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007cdc:	4a04      	ldr	r2, [pc, #16]	@ (8007cf0 <prvSwitchTimerLists+0xc8>)
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	6013      	str	r3, [r2, #0]
}
 8007ce2:	bf00      	nop
 8007ce4:	3718      	adds	r7, #24
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	20001084 	.word	0x20001084
 8007cf0:	20001088 	.word	0x20001088

08007cf4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007cfa:	f000 f96d 	bl	8007fd8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007cfe:	4b15      	ldr	r3, [pc, #84]	@ (8007d54 <prvCheckForValidListAndQueue+0x60>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d120      	bne.n	8007d48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007d06:	4814      	ldr	r0, [pc, #80]	@ (8007d58 <prvCheckForValidListAndQueue+0x64>)
 8007d08:	f7fd ffe4 	bl	8005cd4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007d0c:	4813      	ldr	r0, [pc, #76]	@ (8007d5c <prvCheckForValidListAndQueue+0x68>)
 8007d0e:	f7fd ffe1 	bl	8005cd4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007d12:	4b13      	ldr	r3, [pc, #76]	@ (8007d60 <prvCheckForValidListAndQueue+0x6c>)
 8007d14:	4a10      	ldr	r2, [pc, #64]	@ (8007d58 <prvCheckForValidListAndQueue+0x64>)
 8007d16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007d18:	4b12      	ldr	r3, [pc, #72]	@ (8007d64 <prvCheckForValidListAndQueue+0x70>)
 8007d1a:	4a10      	ldr	r2, [pc, #64]	@ (8007d5c <prvCheckForValidListAndQueue+0x68>)
 8007d1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007d1e:	2300      	movs	r3, #0
 8007d20:	9300      	str	r3, [sp, #0]
 8007d22:	4b11      	ldr	r3, [pc, #68]	@ (8007d68 <prvCheckForValidListAndQueue+0x74>)
 8007d24:	4a11      	ldr	r2, [pc, #68]	@ (8007d6c <prvCheckForValidListAndQueue+0x78>)
 8007d26:	2110      	movs	r1, #16
 8007d28:	200a      	movs	r0, #10
 8007d2a:	f7fe f8f1 	bl	8005f10 <xQueueGenericCreateStatic>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	4a08      	ldr	r2, [pc, #32]	@ (8007d54 <prvCheckForValidListAndQueue+0x60>)
 8007d32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007d34:	4b07      	ldr	r3, [pc, #28]	@ (8007d54 <prvCheckForValidListAndQueue+0x60>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d005      	beq.n	8007d48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007d3c:	4b05      	ldr	r3, [pc, #20]	@ (8007d54 <prvCheckForValidListAndQueue+0x60>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	490b      	ldr	r1, [pc, #44]	@ (8007d70 <prvCheckForValidListAndQueue+0x7c>)
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7fe fd52 	bl	80067ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d48:	f000 f978 	bl	800803c <vPortExitCritical>
}
 8007d4c:	bf00      	nop
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	2000108c 	.word	0x2000108c
 8007d58:	2000105c 	.word	0x2000105c
 8007d5c:	20001070 	.word	0x20001070
 8007d60:	20001084 	.word	0x20001084
 8007d64:	20001088 	.word	0x20001088
 8007d68:	20001138 	.word	0x20001138
 8007d6c:	20001098 	.word	0x20001098
 8007d70:	0800b30c 	.word	0x0800b30c

08007d74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d74:	b480      	push	{r7}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	3b04      	subs	r3, #4
 8007d84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007d8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	3b04      	subs	r3, #4
 8007d92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	f023 0201 	bic.w	r2, r3, #1
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	3b04      	subs	r3, #4
 8007da2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007da4:	4a0c      	ldr	r2, [pc, #48]	@ (8007dd8 <pxPortInitialiseStack+0x64>)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	3b14      	subs	r3, #20
 8007dae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	3b04      	subs	r3, #4
 8007dba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f06f 0202 	mvn.w	r2, #2
 8007dc2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	3b20      	subs	r3, #32
 8007dc8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007dca:	68fb      	ldr	r3, [r7, #12]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3714      	adds	r7, #20
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr
 8007dd8:	08007ddd 	.word	0x08007ddd

08007ddc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007de2:	2300      	movs	r3, #0
 8007de4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007de6:	4b13      	ldr	r3, [pc, #76]	@ (8007e34 <prvTaskExitError+0x58>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dee:	d00b      	beq.n	8007e08 <prvTaskExitError+0x2c>
	__asm volatile
 8007df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	60fb      	str	r3, [r7, #12]
}
 8007e02:	bf00      	nop
 8007e04:	bf00      	nop
 8007e06:	e7fd      	b.n	8007e04 <prvTaskExitError+0x28>
	__asm volatile
 8007e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e0c:	f383 8811 	msr	BASEPRI, r3
 8007e10:	f3bf 8f6f 	isb	sy
 8007e14:	f3bf 8f4f 	dsb	sy
 8007e18:	60bb      	str	r3, [r7, #8]
}
 8007e1a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e1c:	bf00      	nop
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d0fc      	beq.n	8007e1e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e24:	bf00      	nop
 8007e26:	bf00      	nop
 8007e28:	3714      	adds	r7, #20
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	20000014 	.word	0x20000014
	...

08007e40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e40:	4b07      	ldr	r3, [pc, #28]	@ (8007e60 <pxCurrentTCBConst2>)
 8007e42:	6819      	ldr	r1, [r3, #0]
 8007e44:	6808      	ldr	r0, [r1, #0]
 8007e46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e4a:	f380 8809 	msr	PSP, r0
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f04f 0000 	mov.w	r0, #0
 8007e56:	f380 8811 	msr	BASEPRI, r0
 8007e5a:	4770      	bx	lr
 8007e5c:	f3af 8000 	nop.w

08007e60 <pxCurrentTCBConst2>:
 8007e60:	20000b5c 	.word	0x20000b5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e64:	bf00      	nop
 8007e66:	bf00      	nop

08007e68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007e68:	4808      	ldr	r0, [pc, #32]	@ (8007e8c <prvPortStartFirstTask+0x24>)
 8007e6a:	6800      	ldr	r0, [r0, #0]
 8007e6c:	6800      	ldr	r0, [r0, #0]
 8007e6e:	f380 8808 	msr	MSP, r0
 8007e72:	f04f 0000 	mov.w	r0, #0
 8007e76:	f380 8814 	msr	CONTROL, r0
 8007e7a:	b662      	cpsie	i
 8007e7c:	b661      	cpsie	f
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	f3bf 8f6f 	isb	sy
 8007e86:	df00      	svc	0
 8007e88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e8a:	bf00      	nop
 8007e8c:	e000ed08 	.word	0xe000ed08

08007e90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b086      	sub	sp, #24
 8007e94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007e96:	4b47      	ldr	r3, [pc, #284]	@ (8007fb4 <xPortStartScheduler+0x124>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a47      	ldr	r2, [pc, #284]	@ (8007fb8 <xPortStartScheduler+0x128>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d10b      	bne.n	8007eb8 <xPortStartScheduler+0x28>
	__asm volatile
 8007ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea4:	f383 8811 	msr	BASEPRI, r3
 8007ea8:	f3bf 8f6f 	isb	sy
 8007eac:	f3bf 8f4f 	dsb	sy
 8007eb0:	613b      	str	r3, [r7, #16]
}
 8007eb2:	bf00      	nop
 8007eb4:	bf00      	nop
 8007eb6:	e7fd      	b.n	8007eb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007eb8:	4b3e      	ldr	r3, [pc, #248]	@ (8007fb4 <xPortStartScheduler+0x124>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a3f      	ldr	r2, [pc, #252]	@ (8007fbc <xPortStartScheduler+0x12c>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d10b      	bne.n	8007eda <xPortStartScheduler+0x4a>
	__asm volatile
 8007ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec6:	f383 8811 	msr	BASEPRI, r3
 8007eca:	f3bf 8f6f 	isb	sy
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	60fb      	str	r3, [r7, #12]
}
 8007ed4:	bf00      	nop
 8007ed6:	bf00      	nop
 8007ed8:	e7fd      	b.n	8007ed6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007eda:	4b39      	ldr	r3, [pc, #228]	@ (8007fc0 <xPortStartScheduler+0x130>)
 8007edc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	22ff      	movs	r2, #255	@ 0xff
 8007eea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ef4:	78fb      	ldrb	r3, [r7, #3]
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007efc:	b2da      	uxtb	r2, r3
 8007efe:	4b31      	ldr	r3, [pc, #196]	@ (8007fc4 <xPortStartScheduler+0x134>)
 8007f00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f02:	4b31      	ldr	r3, [pc, #196]	@ (8007fc8 <xPortStartScheduler+0x138>)
 8007f04:	2207      	movs	r2, #7
 8007f06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f08:	e009      	b.n	8007f1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007f0a:	4b2f      	ldr	r3, [pc, #188]	@ (8007fc8 <xPortStartScheduler+0x138>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	4a2d      	ldr	r2, [pc, #180]	@ (8007fc8 <xPortStartScheduler+0x138>)
 8007f12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f14:	78fb      	ldrb	r3, [r7, #3]
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	005b      	lsls	r3, r3, #1
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f1e:	78fb      	ldrb	r3, [r7, #3]
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f26:	2b80      	cmp	r3, #128	@ 0x80
 8007f28:	d0ef      	beq.n	8007f0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f2a:	4b27      	ldr	r3, [pc, #156]	@ (8007fc8 <xPortStartScheduler+0x138>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f1c3 0307 	rsb	r3, r3, #7
 8007f32:	2b04      	cmp	r3, #4
 8007f34:	d00b      	beq.n	8007f4e <xPortStartScheduler+0xbe>
	__asm volatile
 8007f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f3a:	f383 8811 	msr	BASEPRI, r3
 8007f3e:	f3bf 8f6f 	isb	sy
 8007f42:	f3bf 8f4f 	dsb	sy
 8007f46:	60bb      	str	r3, [r7, #8]
}
 8007f48:	bf00      	nop
 8007f4a:	bf00      	nop
 8007f4c:	e7fd      	b.n	8007f4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8007fc8 <xPortStartScheduler+0x138>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	021b      	lsls	r3, r3, #8
 8007f54:	4a1c      	ldr	r2, [pc, #112]	@ (8007fc8 <xPortStartScheduler+0x138>)
 8007f56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f58:	4b1b      	ldr	r3, [pc, #108]	@ (8007fc8 <xPortStartScheduler+0x138>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007f60:	4a19      	ldr	r2, [pc, #100]	@ (8007fc8 <xPortStartScheduler+0x138>)
 8007f62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	b2da      	uxtb	r2, r3
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f6c:	4b17      	ldr	r3, [pc, #92]	@ (8007fcc <xPortStartScheduler+0x13c>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a16      	ldr	r2, [pc, #88]	@ (8007fcc <xPortStartScheduler+0x13c>)
 8007f72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007f76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f78:	4b14      	ldr	r3, [pc, #80]	@ (8007fcc <xPortStartScheduler+0x13c>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a13      	ldr	r2, [pc, #76]	@ (8007fcc <xPortStartScheduler+0x13c>)
 8007f7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007f82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007f84:	f000 f8da 	bl	800813c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f88:	4b11      	ldr	r3, [pc, #68]	@ (8007fd0 <xPortStartScheduler+0x140>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007f8e:	f000 f8f9 	bl	8008184 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f92:	4b10      	ldr	r3, [pc, #64]	@ (8007fd4 <xPortStartScheduler+0x144>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a0f      	ldr	r2, [pc, #60]	@ (8007fd4 <xPortStartScheduler+0x144>)
 8007f98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007f9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007f9e:	f7ff ff63 	bl	8007e68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007fa2:	f7ff f83b 	bl	800701c <vTaskSwitchContext>
	prvTaskExitError();
 8007fa6:	f7ff ff19 	bl	8007ddc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3718      	adds	r7, #24
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	e000ed00 	.word	0xe000ed00
 8007fb8:	410fc271 	.word	0x410fc271
 8007fbc:	410fc270 	.word	0x410fc270
 8007fc0:	e000e400 	.word	0xe000e400
 8007fc4:	20001188 	.word	0x20001188
 8007fc8:	2000118c 	.word	0x2000118c
 8007fcc:	e000ed20 	.word	0xe000ed20
 8007fd0:	20000014 	.word	0x20000014
 8007fd4:	e000ef34 	.word	0xe000ef34

08007fd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8007fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	607b      	str	r3, [r7, #4]
}
 8007ff0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007ff2:	4b10      	ldr	r3, [pc, #64]	@ (8008034 <vPortEnterCritical+0x5c>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	4a0e      	ldr	r2, [pc, #56]	@ (8008034 <vPortEnterCritical+0x5c>)
 8007ffa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8008034 <vPortEnterCritical+0x5c>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d110      	bne.n	8008026 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008004:	4b0c      	ldr	r3, [pc, #48]	@ (8008038 <vPortEnterCritical+0x60>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00b      	beq.n	8008026 <vPortEnterCritical+0x4e>
	__asm volatile
 800800e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008012:	f383 8811 	msr	BASEPRI, r3
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	603b      	str	r3, [r7, #0]
}
 8008020:	bf00      	nop
 8008022:	bf00      	nop
 8008024:	e7fd      	b.n	8008022 <vPortEnterCritical+0x4a>
	}
}
 8008026:	bf00      	nop
 8008028:	370c      	adds	r7, #12
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	20000014 	.word	0x20000014
 8008038:	e000ed04 	.word	0xe000ed04

0800803c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008042:	4b12      	ldr	r3, [pc, #72]	@ (800808c <vPortExitCritical+0x50>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d10b      	bne.n	8008062 <vPortExitCritical+0x26>
	__asm volatile
 800804a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800804e:	f383 8811 	msr	BASEPRI, r3
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	607b      	str	r3, [r7, #4]
}
 800805c:	bf00      	nop
 800805e:	bf00      	nop
 8008060:	e7fd      	b.n	800805e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008062:	4b0a      	ldr	r3, [pc, #40]	@ (800808c <vPortExitCritical+0x50>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	3b01      	subs	r3, #1
 8008068:	4a08      	ldr	r2, [pc, #32]	@ (800808c <vPortExitCritical+0x50>)
 800806a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800806c:	4b07      	ldr	r3, [pc, #28]	@ (800808c <vPortExitCritical+0x50>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d105      	bne.n	8008080 <vPortExitCritical+0x44>
 8008074:	2300      	movs	r3, #0
 8008076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	f383 8811 	msr	BASEPRI, r3
}
 800807e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr
 800808c:	20000014 	.word	0x20000014

08008090 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008090:	f3ef 8009 	mrs	r0, PSP
 8008094:	f3bf 8f6f 	isb	sy
 8008098:	4b15      	ldr	r3, [pc, #84]	@ (80080f0 <pxCurrentTCBConst>)
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	f01e 0f10 	tst.w	lr, #16
 80080a0:	bf08      	it	eq
 80080a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80080a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080aa:	6010      	str	r0, [r2, #0]
 80080ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80080b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80080b4:	f380 8811 	msr	BASEPRI, r0
 80080b8:	f3bf 8f4f 	dsb	sy
 80080bc:	f3bf 8f6f 	isb	sy
 80080c0:	f7fe ffac 	bl	800701c <vTaskSwitchContext>
 80080c4:	f04f 0000 	mov.w	r0, #0
 80080c8:	f380 8811 	msr	BASEPRI, r0
 80080cc:	bc09      	pop	{r0, r3}
 80080ce:	6819      	ldr	r1, [r3, #0]
 80080d0:	6808      	ldr	r0, [r1, #0]
 80080d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d6:	f01e 0f10 	tst.w	lr, #16
 80080da:	bf08      	it	eq
 80080dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80080e0:	f380 8809 	msr	PSP, r0
 80080e4:	f3bf 8f6f 	isb	sy
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	f3af 8000 	nop.w

080080f0 <pxCurrentTCBConst>:
 80080f0:	20000b5c 	.word	0x20000b5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80080f4:	bf00      	nop
 80080f6:	bf00      	nop

080080f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
	__asm volatile
 80080fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008102:	f383 8811 	msr	BASEPRI, r3
 8008106:	f3bf 8f6f 	isb	sy
 800810a:	f3bf 8f4f 	dsb	sy
 800810e:	607b      	str	r3, [r7, #4]
}
 8008110:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008112:	f7fe fec9 	bl	8006ea8 <xTaskIncrementTick>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d003      	beq.n	8008124 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800811c:	4b06      	ldr	r3, [pc, #24]	@ (8008138 <xPortSysTickHandler+0x40>)
 800811e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008122:	601a      	str	r2, [r3, #0]
 8008124:	2300      	movs	r3, #0
 8008126:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	f383 8811 	msr	BASEPRI, r3
}
 800812e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008130:	bf00      	nop
 8008132:	3708      	adds	r7, #8
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}
 8008138:	e000ed04 	.word	0xe000ed04

0800813c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800813c:	b480      	push	{r7}
 800813e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008140:	4b0b      	ldr	r3, [pc, #44]	@ (8008170 <vPortSetupTimerInterrupt+0x34>)
 8008142:	2200      	movs	r2, #0
 8008144:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008146:	4b0b      	ldr	r3, [pc, #44]	@ (8008174 <vPortSetupTimerInterrupt+0x38>)
 8008148:	2200      	movs	r2, #0
 800814a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800814c:	4b0a      	ldr	r3, [pc, #40]	@ (8008178 <vPortSetupTimerInterrupt+0x3c>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a0a      	ldr	r2, [pc, #40]	@ (800817c <vPortSetupTimerInterrupt+0x40>)
 8008152:	fba2 2303 	umull	r2, r3, r2, r3
 8008156:	099b      	lsrs	r3, r3, #6
 8008158:	4a09      	ldr	r2, [pc, #36]	@ (8008180 <vPortSetupTimerInterrupt+0x44>)
 800815a:	3b01      	subs	r3, #1
 800815c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800815e:	4b04      	ldr	r3, [pc, #16]	@ (8008170 <vPortSetupTimerInterrupt+0x34>)
 8008160:	2207      	movs	r2, #7
 8008162:	601a      	str	r2, [r3, #0]
}
 8008164:	bf00      	nop
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	e000e010 	.word	0xe000e010
 8008174:	e000e018 	.word	0xe000e018
 8008178:	20000008 	.word	0x20000008
 800817c:	10624dd3 	.word	0x10624dd3
 8008180:	e000e014 	.word	0xe000e014

08008184 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008184:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008194 <vPortEnableVFP+0x10>
 8008188:	6801      	ldr	r1, [r0, #0]
 800818a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800818e:	6001      	str	r1, [r0, #0]
 8008190:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008192:	bf00      	nop
 8008194:	e000ed88 	.word	0xe000ed88

08008198 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800819e:	f3ef 8305 	mrs	r3, IPSR
 80081a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2b0f      	cmp	r3, #15
 80081a8:	d915      	bls.n	80081d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80081aa:	4a18      	ldr	r2, [pc, #96]	@ (800820c <vPortValidateInterruptPriority+0x74>)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	4413      	add	r3, r2
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80081b4:	4b16      	ldr	r3, [pc, #88]	@ (8008210 <vPortValidateInterruptPriority+0x78>)
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	7afa      	ldrb	r2, [r7, #11]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d20b      	bcs.n	80081d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80081be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c2:	f383 8811 	msr	BASEPRI, r3
 80081c6:	f3bf 8f6f 	isb	sy
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	607b      	str	r3, [r7, #4]
}
 80081d0:	bf00      	nop
 80081d2:	bf00      	nop
 80081d4:	e7fd      	b.n	80081d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80081d6:	4b0f      	ldr	r3, [pc, #60]	@ (8008214 <vPortValidateInterruptPriority+0x7c>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80081de:	4b0e      	ldr	r3, [pc, #56]	@ (8008218 <vPortValidateInterruptPriority+0x80>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d90b      	bls.n	80081fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80081e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ea:	f383 8811 	msr	BASEPRI, r3
 80081ee:	f3bf 8f6f 	isb	sy
 80081f2:	f3bf 8f4f 	dsb	sy
 80081f6:	603b      	str	r3, [r7, #0]
}
 80081f8:	bf00      	nop
 80081fa:	bf00      	nop
 80081fc:	e7fd      	b.n	80081fa <vPortValidateInterruptPriority+0x62>
	}
 80081fe:	bf00      	nop
 8008200:	3714      	adds	r7, #20
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	e000e3f0 	.word	0xe000e3f0
 8008210:	20001188 	.word	0x20001188
 8008214:	e000ed0c 	.word	0xe000ed0c
 8008218:	2000118c 	.word	0x2000118c

0800821c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b08a      	sub	sp, #40	@ 0x28
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008224:	2300      	movs	r3, #0
 8008226:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008228:	f7fe fd82 	bl	8006d30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800822c:	4b5c      	ldr	r3, [pc, #368]	@ (80083a0 <pvPortMalloc+0x184>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d101      	bne.n	8008238 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008234:	f000 f924 	bl	8008480 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008238:	4b5a      	ldr	r3, [pc, #360]	@ (80083a4 <pvPortMalloc+0x188>)
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	4013      	ands	r3, r2
 8008240:	2b00      	cmp	r3, #0
 8008242:	f040 8095 	bne.w	8008370 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d01e      	beq.n	800828a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800824c:	2208      	movs	r2, #8
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4413      	add	r3, r2
 8008252:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f003 0307 	and.w	r3, r3, #7
 800825a:	2b00      	cmp	r3, #0
 800825c:	d015      	beq.n	800828a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f023 0307 	bic.w	r3, r3, #7
 8008264:	3308      	adds	r3, #8
 8008266:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f003 0307 	and.w	r3, r3, #7
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00b      	beq.n	800828a <pvPortMalloc+0x6e>
	__asm volatile
 8008272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	617b      	str	r3, [r7, #20]
}
 8008284:	bf00      	nop
 8008286:	bf00      	nop
 8008288:	e7fd      	b.n	8008286 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d06f      	beq.n	8008370 <pvPortMalloc+0x154>
 8008290:	4b45      	ldr	r3, [pc, #276]	@ (80083a8 <pvPortMalloc+0x18c>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	429a      	cmp	r2, r3
 8008298:	d86a      	bhi.n	8008370 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800829a:	4b44      	ldr	r3, [pc, #272]	@ (80083ac <pvPortMalloc+0x190>)
 800829c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800829e:	4b43      	ldr	r3, [pc, #268]	@ (80083ac <pvPortMalloc+0x190>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082a4:	e004      	b.n	80082b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80082a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80082aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d903      	bls.n	80082c2 <pvPortMalloc+0xa6>
 80082ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d1f1      	bne.n	80082a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80082c2:	4b37      	ldr	r3, [pc, #220]	@ (80083a0 <pvPortMalloc+0x184>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d051      	beq.n	8008370 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80082cc:	6a3b      	ldr	r3, [r7, #32]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2208      	movs	r2, #8
 80082d2:	4413      	add	r3, r2
 80082d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80082d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	6a3b      	ldr	r3, [r7, #32]
 80082dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80082de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e0:	685a      	ldr	r2, [r3, #4]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	1ad2      	subs	r2, r2, r3
 80082e6:	2308      	movs	r3, #8
 80082e8:	005b      	lsls	r3, r3, #1
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d920      	bls.n	8008330 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80082ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4413      	add	r3, r2
 80082f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	f003 0307 	and.w	r3, r3, #7
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00b      	beq.n	8008318 <pvPortMalloc+0xfc>
	__asm volatile
 8008300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008304:	f383 8811 	msr	BASEPRI, r3
 8008308:	f3bf 8f6f 	isb	sy
 800830c:	f3bf 8f4f 	dsb	sy
 8008310:	613b      	str	r3, [r7, #16]
}
 8008312:	bf00      	nop
 8008314:	bf00      	nop
 8008316:	e7fd      	b.n	8008314 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800831a:	685a      	ldr	r2, [r3, #4]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	1ad2      	subs	r2, r2, r3
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800832a:	69b8      	ldr	r0, [r7, #24]
 800832c:	f000 f90a 	bl	8008544 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008330:	4b1d      	ldr	r3, [pc, #116]	@ (80083a8 <pvPortMalloc+0x18c>)
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	1ad3      	subs	r3, r2, r3
 800833a:	4a1b      	ldr	r2, [pc, #108]	@ (80083a8 <pvPortMalloc+0x18c>)
 800833c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800833e:	4b1a      	ldr	r3, [pc, #104]	@ (80083a8 <pvPortMalloc+0x18c>)
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	4b1b      	ldr	r3, [pc, #108]	@ (80083b0 <pvPortMalloc+0x194>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	429a      	cmp	r2, r3
 8008348:	d203      	bcs.n	8008352 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800834a:	4b17      	ldr	r3, [pc, #92]	@ (80083a8 <pvPortMalloc+0x18c>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a18      	ldr	r2, [pc, #96]	@ (80083b0 <pvPortMalloc+0x194>)
 8008350:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008354:	685a      	ldr	r2, [r3, #4]
 8008356:	4b13      	ldr	r3, [pc, #76]	@ (80083a4 <pvPortMalloc+0x188>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	431a      	orrs	r2, r3
 800835c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008362:	2200      	movs	r2, #0
 8008364:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008366:	4b13      	ldr	r3, [pc, #76]	@ (80083b4 <pvPortMalloc+0x198>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	3301      	adds	r3, #1
 800836c:	4a11      	ldr	r2, [pc, #68]	@ (80083b4 <pvPortMalloc+0x198>)
 800836e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008370:	f7fe fcec 	bl	8006d4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	f003 0307 	and.w	r3, r3, #7
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00b      	beq.n	8008396 <pvPortMalloc+0x17a>
	__asm volatile
 800837e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008382:	f383 8811 	msr	BASEPRI, r3
 8008386:	f3bf 8f6f 	isb	sy
 800838a:	f3bf 8f4f 	dsb	sy
 800838e:	60fb      	str	r3, [r7, #12]
}
 8008390:	bf00      	nop
 8008392:	bf00      	nop
 8008394:	e7fd      	b.n	8008392 <pvPortMalloc+0x176>
	return pvReturn;
 8008396:	69fb      	ldr	r3, [r7, #28]
}
 8008398:	4618      	mov	r0, r3
 800839a:	3728      	adds	r7, #40	@ 0x28
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	20004d98 	.word	0x20004d98
 80083a4:	20004dac 	.word	0x20004dac
 80083a8:	20004d9c 	.word	0x20004d9c
 80083ac:	20004d90 	.word	0x20004d90
 80083b0:	20004da0 	.word	0x20004da0
 80083b4:	20004da4 	.word	0x20004da4

080083b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b086      	sub	sp, #24
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d04f      	beq.n	800846a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80083ca:	2308      	movs	r3, #8
 80083cc:	425b      	negs	r3, r3
 80083ce:	697a      	ldr	r2, [r7, #20]
 80083d0:	4413      	add	r3, r2
 80083d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	685a      	ldr	r2, [r3, #4]
 80083dc:	4b25      	ldr	r3, [pc, #148]	@ (8008474 <vPortFree+0xbc>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4013      	ands	r3, r2
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d10b      	bne.n	80083fe <vPortFree+0x46>
	__asm volatile
 80083e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ea:	f383 8811 	msr	BASEPRI, r3
 80083ee:	f3bf 8f6f 	isb	sy
 80083f2:	f3bf 8f4f 	dsb	sy
 80083f6:	60fb      	str	r3, [r7, #12]
}
 80083f8:	bf00      	nop
 80083fa:	bf00      	nop
 80083fc:	e7fd      	b.n	80083fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00b      	beq.n	800841e <vPortFree+0x66>
	__asm volatile
 8008406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800840a:	f383 8811 	msr	BASEPRI, r3
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	60bb      	str	r3, [r7, #8]
}
 8008418:	bf00      	nop
 800841a:	bf00      	nop
 800841c:	e7fd      	b.n	800841a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	685a      	ldr	r2, [r3, #4]
 8008422:	4b14      	ldr	r3, [pc, #80]	@ (8008474 <vPortFree+0xbc>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4013      	ands	r3, r2
 8008428:	2b00      	cmp	r3, #0
 800842a:	d01e      	beq.n	800846a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d11a      	bne.n	800846a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	685a      	ldr	r2, [r3, #4]
 8008438:	4b0e      	ldr	r3, [pc, #56]	@ (8008474 <vPortFree+0xbc>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	43db      	mvns	r3, r3
 800843e:	401a      	ands	r2, r3
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008444:	f7fe fc74 	bl	8006d30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	685a      	ldr	r2, [r3, #4]
 800844c:	4b0a      	ldr	r3, [pc, #40]	@ (8008478 <vPortFree+0xc0>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4413      	add	r3, r2
 8008452:	4a09      	ldr	r2, [pc, #36]	@ (8008478 <vPortFree+0xc0>)
 8008454:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008456:	6938      	ldr	r0, [r7, #16]
 8008458:	f000 f874 	bl	8008544 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800845c:	4b07      	ldr	r3, [pc, #28]	@ (800847c <vPortFree+0xc4>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	3301      	adds	r3, #1
 8008462:	4a06      	ldr	r2, [pc, #24]	@ (800847c <vPortFree+0xc4>)
 8008464:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008466:	f7fe fc71 	bl	8006d4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800846a:	bf00      	nop
 800846c:	3718      	adds	r7, #24
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	20004dac 	.word	0x20004dac
 8008478:	20004d9c 	.word	0x20004d9c
 800847c:	20004da8 	.word	0x20004da8

08008480 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008486:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800848a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800848c:	4b27      	ldr	r3, [pc, #156]	@ (800852c <prvHeapInit+0xac>)
 800848e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f003 0307 	and.w	r3, r3, #7
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00c      	beq.n	80084b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	3307      	adds	r3, #7
 800849e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f023 0307 	bic.w	r3, r3, #7
 80084a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80084a8:	68ba      	ldr	r2, [r7, #8]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	1ad3      	subs	r3, r2, r3
 80084ae:	4a1f      	ldr	r2, [pc, #124]	@ (800852c <prvHeapInit+0xac>)
 80084b0:	4413      	add	r3, r2
 80084b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80084b8:	4a1d      	ldr	r2, [pc, #116]	@ (8008530 <prvHeapInit+0xb0>)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80084be:	4b1c      	ldr	r3, [pc, #112]	@ (8008530 <prvHeapInit+0xb0>)
 80084c0:	2200      	movs	r2, #0
 80084c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	68ba      	ldr	r2, [r7, #8]
 80084c8:	4413      	add	r3, r2
 80084ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80084cc:	2208      	movs	r2, #8
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	1a9b      	subs	r3, r3, r2
 80084d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f023 0307 	bic.w	r3, r3, #7
 80084da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	4a15      	ldr	r2, [pc, #84]	@ (8008534 <prvHeapInit+0xb4>)
 80084e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80084e2:	4b14      	ldr	r3, [pc, #80]	@ (8008534 <prvHeapInit+0xb4>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2200      	movs	r2, #0
 80084e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80084ea:	4b12      	ldr	r3, [pc, #72]	@ (8008534 <prvHeapInit+0xb4>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2200      	movs	r2, #0
 80084f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	1ad2      	subs	r2, r2, r3
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008500:	4b0c      	ldr	r3, [pc, #48]	@ (8008534 <prvHeapInit+0xb4>)
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	4a0a      	ldr	r2, [pc, #40]	@ (8008538 <prvHeapInit+0xb8>)
 800850e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	4a09      	ldr	r2, [pc, #36]	@ (800853c <prvHeapInit+0xbc>)
 8008516:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008518:	4b09      	ldr	r3, [pc, #36]	@ (8008540 <prvHeapInit+0xc0>)
 800851a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800851e:	601a      	str	r2, [r3, #0]
}
 8008520:	bf00      	nop
 8008522:	3714      	adds	r7, #20
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr
 800852c:	20001190 	.word	0x20001190
 8008530:	20004d90 	.word	0x20004d90
 8008534:	20004d98 	.word	0x20004d98
 8008538:	20004da0 	.word	0x20004da0
 800853c:	20004d9c 	.word	0x20004d9c
 8008540:	20004dac 	.word	0x20004dac

08008544 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800854c:	4b28      	ldr	r3, [pc, #160]	@ (80085f0 <prvInsertBlockIntoFreeList+0xac>)
 800854e:	60fb      	str	r3, [r7, #12]
 8008550:	e002      	b.n	8008558 <prvInsertBlockIntoFreeList+0x14>
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	60fb      	str	r3, [r7, #12]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	429a      	cmp	r2, r3
 8008560:	d8f7      	bhi.n	8008552 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	68ba      	ldr	r2, [r7, #8]
 800856c:	4413      	add	r3, r2
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	429a      	cmp	r2, r3
 8008572:	d108      	bne.n	8008586 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	685a      	ldr	r2, [r3, #4]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	441a      	add	r2, r3
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	68ba      	ldr	r2, [r7, #8]
 8008590:	441a      	add	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	429a      	cmp	r2, r3
 8008598:	d118      	bne.n	80085cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	4b15      	ldr	r3, [pc, #84]	@ (80085f4 <prvInsertBlockIntoFreeList+0xb0>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d00d      	beq.n	80085c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	685a      	ldr	r2, [r3, #4]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	441a      	add	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	601a      	str	r2, [r3, #0]
 80085c0:	e008      	b.n	80085d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80085c2:	4b0c      	ldr	r3, [pc, #48]	@ (80085f4 <prvInsertBlockIntoFreeList+0xb0>)
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	601a      	str	r2, [r3, #0]
 80085ca:	e003      	b.n	80085d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d002      	beq.n	80085e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085e2:	bf00      	nop
 80085e4:	3714      	adds	r7, #20
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop
 80085f0:	20004d90 	.word	0x20004d90
 80085f4:	20004d98 	.word	0x20004d98

080085f8 <__cvt>:
 80085f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085fc:	ec57 6b10 	vmov	r6, r7, d0
 8008600:	2f00      	cmp	r7, #0
 8008602:	460c      	mov	r4, r1
 8008604:	4619      	mov	r1, r3
 8008606:	463b      	mov	r3, r7
 8008608:	bfbb      	ittet	lt
 800860a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800860e:	461f      	movlt	r7, r3
 8008610:	2300      	movge	r3, #0
 8008612:	232d      	movlt	r3, #45	@ 0x2d
 8008614:	700b      	strb	r3, [r1, #0]
 8008616:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008618:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800861c:	4691      	mov	r9, r2
 800861e:	f023 0820 	bic.w	r8, r3, #32
 8008622:	bfbc      	itt	lt
 8008624:	4632      	movlt	r2, r6
 8008626:	4616      	movlt	r6, r2
 8008628:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800862c:	d005      	beq.n	800863a <__cvt+0x42>
 800862e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008632:	d100      	bne.n	8008636 <__cvt+0x3e>
 8008634:	3401      	adds	r4, #1
 8008636:	2102      	movs	r1, #2
 8008638:	e000      	b.n	800863c <__cvt+0x44>
 800863a:	2103      	movs	r1, #3
 800863c:	ab03      	add	r3, sp, #12
 800863e:	9301      	str	r3, [sp, #4]
 8008640:	ab02      	add	r3, sp, #8
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	ec47 6b10 	vmov	d0, r6, r7
 8008648:	4653      	mov	r3, sl
 800864a:	4622      	mov	r2, r4
 800864c:	f000 fe7c 	bl	8009348 <_dtoa_r>
 8008650:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008654:	4605      	mov	r5, r0
 8008656:	d119      	bne.n	800868c <__cvt+0x94>
 8008658:	f019 0f01 	tst.w	r9, #1
 800865c:	d00e      	beq.n	800867c <__cvt+0x84>
 800865e:	eb00 0904 	add.w	r9, r0, r4
 8008662:	2200      	movs	r2, #0
 8008664:	2300      	movs	r3, #0
 8008666:	4630      	mov	r0, r6
 8008668:	4639      	mov	r1, r7
 800866a:	f7f8 fa35 	bl	8000ad8 <__aeabi_dcmpeq>
 800866e:	b108      	cbz	r0, 8008674 <__cvt+0x7c>
 8008670:	f8cd 900c 	str.w	r9, [sp, #12]
 8008674:	2230      	movs	r2, #48	@ 0x30
 8008676:	9b03      	ldr	r3, [sp, #12]
 8008678:	454b      	cmp	r3, r9
 800867a:	d31e      	bcc.n	80086ba <__cvt+0xc2>
 800867c:	9b03      	ldr	r3, [sp, #12]
 800867e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008680:	1b5b      	subs	r3, r3, r5
 8008682:	4628      	mov	r0, r5
 8008684:	6013      	str	r3, [r2, #0]
 8008686:	b004      	add	sp, #16
 8008688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800868c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008690:	eb00 0904 	add.w	r9, r0, r4
 8008694:	d1e5      	bne.n	8008662 <__cvt+0x6a>
 8008696:	7803      	ldrb	r3, [r0, #0]
 8008698:	2b30      	cmp	r3, #48	@ 0x30
 800869a:	d10a      	bne.n	80086b2 <__cvt+0xba>
 800869c:	2200      	movs	r2, #0
 800869e:	2300      	movs	r3, #0
 80086a0:	4630      	mov	r0, r6
 80086a2:	4639      	mov	r1, r7
 80086a4:	f7f8 fa18 	bl	8000ad8 <__aeabi_dcmpeq>
 80086a8:	b918      	cbnz	r0, 80086b2 <__cvt+0xba>
 80086aa:	f1c4 0401 	rsb	r4, r4, #1
 80086ae:	f8ca 4000 	str.w	r4, [sl]
 80086b2:	f8da 3000 	ldr.w	r3, [sl]
 80086b6:	4499      	add	r9, r3
 80086b8:	e7d3      	b.n	8008662 <__cvt+0x6a>
 80086ba:	1c59      	adds	r1, r3, #1
 80086bc:	9103      	str	r1, [sp, #12]
 80086be:	701a      	strb	r2, [r3, #0]
 80086c0:	e7d9      	b.n	8008676 <__cvt+0x7e>

080086c2 <__exponent>:
 80086c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086c4:	2900      	cmp	r1, #0
 80086c6:	bfba      	itte	lt
 80086c8:	4249      	neglt	r1, r1
 80086ca:	232d      	movlt	r3, #45	@ 0x2d
 80086cc:	232b      	movge	r3, #43	@ 0x2b
 80086ce:	2909      	cmp	r1, #9
 80086d0:	7002      	strb	r2, [r0, #0]
 80086d2:	7043      	strb	r3, [r0, #1]
 80086d4:	dd29      	ble.n	800872a <__exponent+0x68>
 80086d6:	f10d 0307 	add.w	r3, sp, #7
 80086da:	461d      	mov	r5, r3
 80086dc:	270a      	movs	r7, #10
 80086de:	461a      	mov	r2, r3
 80086e0:	fbb1 f6f7 	udiv	r6, r1, r7
 80086e4:	fb07 1416 	mls	r4, r7, r6, r1
 80086e8:	3430      	adds	r4, #48	@ 0x30
 80086ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 80086ee:	460c      	mov	r4, r1
 80086f0:	2c63      	cmp	r4, #99	@ 0x63
 80086f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80086f6:	4631      	mov	r1, r6
 80086f8:	dcf1      	bgt.n	80086de <__exponent+0x1c>
 80086fa:	3130      	adds	r1, #48	@ 0x30
 80086fc:	1e94      	subs	r4, r2, #2
 80086fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008702:	1c41      	adds	r1, r0, #1
 8008704:	4623      	mov	r3, r4
 8008706:	42ab      	cmp	r3, r5
 8008708:	d30a      	bcc.n	8008720 <__exponent+0x5e>
 800870a:	f10d 0309 	add.w	r3, sp, #9
 800870e:	1a9b      	subs	r3, r3, r2
 8008710:	42ac      	cmp	r4, r5
 8008712:	bf88      	it	hi
 8008714:	2300      	movhi	r3, #0
 8008716:	3302      	adds	r3, #2
 8008718:	4403      	add	r3, r0
 800871a:	1a18      	subs	r0, r3, r0
 800871c:	b003      	add	sp, #12
 800871e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008720:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008724:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008728:	e7ed      	b.n	8008706 <__exponent+0x44>
 800872a:	2330      	movs	r3, #48	@ 0x30
 800872c:	3130      	adds	r1, #48	@ 0x30
 800872e:	7083      	strb	r3, [r0, #2]
 8008730:	70c1      	strb	r1, [r0, #3]
 8008732:	1d03      	adds	r3, r0, #4
 8008734:	e7f1      	b.n	800871a <__exponent+0x58>
	...

08008738 <_printf_float>:
 8008738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873c:	b08d      	sub	sp, #52	@ 0x34
 800873e:	460c      	mov	r4, r1
 8008740:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008744:	4616      	mov	r6, r2
 8008746:	461f      	mov	r7, r3
 8008748:	4605      	mov	r5, r0
 800874a:	f000 fcef 	bl	800912c <_localeconv_r>
 800874e:	6803      	ldr	r3, [r0, #0]
 8008750:	9304      	str	r3, [sp, #16]
 8008752:	4618      	mov	r0, r3
 8008754:	f7f7 fd94 	bl	8000280 <strlen>
 8008758:	2300      	movs	r3, #0
 800875a:	930a      	str	r3, [sp, #40]	@ 0x28
 800875c:	f8d8 3000 	ldr.w	r3, [r8]
 8008760:	9005      	str	r0, [sp, #20]
 8008762:	3307      	adds	r3, #7
 8008764:	f023 0307 	bic.w	r3, r3, #7
 8008768:	f103 0208 	add.w	r2, r3, #8
 800876c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008770:	f8d4 b000 	ldr.w	fp, [r4]
 8008774:	f8c8 2000 	str.w	r2, [r8]
 8008778:	e9d3 8900 	ldrd	r8, r9, [r3]
 800877c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008780:	9307      	str	r3, [sp, #28]
 8008782:	f8cd 8018 	str.w	r8, [sp, #24]
 8008786:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800878a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800878e:	4b9c      	ldr	r3, [pc, #624]	@ (8008a00 <_printf_float+0x2c8>)
 8008790:	f04f 32ff 	mov.w	r2, #4294967295
 8008794:	f7f8 f9d2 	bl	8000b3c <__aeabi_dcmpun>
 8008798:	bb70      	cbnz	r0, 80087f8 <_printf_float+0xc0>
 800879a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800879e:	4b98      	ldr	r3, [pc, #608]	@ (8008a00 <_printf_float+0x2c8>)
 80087a0:	f04f 32ff 	mov.w	r2, #4294967295
 80087a4:	f7f8 f9ac 	bl	8000b00 <__aeabi_dcmple>
 80087a8:	bb30      	cbnz	r0, 80087f8 <_printf_float+0xc0>
 80087aa:	2200      	movs	r2, #0
 80087ac:	2300      	movs	r3, #0
 80087ae:	4640      	mov	r0, r8
 80087b0:	4649      	mov	r1, r9
 80087b2:	f7f8 f99b 	bl	8000aec <__aeabi_dcmplt>
 80087b6:	b110      	cbz	r0, 80087be <_printf_float+0x86>
 80087b8:	232d      	movs	r3, #45	@ 0x2d
 80087ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087be:	4a91      	ldr	r2, [pc, #580]	@ (8008a04 <_printf_float+0x2cc>)
 80087c0:	4b91      	ldr	r3, [pc, #580]	@ (8008a08 <_printf_float+0x2d0>)
 80087c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80087c6:	bf94      	ite	ls
 80087c8:	4690      	movls	r8, r2
 80087ca:	4698      	movhi	r8, r3
 80087cc:	2303      	movs	r3, #3
 80087ce:	6123      	str	r3, [r4, #16]
 80087d0:	f02b 0304 	bic.w	r3, fp, #4
 80087d4:	6023      	str	r3, [r4, #0]
 80087d6:	f04f 0900 	mov.w	r9, #0
 80087da:	9700      	str	r7, [sp, #0]
 80087dc:	4633      	mov	r3, r6
 80087de:	aa0b      	add	r2, sp, #44	@ 0x2c
 80087e0:	4621      	mov	r1, r4
 80087e2:	4628      	mov	r0, r5
 80087e4:	f000 f9d2 	bl	8008b8c <_printf_common>
 80087e8:	3001      	adds	r0, #1
 80087ea:	f040 808d 	bne.w	8008908 <_printf_float+0x1d0>
 80087ee:	f04f 30ff 	mov.w	r0, #4294967295
 80087f2:	b00d      	add	sp, #52	@ 0x34
 80087f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f8:	4642      	mov	r2, r8
 80087fa:	464b      	mov	r3, r9
 80087fc:	4640      	mov	r0, r8
 80087fe:	4649      	mov	r1, r9
 8008800:	f7f8 f99c 	bl	8000b3c <__aeabi_dcmpun>
 8008804:	b140      	cbz	r0, 8008818 <_printf_float+0xe0>
 8008806:	464b      	mov	r3, r9
 8008808:	2b00      	cmp	r3, #0
 800880a:	bfbc      	itt	lt
 800880c:	232d      	movlt	r3, #45	@ 0x2d
 800880e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008812:	4a7e      	ldr	r2, [pc, #504]	@ (8008a0c <_printf_float+0x2d4>)
 8008814:	4b7e      	ldr	r3, [pc, #504]	@ (8008a10 <_printf_float+0x2d8>)
 8008816:	e7d4      	b.n	80087c2 <_printf_float+0x8a>
 8008818:	6863      	ldr	r3, [r4, #4]
 800881a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800881e:	9206      	str	r2, [sp, #24]
 8008820:	1c5a      	adds	r2, r3, #1
 8008822:	d13b      	bne.n	800889c <_printf_float+0x164>
 8008824:	2306      	movs	r3, #6
 8008826:	6063      	str	r3, [r4, #4]
 8008828:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800882c:	2300      	movs	r3, #0
 800882e:	6022      	str	r2, [r4, #0]
 8008830:	9303      	str	r3, [sp, #12]
 8008832:	ab0a      	add	r3, sp, #40	@ 0x28
 8008834:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008838:	ab09      	add	r3, sp, #36	@ 0x24
 800883a:	9300      	str	r3, [sp, #0]
 800883c:	6861      	ldr	r1, [r4, #4]
 800883e:	ec49 8b10 	vmov	d0, r8, r9
 8008842:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008846:	4628      	mov	r0, r5
 8008848:	f7ff fed6 	bl	80085f8 <__cvt>
 800884c:	9b06      	ldr	r3, [sp, #24]
 800884e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008850:	2b47      	cmp	r3, #71	@ 0x47
 8008852:	4680      	mov	r8, r0
 8008854:	d129      	bne.n	80088aa <_printf_float+0x172>
 8008856:	1cc8      	adds	r0, r1, #3
 8008858:	db02      	blt.n	8008860 <_printf_float+0x128>
 800885a:	6863      	ldr	r3, [r4, #4]
 800885c:	4299      	cmp	r1, r3
 800885e:	dd41      	ble.n	80088e4 <_printf_float+0x1ac>
 8008860:	f1aa 0a02 	sub.w	sl, sl, #2
 8008864:	fa5f fa8a 	uxtb.w	sl, sl
 8008868:	3901      	subs	r1, #1
 800886a:	4652      	mov	r2, sl
 800886c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008870:	9109      	str	r1, [sp, #36]	@ 0x24
 8008872:	f7ff ff26 	bl	80086c2 <__exponent>
 8008876:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008878:	1813      	adds	r3, r2, r0
 800887a:	2a01      	cmp	r2, #1
 800887c:	4681      	mov	r9, r0
 800887e:	6123      	str	r3, [r4, #16]
 8008880:	dc02      	bgt.n	8008888 <_printf_float+0x150>
 8008882:	6822      	ldr	r2, [r4, #0]
 8008884:	07d2      	lsls	r2, r2, #31
 8008886:	d501      	bpl.n	800888c <_printf_float+0x154>
 8008888:	3301      	adds	r3, #1
 800888a:	6123      	str	r3, [r4, #16]
 800888c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008890:	2b00      	cmp	r3, #0
 8008892:	d0a2      	beq.n	80087da <_printf_float+0xa2>
 8008894:	232d      	movs	r3, #45	@ 0x2d
 8008896:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800889a:	e79e      	b.n	80087da <_printf_float+0xa2>
 800889c:	9a06      	ldr	r2, [sp, #24]
 800889e:	2a47      	cmp	r2, #71	@ 0x47
 80088a0:	d1c2      	bne.n	8008828 <_printf_float+0xf0>
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1c0      	bne.n	8008828 <_printf_float+0xf0>
 80088a6:	2301      	movs	r3, #1
 80088a8:	e7bd      	b.n	8008826 <_printf_float+0xee>
 80088aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80088ae:	d9db      	bls.n	8008868 <_printf_float+0x130>
 80088b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80088b4:	d118      	bne.n	80088e8 <_printf_float+0x1b0>
 80088b6:	2900      	cmp	r1, #0
 80088b8:	6863      	ldr	r3, [r4, #4]
 80088ba:	dd0b      	ble.n	80088d4 <_printf_float+0x19c>
 80088bc:	6121      	str	r1, [r4, #16]
 80088be:	b913      	cbnz	r3, 80088c6 <_printf_float+0x18e>
 80088c0:	6822      	ldr	r2, [r4, #0]
 80088c2:	07d0      	lsls	r0, r2, #31
 80088c4:	d502      	bpl.n	80088cc <_printf_float+0x194>
 80088c6:	3301      	adds	r3, #1
 80088c8:	440b      	add	r3, r1
 80088ca:	6123      	str	r3, [r4, #16]
 80088cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80088ce:	f04f 0900 	mov.w	r9, #0
 80088d2:	e7db      	b.n	800888c <_printf_float+0x154>
 80088d4:	b913      	cbnz	r3, 80088dc <_printf_float+0x1a4>
 80088d6:	6822      	ldr	r2, [r4, #0]
 80088d8:	07d2      	lsls	r2, r2, #31
 80088da:	d501      	bpl.n	80088e0 <_printf_float+0x1a8>
 80088dc:	3302      	adds	r3, #2
 80088de:	e7f4      	b.n	80088ca <_printf_float+0x192>
 80088e0:	2301      	movs	r3, #1
 80088e2:	e7f2      	b.n	80088ca <_printf_float+0x192>
 80088e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80088e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088ea:	4299      	cmp	r1, r3
 80088ec:	db05      	blt.n	80088fa <_printf_float+0x1c2>
 80088ee:	6823      	ldr	r3, [r4, #0]
 80088f0:	6121      	str	r1, [r4, #16]
 80088f2:	07d8      	lsls	r0, r3, #31
 80088f4:	d5ea      	bpl.n	80088cc <_printf_float+0x194>
 80088f6:	1c4b      	adds	r3, r1, #1
 80088f8:	e7e7      	b.n	80088ca <_printf_float+0x192>
 80088fa:	2900      	cmp	r1, #0
 80088fc:	bfd4      	ite	le
 80088fe:	f1c1 0202 	rsble	r2, r1, #2
 8008902:	2201      	movgt	r2, #1
 8008904:	4413      	add	r3, r2
 8008906:	e7e0      	b.n	80088ca <_printf_float+0x192>
 8008908:	6823      	ldr	r3, [r4, #0]
 800890a:	055a      	lsls	r2, r3, #21
 800890c:	d407      	bmi.n	800891e <_printf_float+0x1e6>
 800890e:	6923      	ldr	r3, [r4, #16]
 8008910:	4642      	mov	r2, r8
 8008912:	4631      	mov	r1, r6
 8008914:	4628      	mov	r0, r5
 8008916:	47b8      	blx	r7
 8008918:	3001      	adds	r0, #1
 800891a:	d12b      	bne.n	8008974 <_printf_float+0x23c>
 800891c:	e767      	b.n	80087ee <_printf_float+0xb6>
 800891e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008922:	f240 80dd 	bls.w	8008ae0 <_printf_float+0x3a8>
 8008926:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800892a:	2200      	movs	r2, #0
 800892c:	2300      	movs	r3, #0
 800892e:	f7f8 f8d3 	bl	8000ad8 <__aeabi_dcmpeq>
 8008932:	2800      	cmp	r0, #0
 8008934:	d033      	beq.n	800899e <_printf_float+0x266>
 8008936:	4a37      	ldr	r2, [pc, #220]	@ (8008a14 <_printf_float+0x2dc>)
 8008938:	2301      	movs	r3, #1
 800893a:	4631      	mov	r1, r6
 800893c:	4628      	mov	r0, r5
 800893e:	47b8      	blx	r7
 8008940:	3001      	adds	r0, #1
 8008942:	f43f af54 	beq.w	80087ee <_printf_float+0xb6>
 8008946:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800894a:	4543      	cmp	r3, r8
 800894c:	db02      	blt.n	8008954 <_printf_float+0x21c>
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	07d8      	lsls	r0, r3, #31
 8008952:	d50f      	bpl.n	8008974 <_printf_float+0x23c>
 8008954:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008958:	4631      	mov	r1, r6
 800895a:	4628      	mov	r0, r5
 800895c:	47b8      	blx	r7
 800895e:	3001      	adds	r0, #1
 8008960:	f43f af45 	beq.w	80087ee <_printf_float+0xb6>
 8008964:	f04f 0900 	mov.w	r9, #0
 8008968:	f108 38ff 	add.w	r8, r8, #4294967295
 800896c:	f104 0a1a 	add.w	sl, r4, #26
 8008970:	45c8      	cmp	r8, r9
 8008972:	dc09      	bgt.n	8008988 <_printf_float+0x250>
 8008974:	6823      	ldr	r3, [r4, #0]
 8008976:	079b      	lsls	r3, r3, #30
 8008978:	f100 8103 	bmi.w	8008b82 <_printf_float+0x44a>
 800897c:	68e0      	ldr	r0, [r4, #12]
 800897e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008980:	4298      	cmp	r0, r3
 8008982:	bfb8      	it	lt
 8008984:	4618      	movlt	r0, r3
 8008986:	e734      	b.n	80087f2 <_printf_float+0xba>
 8008988:	2301      	movs	r3, #1
 800898a:	4652      	mov	r2, sl
 800898c:	4631      	mov	r1, r6
 800898e:	4628      	mov	r0, r5
 8008990:	47b8      	blx	r7
 8008992:	3001      	adds	r0, #1
 8008994:	f43f af2b 	beq.w	80087ee <_printf_float+0xb6>
 8008998:	f109 0901 	add.w	r9, r9, #1
 800899c:	e7e8      	b.n	8008970 <_printf_float+0x238>
 800899e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	dc39      	bgt.n	8008a18 <_printf_float+0x2e0>
 80089a4:	4a1b      	ldr	r2, [pc, #108]	@ (8008a14 <_printf_float+0x2dc>)
 80089a6:	2301      	movs	r3, #1
 80089a8:	4631      	mov	r1, r6
 80089aa:	4628      	mov	r0, r5
 80089ac:	47b8      	blx	r7
 80089ae:	3001      	adds	r0, #1
 80089b0:	f43f af1d 	beq.w	80087ee <_printf_float+0xb6>
 80089b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80089b8:	ea59 0303 	orrs.w	r3, r9, r3
 80089bc:	d102      	bne.n	80089c4 <_printf_float+0x28c>
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	07d9      	lsls	r1, r3, #31
 80089c2:	d5d7      	bpl.n	8008974 <_printf_float+0x23c>
 80089c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089c8:	4631      	mov	r1, r6
 80089ca:	4628      	mov	r0, r5
 80089cc:	47b8      	blx	r7
 80089ce:	3001      	adds	r0, #1
 80089d0:	f43f af0d 	beq.w	80087ee <_printf_float+0xb6>
 80089d4:	f04f 0a00 	mov.w	sl, #0
 80089d8:	f104 0b1a 	add.w	fp, r4, #26
 80089dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089de:	425b      	negs	r3, r3
 80089e0:	4553      	cmp	r3, sl
 80089e2:	dc01      	bgt.n	80089e8 <_printf_float+0x2b0>
 80089e4:	464b      	mov	r3, r9
 80089e6:	e793      	b.n	8008910 <_printf_float+0x1d8>
 80089e8:	2301      	movs	r3, #1
 80089ea:	465a      	mov	r2, fp
 80089ec:	4631      	mov	r1, r6
 80089ee:	4628      	mov	r0, r5
 80089f0:	47b8      	blx	r7
 80089f2:	3001      	adds	r0, #1
 80089f4:	f43f aefb 	beq.w	80087ee <_printf_float+0xb6>
 80089f8:	f10a 0a01 	add.w	sl, sl, #1
 80089fc:	e7ee      	b.n	80089dc <_printf_float+0x2a4>
 80089fe:	bf00      	nop
 8008a00:	7fefffff 	.word	0x7fefffff
 8008a04:	0800c128 	.word	0x0800c128
 8008a08:	0800c12c 	.word	0x0800c12c
 8008a0c:	0800c130 	.word	0x0800c130
 8008a10:	0800c134 	.word	0x0800c134
 8008a14:	0800c138 	.word	0x0800c138
 8008a18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008a1a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008a1e:	4553      	cmp	r3, sl
 8008a20:	bfa8      	it	ge
 8008a22:	4653      	movge	r3, sl
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	4699      	mov	r9, r3
 8008a28:	dc36      	bgt.n	8008a98 <_printf_float+0x360>
 8008a2a:	f04f 0b00 	mov.w	fp, #0
 8008a2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a32:	f104 021a 	add.w	r2, r4, #26
 8008a36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008a38:	9306      	str	r3, [sp, #24]
 8008a3a:	eba3 0309 	sub.w	r3, r3, r9
 8008a3e:	455b      	cmp	r3, fp
 8008a40:	dc31      	bgt.n	8008aa6 <_printf_float+0x36e>
 8008a42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a44:	459a      	cmp	sl, r3
 8008a46:	dc3a      	bgt.n	8008abe <_printf_float+0x386>
 8008a48:	6823      	ldr	r3, [r4, #0]
 8008a4a:	07da      	lsls	r2, r3, #31
 8008a4c:	d437      	bmi.n	8008abe <_printf_float+0x386>
 8008a4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a50:	ebaa 0903 	sub.w	r9, sl, r3
 8008a54:	9b06      	ldr	r3, [sp, #24]
 8008a56:	ebaa 0303 	sub.w	r3, sl, r3
 8008a5a:	4599      	cmp	r9, r3
 8008a5c:	bfa8      	it	ge
 8008a5e:	4699      	movge	r9, r3
 8008a60:	f1b9 0f00 	cmp.w	r9, #0
 8008a64:	dc33      	bgt.n	8008ace <_printf_float+0x396>
 8008a66:	f04f 0800 	mov.w	r8, #0
 8008a6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a6e:	f104 0b1a 	add.w	fp, r4, #26
 8008a72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a74:	ebaa 0303 	sub.w	r3, sl, r3
 8008a78:	eba3 0309 	sub.w	r3, r3, r9
 8008a7c:	4543      	cmp	r3, r8
 8008a7e:	f77f af79 	ble.w	8008974 <_printf_float+0x23c>
 8008a82:	2301      	movs	r3, #1
 8008a84:	465a      	mov	r2, fp
 8008a86:	4631      	mov	r1, r6
 8008a88:	4628      	mov	r0, r5
 8008a8a:	47b8      	blx	r7
 8008a8c:	3001      	adds	r0, #1
 8008a8e:	f43f aeae 	beq.w	80087ee <_printf_float+0xb6>
 8008a92:	f108 0801 	add.w	r8, r8, #1
 8008a96:	e7ec      	b.n	8008a72 <_printf_float+0x33a>
 8008a98:	4642      	mov	r2, r8
 8008a9a:	4631      	mov	r1, r6
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	47b8      	blx	r7
 8008aa0:	3001      	adds	r0, #1
 8008aa2:	d1c2      	bne.n	8008a2a <_printf_float+0x2f2>
 8008aa4:	e6a3      	b.n	80087ee <_printf_float+0xb6>
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	4631      	mov	r1, r6
 8008aaa:	4628      	mov	r0, r5
 8008aac:	9206      	str	r2, [sp, #24]
 8008aae:	47b8      	blx	r7
 8008ab0:	3001      	adds	r0, #1
 8008ab2:	f43f ae9c 	beq.w	80087ee <_printf_float+0xb6>
 8008ab6:	9a06      	ldr	r2, [sp, #24]
 8008ab8:	f10b 0b01 	add.w	fp, fp, #1
 8008abc:	e7bb      	b.n	8008a36 <_printf_float+0x2fe>
 8008abe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ac2:	4631      	mov	r1, r6
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	47b8      	blx	r7
 8008ac8:	3001      	adds	r0, #1
 8008aca:	d1c0      	bne.n	8008a4e <_printf_float+0x316>
 8008acc:	e68f      	b.n	80087ee <_printf_float+0xb6>
 8008ace:	9a06      	ldr	r2, [sp, #24]
 8008ad0:	464b      	mov	r3, r9
 8008ad2:	4442      	add	r2, r8
 8008ad4:	4631      	mov	r1, r6
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	47b8      	blx	r7
 8008ada:	3001      	adds	r0, #1
 8008adc:	d1c3      	bne.n	8008a66 <_printf_float+0x32e>
 8008ade:	e686      	b.n	80087ee <_printf_float+0xb6>
 8008ae0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008ae4:	f1ba 0f01 	cmp.w	sl, #1
 8008ae8:	dc01      	bgt.n	8008aee <_printf_float+0x3b6>
 8008aea:	07db      	lsls	r3, r3, #31
 8008aec:	d536      	bpl.n	8008b5c <_printf_float+0x424>
 8008aee:	2301      	movs	r3, #1
 8008af0:	4642      	mov	r2, r8
 8008af2:	4631      	mov	r1, r6
 8008af4:	4628      	mov	r0, r5
 8008af6:	47b8      	blx	r7
 8008af8:	3001      	adds	r0, #1
 8008afa:	f43f ae78 	beq.w	80087ee <_printf_float+0xb6>
 8008afe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b02:	4631      	mov	r1, r6
 8008b04:	4628      	mov	r0, r5
 8008b06:	47b8      	blx	r7
 8008b08:	3001      	adds	r0, #1
 8008b0a:	f43f ae70 	beq.w	80087ee <_printf_float+0xb6>
 8008b0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008b12:	2200      	movs	r2, #0
 8008b14:	2300      	movs	r3, #0
 8008b16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b1a:	f7f7 ffdd 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b1e:	b9c0      	cbnz	r0, 8008b52 <_printf_float+0x41a>
 8008b20:	4653      	mov	r3, sl
 8008b22:	f108 0201 	add.w	r2, r8, #1
 8008b26:	4631      	mov	r1, r6
 8008b28:	4628      	mov	r0, r5
 8008b2a:	47b8      	blx	r7
 8008b2c:	3001      	adds	r0, #1
 8008b2e:	d10c      	bne.n	8008b4a <_printf_float+0x412>
 8008b30:	e65d      	b.n	80087ee <_printf_float+0xb6>
 8008b32:	2301      	movs	r3, #1
 8008b34:	465a      	mov	r2, fp
 8008b36:	4631      	mov	r1, r6
 8008b38:	4628      	mov	r0, r5
 8008b3a:	47b8      	blx	r7
 8008b3c:	3001      	adds	r0, #1
 8008b3e:	f43f ae56 	beq.w	80087ee <_printf_float+0xb6>
 8008b42:	f108 0801 	add.w	r8, r8, #1
 8008b46:	45d0      	cmp	r8, sl
 8008b48:	dbf3      	blt.n	8008b32 <_printf_float+0x3fa>
 8008b4a:	464b      	mov	r3, r9
 8008b4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008b50:	e6df      	b.n	8008912 <_printf_float+0x1da>
 8008b52:	f04f 0800 	mov.w	r8, #0
 8008b56:	f104 0b1a 	add.w	fp, r4, #26
 8008b5a:	e7f4      	b.n	8008b46 <_printf_float+0x40e>
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	4642      	mov	r2, r8
 8008b60:	e7e1      	b.n	8008b26 <_printf_float+0x3ee>
 8008b62:	2301      	movs	r3, #1
 8008b64:	464a      	mov	r2, r9
 8008b66:	4631      	mov	r1, r6
 8008b68:	4628      	mov	r0, r5
 8008b6a:	47b8      	blx	r7
 8008b6c:	3001      	adds	r0, #1
 8008b6e:	f43f ae3e 	beq.w	80087ee <_printf_float+0xb6>
 8008b72:	f108 0801 	add.w	r8, r8, #1
 8008b76:	68e3      	ldr	r3, [r4, #12]
 8008b78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008b7a:	1a5b      	subs	r3, r3, r1
 8008b7c:	4543      	cmp	r3, r8
 8008b7e:	dcf0      	bgt.n	8008b62 <_printf_float+0x42a>
 8008b80:	e6fc      	b.n	800897c <_printf_float+0x244>
 8008b82:	f04f 0800 	mov.w	r8, #0
 8008b86:	f104 0919 	add.w	r9, r4, #25
 8008b8a:	e7f4      	b.n	8008b76 <_printf_float+0x43e>

08008b8c <_printf_common>:
 8008b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b90:	4616      	mov	r6, r2
 8008b92:	4698      	mov	r8, r3
 8008b94:	688a      	ldr	r2, [r1, #8]
 8008b96:	690b      	ldr	r3, [r1, #16]
 8008b98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	bfb8      	it	lt
 8008ba0:	4613      	movlt	r3, r2
 8008ba2:	6033      	str	r3, [r6, #0]
 8008ba4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ba8:	4607      	mov	r7, r0
 8008baa:	460c      	mov	r4, r1
 8008bac:	b10a      	cbz	r2, 8008bb2 <_printf_common+0x26>
 8008bae:	3301      	adds	r3, #1
 8008bb0:	6033      	str	r3, [r6, #0]
 8008bb2:	6823      	ldr	r3, [r4, #0]
 8008bb4:	0699      	lsls	r1, r3, #26
 8008bb6:	bf42      	ittt	mi
 8008bb8:	6833      	ldrmi	r3, [r6, #0]
 8008bba:	3302      	addmi	r3, #2
 8008bbc:	6033      	strmi	r3, [r6, #0]
 8008bbe:	6825      	ldr	r5, [r4, #0]
 8008bc0:	f015 0506 	ands.w	r5, r5, #6
 8008bc4:	d106      	bne.n	8008bd4 <_printf_common+0x48>
 8008bc6:	f104 0a19 	add.w	sl, r4, #25
 8008bca:	68e3      	ldr	r3, [r4, #12]
 8008bcc:	6832      	ldr	r2, [r6, #0]
 8008bce:	1a9b      	subs	r3, r3, r2
 8008bd0:	42ab      	cmp	r3, r5
 8008bd2:	dc26      	bgt.n	8008c22 <_printf_common+0x96>
 8008bd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008bd8:	6822      	ldr	r2, [r4, #0]
 8008bda:	3b00      	subs	r3, #0
 8008bdc:	bf18      	it	ne
 8008bde:	2301      	movne	r3, #1
 8008be0:	0692      	lsls	r2, r2, #26
 8008be2:	d42b      	bmi.n	8008c3c <_printf_common+0xb0>
 8008be4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008be8:	4641      	mov	r1, r8
 8008bea:	4638      	mov	r0, r7
 8008bec:	47c8      	blx	r9
 8008bee:	3001      	adds	r0, #1
 8008bf0:	d01e      	beq.n	8008c30 <_printf_common+0xa4>
 8008bf2:	6823      	ldr	r3, [r4, #0]
 8008bf4:	6922      	ldr	r2, [r4, #16]
 8008bf6:	f003 0306 	and.w	r3, r3, #6
 8008bfa:	2b04      	cmp	r3, #4
 8008bfc:	bf02      	ittt	eq
 8008bfe:	68e5      	ldreq	r5, [r4, #12]
 8008c00:	6833      	ldreq	r3, [r6, #0]
 8008c02:	1aed      	subeq	r5, r5, r3
 8008c04:	68a3      	ldr	r3, [r4, #8]
 8008c06:	bf0c      	ite	eq
 8008c08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c0c:	2500      	movne	r5, #0
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	bfc4      	itt	gt
 8008c12:	1a9b      	subgt	r3, r3, r2
 8008c14:	18ed      	addgt	r5, r5, r3
 8008c16:	2600      	movs	r6, #0
 8008c18:	341a      	adds	r4, #26
 8008c1a:	42b5      	cmp	r5, r6
 8008c1c:	d11a      	bne.n	8008c54 <_printf_common+0xc8>
 8008c1e:	2000      	movs	r0, #0
 8008c20:	e008      	b.n	8008c34 <_printf_common+0xa8>
 8008c22:	2301      	movs	r3, #1
 8008c24:	4652      	mov	r2, sl
 8008c26:	4641      	mov	r1, r8
 8008c28:	4638      	mov	r0, r7
 8008c2a:	47c8      	blx	r9
 8008c2c:	3001      	adds	r0, #1
 8008c2e:	d103      	bne.n	8008c38 <_printf_common+0xac>
 8008c30:	f04f 30ff 	mov.w	r0, #4294967295
 8008c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c38:	3501      	adds	r5, #1
 8008c3a:	e7c6      	b.n	8008bca <_printf_common+0x3e>
 8008c3c:	18e1      	adds	r1, r4, r3
 8008c3e:	1c5a      	adds	r2, r3, #1
 8008c40:	2030      	movs	r0, #48	@ 0x30
 8008c42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008c46:	4422      	add	r2, r4
 8008c48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008c4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008c50:	3302      	adds	r3, #2
 8008c52:	e7c7      	b.n	8008be4 <_printf_common+0x58>
 8008c54:	2301      	movs	r3, #1
 8008c56:	4622      	mov	r2, r4
 8008c58:	4641      	mov	r1, r8
 8008c5a:	4638      	mov	r0, r7
 8008c5c:	47c8      	blx	r9
 8008c5e:	3001      	adds	r0, #1
 8008c60:	d0e6      	beq.n	8008c30 <_printf_common+0xa4>
 8008c62:	3601      	adds	r6, #1
 8008c64:	e7d9      	b.n	8008c1a <_printf_common+0x8e>
	...

08008c68 <_printf_i>:
 8008c68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c6c:	7e0f      	ldrb	r7, [r1, #24]
 8008c6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008c70:	2f78      	cmp	r7, #120	@ 0x78
 8008c72:	4691      	mov	r9, r2
 8008c74:	4680      	mov	r8, r0
 8008c76:	460c      	mov	r4, r1
 8008c78:	469a      	mov	sl, r3
 8008c7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008c7e:	d807      	bhi.n	8008c90 <_printf_i+0x28>
 8008c80:	2f62      	cmp	r7, #98	@ 0x62
 8008c82:	d80a      	bhi.n	8008c9a <_printf_i+0x32>
 8008c84:	2f00      	cmp	r7, #0
 8008c86:	f000 80d2 	beq.w	8008e2e <_printf_i+0x1c6>
 8008c8a:	2f58      	cmp	r7, #88	@ 0x58
 8008c8c:	f000 80b9 	beq.w	8008e02 <_printf_i+0x19a>
 8008c90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008c98:	e03a      	b.n	8008d10 <_printf_i+0xa8>
 8008c9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008c9e:	2b15      	cmp	r3, #21
 8008ca0:	d8f6      	bhi.n	8008c90 <_printf_i+0x28>
 8008ca2:	a101      	add	r1, pc, #4	@ (adr r1, 8008ca8 <_printf_i+0x40>)
 8008ca4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ca8:	08008d01 	.word	0x08008d01
 8008cac:	08008d15 	.word	0x08008d15
 8008cb0:	08008c91 	.word	0x08008c91
 8008cb4:	08008c91 	.word	0x08008c91
 8008cb8:	08008c91 	.word	0x08008c91
 8008cbc:	08008c91 	.word	0x08008c91
 8008cc0:	08008d15 	.word	0x08008d15
 8008cc4:	08008c91 	.word	0x08008c91
 8008cc8:	08008c91 	.word	0x08008c91
 8008ccc:	08008c91 	.word	0x08008c91
 8008cd0:	08008c91 	.word	0x08008c91
 8008cd4:	08008e15 	.word	0x08008e15
 8008cd8:	08008d3f 	.word	0x08008d3f
 8008cdc:	08008dcf 	.word	0x08008dcf
 8008ce0:	08008c91 	.word	0x08008c91
 8008ce4:	08008c91 	.word	0x08008c91
 8008ce8:	08008e37 	.word	0x08008e37
 8008cec:	08008c91 	.word	0x08008c91
 8008cf0:	08008d3f 	.word	0x08008d3f
 8008cf4:	08008c91 	.word	0x08008c91
 8008cf8:	08008c91 	.word	0x08008c91
 8008cfc:	08008dd7 	.word	0x08008dd7
 8008d00:	6833      	ldr	r3, [r6, #0]
 8008d02:	1d1a      	adds	r2, r3, #4
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	6032      	str	r2, [r6, #0]
 8008d08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008d10:	2301      	movs	r3, #1
 8008d12:	e09d      	b.n	8008e50 <_printf_i+0x1e8>
 8008d14:	6833      	ldr	r3, [r6, #0]
 8008d16:	6820      	ldr	r0, [r4, #0]
 8008d18:	1d19      	adds	r1, r3, #4
 8008d1a:	6031      	str	r1, [r6, #0]
 8008d1c:	0606      	lsls	r6, r0, #24
 8008d1e:	d501      	bpl.n	8008d24 <_printf_i+0xbc>
 8008d20:	681d      	ldr	r5, [r3, #0]
 8008d22:	e003      	b.n	8008d2c <_printf_i+0xc4>
 8008d24:	0645      	lsls	r5, r0, #25
 8008d26:	d5fb      	bpl.n	8008d20 <_printf_i+0xb8>
 8008d28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008d2c:	2d00      	cmp	r5, #0
 8008d2e:	da03      	bge.n	8008d38 <_printf_i+0xd0>
 8008d30:	232d      	movs	r3, #45	@ 0x2d
 8008d32:	426d      	negs	r5, r5
 8008d34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d38:	4859      	ldr	r0, [pc, #356]	@ (8008ea0 <_printf_i+0x238>)
 8008d3a:	230a      	movs	r3, #10
 8008d3c:	e011      	b.n	8008d62 <_printf_i+0xfa>
 8008d3e:	6821      	ldr	r1, [r4, #0]
 8008d40:	6833      	ldr	r3, [r6, #0]
 8008d42:	0608      	lsls	r0, r1, #24
 8008d44:	f853 5b04 	ldr.w	r5, [r3], #4
 8008d48:	d402      	bmi.n	8008d50 <_printf_i+0xe8>
 8008d4a:	0649      	lsls	r1, r1, #25
 8008d4c:	bf48      	it	mi
 8008d4e:	b2ad      	uxthmi	r5, r5
 8008d50:	2f6f      	cmp	r7, #111	@ 0x6f
 8008d52:	4853      	ldr	r0, [pc, #332]	@ (8008ea0 <_printf_i+0x238>)
 8008d54:	6033      	str	r3, [r6, #0]
 8008d56:	bf14      	ite	ne
 8008d58:	230a      	movne	r3, #10
 8008d5a:	2308      	moveq	r3, #8
 8008d5c:	2100      	movs	r1, #0
 8008d5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008d62:	6866      	ldr	r6, [r4, #4]
 8008d64:	60a6      	str	r6, [r4, #8]
 8008d66:	2e00      	cmp	r6, #0
 8008d68:	bfa2      	ittt	ge
 8008d6a:	6821      	ldrge	r1, [r4, #0]
 8008d6c:	f021 0104 	bicge.w	r1, r1, #4
 8008d70:	6021      	strge	r1, [r4, #0]
 8008d72:	b90d      	cbnz	r5, 8008d78 <_printf_i+0x110>
 8008d74:	2e00      	cmp	r6, #0
 8008d76:	d04b      	beq.n	8008e10 <_printf_i+0x1a8>
 8008d78:	4616      	mov	r6, r2
 8008d7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d7e:	fb03 5711 	mls	r7, r3, r1, r5
 8008d82:	5dc7      	ldrb	r7, [r0, r7]
 8008d84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d88:	462f      	mov	r7, r5
 8008d8a:	42bb      	cmp	r3, r7
 8008d8c:	460d      	mov	r5, r1
 8008d8e:	d9f4      	bls.n	8008d7a <_printf_i+0x112>
 8008d90:	2b08      	cmp	r3, #8
 8008d92:	d10b      	bne.n	8008dac <_printf_i+0x144>
 8008d94:	6823      	ldr	r3, [r4, #0]
 8008d96:	07df      	lsls	r7, r3, #31
 8008d98:	d508      	bpl.n	8008dac <_printf_i+0x144>
 8008d9a:	6923      	ldr	r3, [r4, #16]
 8008d9c:	6861      	ldr	r1, [r4, #4]
 8008d9e:	4299      	cmp	r1, r3
 8008da0:	bfde      	ittt	le
 8008da2:	2330      	movle	r3, #48	@ 0x30
 8008da4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008da8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008dac:	1b92      	subs	r2, r2, r6
 8008dae:	6122      	str	r2, [r4, #16]
 8008db0:	f8cd a000 	str.w	sl, [sp]
 8008db4:	464b      	mov	r3, r9
 8008db6:	aa03      	add	r2, sp, #12
 8008db8:	4621      	mov	r1, r4
 8008dba:	4640      	mov	r0, r8
 8008dbc:	f7ff fee6 	bl	8008b8c <_printf_common>
 8008dc0:	3001      	adds	r0, #1
 8008dc2:	d14a      	bne.n	8008e5a <_printf_i+0x1f2>
 8008dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008dc8:	b004      	add	sp, #16
 8008dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dce:	6823      	ldr	r3, [r4, #0]
 8008dd0:	f043 0320 	orr.w	r3, r3, #32
 8008dd4:	6023      	str	r3, [r4, #0]
 8008dd6:	4833      	ldr	r0, [pc, #204]	@ (8008ea4 <_printf_i+0x23c>)
 8008dd8:	2778      	movs	r7, #120	@ 0x78
 8008dda:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008dde:	6823      	ldr	r3, [r4, #0]
 8008de0:	6831      	ldr	r1, [r6, #0]
 8008de2:	061f      	lsls	r7, r3, #24
 8008de4:	f851 5b04 	ldr.w	r5, [r1], #4
 8008de8:	d402      	bmi.n	8008df0 <_printf_i+0x188>
 8008dea:	065f      	lsls	r7, r3, #25
 8008dec:	bf48      	it	mi
 8008dee:	b2ad      	uxthmi	r5, r5
 8008df0:	6031      	str	r1, [r6, #0]
 8008df2:	07d9      	lsls	r1, r3, #31
 8008df4:	bf44      	itt	mi
 8008df6:	f043 0320 	orrmi.w	r3, r3, #32
 8008dfa:	6023      	strmi	r3, [r4, #0]
 8008dfc:	b11d      	cbz	r5, 8008e06 <_printf_i+0x19e>
 8008dfe:	2310      	movs	r3, #16
 8008e00:	e7ac      	b.n	8008d5c <_printf_i+0xf4>
 8008e02:	4827      	ldr	r0, [pc, #156]	@ (8008ea0 <_printf_i+0x238>)
 8008e04:	e7e9      	b.n	8008dda <_printf_i+0x172>
 8008e06:	6823      	ldr	r3, [r4, #0]
 8008e08:	f023 0320 	bic.w	r3, r3, #32
 8008e0c:	6023      	str	r3, [r4, #0]
 8008e0e:	e7f6      	b.n	8008dfe <_printf_i+0x196>
 8008e10:	4616      	mov	r6, r2
 8008e12:	e7bd      	b.n	8008d90 <_printf_i+0x128>
 8008e14:	6833      	ldr	r3, [r6, #0]
 8008e16:	6825      	ldr	r5, [r4, #0]
 8008e18:	6961      	ldr	r1, [r4, #20]
 8008e1a:	1d18      	adds	r0, r3, #4
 8008e1c:	6030      	str	r0, [r6, #0]
 8008e1e:	062e      	lsls	r6, r5, #24
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	d501      	bpl.n	8008e28 <_printf_i+0x1c0>
 8008e24:	6019      	str	r1, [r3, #0]
 8008e26:	e002      	b.n	8008e2e <_printf_i+0x1c6>
 8008e28:	0668      	lsls	r0, r5, #25
 8008e2a:	d5fb      	bpl.n	8008e24 <_printf_i+0x1bc>
 8008e2c:	8019      	strh	r1, [r3, #0]
 8008e2e:	2300      	movs	r3, #0
 8008e30:	6123      	str	r3, [r4, #16]
 8008e32:	4616      	mov	r6, r2
 8008e34:	e7bc      	b.n	8008db0 <_printf_i+0x148>
 8008e36:	6833      	ldr	r3, [r6, #0]
 8008e38:	1d1a      	adds	r2, r3, #4
 8008e3a:	6032      	str	r2, [r6, #0]
 8008e3c:	681e      	ldr	r6, [r3, #0]
 8008e3e:	6862      	ldr	r2, [r4, #4]
 8008e40:	2100      	movs	r1, #0
 8008e42:	4630      	mov	r0, r6
 8008e44:	f7f7 f9cc 	bl	80001e0 <memchr>
 8008e48:	b108      	cbz	r0, 8008e4e <_printf_i+0x1e6>
 8008e4a:	1b80      	subs	r0, r0, r6
 8008e4c:	6060      	str	r0, [r4, #4]
 8008e4e:	6863      	ldr	r3, [r4, #4]
 8008e50:	6123      	str	r3, [r4, #16]
 8008e52:	2300      	movs	r3, #0
 8008e54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e58:	e7aa      	b.n	8008db0 <_printf_i+0x148>
 8008e5a:	6923      	ldr	r3, [r4, #16]
 8008e5c:	4632      	mov	r2, r6
 8008e5e:	4649      	mov	r1, r9
 8008e60:	4640      	mov	r0, r8
 8008e62:	47d0      	blx	sl
 8008e64:	3001      	adds	r0, #1
 8008e66:	d0ad      	beq.n	8008dc4 <_printf_i+0x15c>
 8008e68:	6823      	ldr	r3, [r4, #0]
 8008e6a:	079b      	lsls	r3, r3, #30
 8008e6c:	d413      	bmi.n	8008e96 <_printf_i+0x22e>
 8008e6e:	68e0      	ldr	r0, [r4, #12]
 8008e70:	9b03      	ldr	r3, [sp, #12]
 8008e72:	4298      	cmp	r0, r3
 8008e74:	bfb8      	it	lt
 8008e76:	4618      	movlt	r0, r3
 8008e78:	e7a6      	b.n	8008dc8 <_printf_i+0x160>
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	4632      	mov	r2, r6
 8008e7e:	4649      	mov	r1, r9
 8008e80:	4640      	mov	r0, r8
 8008e82:	47d0      	blx	sl
 8008e84:	3001      	adds	r0, #1
 8008e86:	d09d      	beq.n	8008dc4 <_printf_i+0x15c>
 8008e88:	3501      	adds	r5, #1
 8008e8a:	68e3      	ldr	r3, [r4, #12]
 8008e8c:	9903      	ldr	r1, [sp, #12]
 8008e8e:	1a5b      	subs	r3, r3, r1
 8008e90:	42ab      	cmp	r3, r5
 8008e92:	dcf2      	bgt.n	8008e7a <_printf_i+0x212>
 8008e94:	e7eb      	b.n	8008e6e <_printf_i+0x206>
 8008e96:	2500      	movs	r5, #0
 8008e98:	f104 0619 	add.w	r6, r4, #25
 8008e9c:	e7f5      	b.n	8008e8a <_printf_i+0x222>
 8008e9e:	bf00      	nop
 8008ea0:	0800c13a 	.word	0x0800c13a
 8008ea4:	0800c14b 	.word	0x0800c14b

08008ea8 <std>:
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	b510      	push	{r4, lr}
 8008eac:	4604      	mov	r4, r0
 8008eae:	e9c0 3300 	strd	r3, r3, [r0]
 8008eb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008eb6:	6083      	str	r3, [r0, #8]
 8008eb8:	8181      	strh	r1, [r0, #12]
 8008eba:	6643      	str	r3, [r0, #100]	@ 0x64
 8008ebc:	81c2      	strh	r2, [r0, #14]
 8008ebe:	6183      	str	r3, [r0, #24]
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	2208      	movs	r2, #8
 8008ec4:	305c      	adds	r0, #92	@ 0x5c
 8008ec6:	f000 f928 	bl	800911a <memset>
 8008eca:	4b0d      	ldr	r3, [pc, #52]	@ (8008f00 <std+0x58>)
 8008ecc:	6263      	str	r3, [r4, #36]	@ 0x24
 8008ece:	4b0d      	ldr	r3, [pc, #52]	@ (8008f04 <std+0x5c>)
 8008ed0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8008f08 <std+0x60>)
 8008ed4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8008f0c <std+0x64>)
 8008ed8:	6323      	str	r3, [r4, #48]	@ 0x30
 8008eda:	4b0d      	ldr	r3, [pc, #52]	@ (8008f10 <std+0x68>)
 8008edc:	6224      	str	r4, [r4, #32]
 8008ede:	429c      	cmp	r4, r3
 8008ee0:	d006      	beq.n	8008ef0 <std+0x48>
 8008ee2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008ee6:	4294      	cmp	r4, r2
 8008ee8:	d002      	beq.n	8008ef0 <std+0x48>
 8008eea:	33d0      	adds	r3, #208	@ 0xd0
 8008eec:	429c      	cmp	r4, r3
 8008eee:	d105      	bne.n	8008efc <std+0x54>
 8008ef0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ef8:	f000 b98c 	b.w	8009214 <__retarget_lock_init_recursive>
 8008efc:	bd10      	pop	{r4, pc}
 8008efe:	bf00      	nop
 8008f00:	08009095 	.word	0x08009095
 8008f04:	080090b7 	.word	0x080090b7
 8008f08:	080090ef 	.word	0x080090ef
 8008f0c:	08009113 	.word	0x08009113
 8008f10:	20004db0 	.word	0x20004db0

08008f14 <stdio_exit_handler>:
 8008f14:	4a02      	ldr	r2, [pc, #8]	@ (8008f20 <stdio_exit_handler+0xc>)
 8008f16:	4903      	ldr	r1, [pc, #12]	@ (8008f24 <stdio_exit_handler+0x10>)
 8008f18:	4803      	ldr	r0, [pc, #12]	@ (8008f28 <stdio_exit_handler+0x14>)
 8008f1a:	f000 b869 	b.w	8008ff0 <_fwalk_sglue>
 8008f1e:	bf00      	nop
 8008f20:	20000018 	.word	0x20000018
 8008f24:	0800ab8d 	.word	0x0800ab8d
 8008f28:	20000028 	.word	0x20000028

08008f2c <cleanup_stdio>:
 8008f2c:	6841      	ldr	r1, [r0, #4]
 8008f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8008f60 <cleanup_stdio+0x34>)
 8008f30:	4299      	cmp	r1, r3
 8008f32:	b510      	push	{r4, lr}
 8008f34:	4604      	mov	r4, r0
 8008f36:	d001      	beq.n	8008f3c <cleanup_stdio+0x10>
 8008f38:	f001 fe28 	bl	800ab8c <_fflush_r>
 8008f3c:	68a1      	ldr	r1, [r4, #8]
 8008f3e:	4b09      	ldr	r3, [pc, #36]	@ (8008f64 <cleanup_stdio+0x38>)
 8008f40:	4299      	cmp	r1, r3
 8008f42:	d002      	beq.n	8008f4a <cleanup_stdio+0x1e>
 8008f44:	4620      	mov	r0, r4
 8008f46:	f001 fe21 	bl	800ab8c <_fflush_r>
 8008f4a:	68e1      	ldr	r1, [r4, #12]
 8008f4c:	4b06      	ldr	r3, [pc, #24]	@ (8008f68 <cleanup_stdio+0x3c>)
 8008f4e:	4299      	cmp	r1, r3
 8008f50:	d004      	beq.n	8008f5c <cleanup_stdio+0x30>
 8008f52:	4620      	mov	r0, r4
 8008f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f58:	f001 be18 	b.w	800ab8c <_fflush_r>
 8008f5c:	bd10      	pop	{r4, pc}
 8008f5e:	bf00      	nop
 8008f60:	20004db0 	.word	0x20004db0
 8008f64:	20004e18 	.word	0x20004e18
 8008f68:	20004e80 	.word	0x20004e80

08008f6c <global_stdio_init.part.0>:
 8008f6c:	b510      	push	{r4, lr}
 8008f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8008f9c <global_stdio_init.part.0+0x30>)
 8008f70:	4c0b      	ldr	r4, [pc, #44]	@ (8008fa0 <global_stdio_init.part.0+0x34>)
 8008f72:	4a0c      	ldr	r2, [pc, #48]	@ (8008fa4 <global_stdio_init.part.0+0x38>)
 8008f74:	601a      	str	r2, [r3, #0]
 8008f76:	4620      	mov	r0, r4
 8008f78:	2200      	movs	r2, #0
 8008f7a:	2104      	movs	r1, #4
 8008f7c:	f7ff ff94 	bl	8008ea8 <std>
 8008f80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008f84:	2201      	movs	r2, #1
 8008f86:	2109      	movs	r1, #9
 8008f88:	f7ff ff8e 	bl	8008ea8 <std>
 8008f8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008f90:	2202      	movs	r2, #2
 8008f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f96:	2112      	movs	r1, #18
 8008f98:	f7ff bf86 	b.w	8008ea8 <std>
 8008f9c:	20004ee8 	.word	0x20004ee8
 8008fa0:	20004db0 	.word	0x20004db0
 8008fa4:	08008f15 	.word	0x08008f15

08008fa8 <__sfp_lock_acquire>:
 8008fa8:	4801      	ldr	r0, [pc, #4]	@ (8008fb0 <__sfp_lock_acquire+0x8>)
 8008faa:	f000 b934 	b.w	8009216 <__retarget_lock_acquire_recursive>
 8008fae:	bf00      	nop
 8008fb0:	20004ef1 	.word	0x20004ef1

08008fb4 <__sfp_lock_release>:
 8008fb4:	4801      	ldr	r0, [pc, #4]	@ (8008fbc <__sfp_lock_release+0x8>)
 8008fb6:	f000 b92f 	b.w	8009218 <__retarget_lock_release_recursive>
 8008fba:	bf00      	nop
 8008fbc:	20004ef1 	.word	0x20004ef1

08008fc0 <__sinit>:
 8008fc0:	b510      	push	{r4, lr}
 8008fc2:	4604      	mov	r4, r0
 8008fc4:	f7ff fff0 	bl	8008fa8 <__sfp_lock_acquire>
 8008fc8:	6a23      	ldr	r3, [r4, #32]
 8008fca:	b11b      	cbz	r3, 8008fd4 <__sinit+0x14>
 8008fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fd0:	f7ff bff0 	b.w	8008fb4 <__sfp_lock_release>
 8008fd4:	4b04      	ldr	r3, [pc, #16]	@ (8008fe8 <__sinit+0x28>)
 8008fd6:	6223      	str	r3, [r4, #32]
 8008fd8:	4b04      	ldr	r3, [pc, #16]	@ (8008fec <__sinit+0x2c>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d1f5      	bne.n	8008fcc <__sinit+0xc>
 8008fe0:	f7ff ffc4 	bl	8008f6c <global_stdio_init.part.0>
 8008fe4:	e7f2      	b.n	8008fcc <__sinit+0xc>
 8008fe6:	bf00      	nop
 8008fe8:	08008f2d 	.word	0x08008f2d
 8008fec:	20004ee8 	.word	0x20004ee8

08008ff0 <_fwalk_sglue>:
 8008ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ff4:	4607      	mov	r7, r0
 8008ff6:	4688      	mov	r8, r1
 8008ff8:	4614      	mov	r4, r2
 8008ffa:	2600      	movs	r6, #0
 8008ffc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009000:	f1b9 0901 	subs.w	r9, r9, #1
 8009004:	d505      	bpl.n	8009012 <_fwalk_sglue+0x22>
 8009006:	6824      	ldr	r4, [r4, #0]
 8009008:	2c00      	cmp	r4, #0
 800900a:	d1f7      	bne.n	8008ffc <_fwalk_sglue+0xc>
 800900c:	4630      	mov	r0, r6
 800900e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009012:	89ab      	ldrh	r3, [r5, #12]
 8009014:	2b01      	cmp	r3, #1
 8009016:	d907      	bls.n	8009028 <_fwalk_sglue+0x38>
 8009018:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800901c:	3301      	adds	r3, #1
 800901e:	d003      	beq.n	8009028 <_fwalk_sglue+0x38>
 8009020:	4629      	mov	r1, r5
 8009022:	4638      	mov	r0, r7
 8009024:	47c0      	blx	r8
 8009026:	4306      	orrs	r6, r0
 8009028:	3568      	adds	r5, #104	@ 0x68
 800902a:	e7e9      	b.n	8009000 <_fwalk_sglue+0x10>

0800902c <sniprintf>:
 800902c:	b40c      	push	{r2, r3}
 800902e:	b530      	push	{r4, r5, lr}
 8009030:	4b17      	ldr	r3, [pc, #92]	@ (8009090 <sniprintf+0x64>)
 8009032:	1e0c      	subs	r4, r1, #0
 8009034:	681d      	ldr	r5, [r3, #0]
 8009036:	b09d      	sub	sp, #116	@ 0x74
 8009038:	da08      	bge.n	800904c <sniprintf+0x20>
 800903a:	238b      	movs	r3, #139	@ 0x8b
 800903c:	602b      	str	r3, [r5, #0]
 800903e:	f04f 30ff 	mov.w	r0, #4294967295
 8009042:	b01d      	add	sp, #116	@ 0x74
 8009044:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009048:	b002      	add	sp, #8
 800904a:	4770      	bx	lr
 800904c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009050:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009054:	bf14      	ite	ne
 8009056:	f104 33ff 	addne.w	r3, r4, #4294967295
 800905a:	4623      	moveq	r3, r4
 800905c:	9304      	str	r3, [sp, #16]
 800905e:	9307      	str	r3, [sp, #28]
 8009060:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009064:	9002      	str	r0, [sp, #8]
 8009066:	9006      	str	r0, [sp, #24]
 8009068:	f8ad 3016 	strh.w	r3, [sp, #22]
 800906c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800906e:	ab21      	add	r3, sp, #132	@ 0x84
 8009070:	a902      	add	r1, sp, #8
 8009072:	4628      	mov	r0, r5
 8009074:	9301      	str	r3, [sp, #4]
 8009076:	f001 fc09 	bl	800a88c <_svfiprintf_r>
 800907a:	1c43      	adds	r3, r0, #1
 800907c:	bfbc      	itt	lt
 800907e:	238b      	movlt	r3, #139	@ 0x8b
 8009080:	602b      	strlt	r3, [r5, #0]
 8009082:	2c00      	cmp	r4, #0
 8009084:	d0dd      	beq.n	8009042 <sniprintf+0x16>
 8009086:	9b02      	ldr	r3, [sp, #8]
 8009088:	2200      	movs	r2, #0
 800908a:	701a      	strb	r2, [r3, #0]
 800908c:	e7d9      	b.n	8009042 <sniprintf+0x16>
 800908e:	bf00      	nop
 8009090:	20000024 	.word	0x20000024

08009094 <__sread>:
 8009094:	b510      	push	{r4, lr}
 8009096:	460c      	mov	r4, r1
 8009098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800909c:	f000 f86c 	bl	8009178 <_read_r>
 80090a0:	2800      	cmp	r0, #0
 80090a2:	bfab      	itete	ge
 80090a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80090a6:	89a3      	ldrhlt	r3, [r4, #12]
 80090a8:	181b      	addge	r3, r3, r0
 80090aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80090ae:	bfac      	ite	ge
 80090b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80090b2:	81a3      	strhlt	r3, [r4, #12]
 80090b4:	bd10      	pop	{r4, pc}

080090b6 <__swrite>:
 80090b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090ba:	461f      	mov	r7, r3
 80090bc:	898b      	ldrh	r3, [r1, #12]
 80090be:	05db      	lsls	r3, r3, #23
 80090c0:	4605      	mov	r5, r0
 80090c2:	460c      	mov	r4, r1
 80090c4:	4616      	mov	r6, r2
 80090c6:	d505      	bpl.n	80090d4 <__swrite+0x1e>
 80090c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090cc:	2302      	movs	r3, #2
 80090ce:	2200      	movs	r2, #0
 80090d0:	f000 f840 	bl	8009154 <_lseek_r>
 80090d4:	89a3      	ldrh	r3, [r4, #12]
 80090d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80090de:	81a3      	strh	r3, [r4, #12]
 80090e0:	4632      	mov	r2, r6
 80090e2:	463b      	mov	r3, r7
 80090e4:	4628      	mov	r0, r5
 80090e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090ea:	f000 b857 	b.w	800919c <_write_r>

080090ee <__sseek>:
 80090ee:	b510      	push	{r4, lr}
 80090f0:	460c      	mov	r4, r1
 80090f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090f6:	f000 f82d 	bl	8009154 <_lseek_r>
 80090fa:	1c43      	adds	r3, r0, #1
 80090fc:	89a3      	ldrh	r3, [r4, #12]
 80090fe:	bf15      	itete	ne
 8009100:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009102:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009106:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800910a:	81a3      	strheq	r3, [r4, #12]
 800910c:	bf18      	it	ne
 800910e:	81a3      	strhne	r3, [r4, #12]
 8009110:	bd10      	pop	{r4, pc}

08009112 <__sclose>:
 8009112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009116:	f000 b80d 	b.w	8009134 <_close_r>

0800911a <memset>:
 800911a:	4402      	add	r2, r0
 800911c:	4603      	mov	r3, r0
 800911e:	4293      	cmp	r3, r2
 8009120:	d100      	bne.n	8009124 <memset+0xa>
 8009122:	4770      	bx	lr
 8009124:	f803 1b01 	strb.w	r1, [r3], #1
 8009128:	e7f9      	b.n	800911e <memset+0x4>
	...

0800912c <_localeconv_r>:
 800912c:	4800      	ldr	r0, [pc, #0]	@ (8009130 <_localeconv_r+0x4>)
 800912e:	4770      	bx	lr
 8009130:	20000164 	.word	0x20000164

08009134 <_close_r>:
 8009134:	b538      	push	{r3, r4, r5, lr}
 8009136:	4d06      	ldr	r5, [pc, #24]	@ (8009150 <_close_r+0x1c>)
 8009138:	2300      	movs	r3, #0
 800913a:	4604      	mov	r4, r0
 800913c:	4608      	mov	r0, r1
 800913e:	602b      	str	r3, [r5, #0]
 8009140:	f7f9 f9e8 	bl	8002514 <_close>
 8009144:	1c43      	adds	r3, r0, #1
 8009146:	d102      	bne.n	800914e <_close_r+0x1a>
 8009148:	682b      	ldr	r3, [r5, #0]
 800914a:	b103      	cbz	r3, 800914e <_close_r+0x1a>
 800914c:	6023      	str	r3, [r4, #0]
 800914e:	bd38      	pop	{r3, r4, r5, pc}
 8009150:	20004eec 	.word	0x20004eec

08009154 <_lseek_r>:
 8009154:	b538      	push	{r3, r4, r5, lr}
 8009156:	4d07      	ldr	r5, [pc, #28]	@ (8009174 <_lseek_r+0x20>)
 8009158:	4604      	mov	r4, r0
 800915a:	4608      	mov	r0, r1
 800915c:	4611      	mov	r1, r2
 800915e:	2200      	movs	r2, #0
 8009160:	602a      	str	r2, [r5, #0]
 8009162:	461a      	mov	r2, r3
 8009164:	f7f9 f9fd 	bl	8002562 <_lseek>
 8009168:	1c43      	adds	r3, r0, #1
 800916a:	d102      	bne.n	8009172 <_lseek_r+0x1e>
 800916c:	682b      	ldr	r3, [r5, #0]
 800916e:	b103      	cbz	r3, 8009172 <_lseek_r+0x1e>
 8009170:	6023      	str	r3, [r4, #0]
 8009172:	bd38      	pop	{r3, r4, r5, pc}
 8009174:	20004eec 	.word	0x20004eec

08009178 <_read_r>:
 8009178:	b538      	push	{r3, r4, r5, lr}
 800917a:	4d07      	ldr	r5, [pc, #28]	@ (8009198 <_read_r+0x20>)
 800917c:	4604      	mov	r4, r0
 800917e:	4608      	mov	r0, r1
 8009180:	4611      	mov	r1, r2
 8009182:	2200      	movs	r2, #0
 8009184:	602a      	str	r2, [r5, #0]
 8009186:	461a      	mov	r2, r3
 8009188:	f7f9 f9a7 	bl	80024da <_read>
 800918c:	1c43      	adds	r3, r0, #1
 800918e:	d102      	bne.n	8009196 <_read_r+0x1e>
 8009190:	682b      	ldr	r3, [r5, #0]
 8009192:	b103      	cbz	r3, 8009196 <_read_r+0x1e>
 8009194:	6023      	str	r3, [r4, #0]
 8009196:	bd38      	pop	{r3, r4, r5, pc}
 8009198:	20004eec 	.word	0x20004eec

0800919c <_write_r>:
 800919c:	b538      	push	{r3, r4, r5, lr}
 800919e:	4d07      	ldr	r5, [pc, #28]	@ (80091bc <_write_r+0x20>)
 80091a0:	4604      	mov	r4, r0
 80091a2:	4608      	mov	r0, r1
 80091a4:	4611      	mov	r1, r2
 80091a6:	2200      	movs	r2, #0
 80091a8:	602a      	str	r2, [r5, #0]
 80091aa:	461a      	mov	r2, r3
 80091ac:	f7f8 fbb4 	bl	8001918 <_write>
 80091b0:	1c43      	adds	r3, r0, #1
 80091b2:	d102      	bne.n	80091ba <_write_r+0x1e>
 80091b4:	682b      	ldr	r3, [r5, #0]
 80091b6:	b103      	cbz	r3, 80091ba <_write_r+0x1e>
 80091b8:	6023      	str	r3, [r4, #0]
 80091ba:	bd38      	pop	{r3, r4, r5, pc}
 80091bc:	20004eec 	.word	0x20004eec

080091c0 <__errno>:
 80091c0:	4b01      	ldr	r3, [pc, #4]	@ (80091c8 <__errno+0x8>)
 80091c2:	6818      	ldr	r0, [r3, #0]
 80091c4:	4770      	bx	lr
 80091c6:	bf00      	nop
 80091c8:	20000024 	.word	0x20000024

080091cc <__libc_init_array>:
 80091cc:	b570      	push	{r4, r5, r6, lr}
 80091ce:	4d0d      	ldr	r5, [pc, #52]	@ (8009204 <__libc_init_array+0x38>)
 80091d0:	4c0d      	ldr	r4, [pc, #52]	@ (8009208 <__libc_init_array+0x3c>)
 80091d2:	1b64      	subs	r4, r4, r5
 80091d4:	10a4      	asrs	r4, r4, #2
 80091d6:	2600      	movs	r6, #0
 80091d8:	42a6      	cmp	r6, r4
 80091da:	d109      	bne.n	80091f0 <__libc_init_array+0x24>
 80091dc:	4d0b      	ldr	r5, [pc, #44]	@ (800920c <__libc_init_array+0x40>)
 80091de:	4c0c      	ldr	r4, [pc, #48]	@ (8009210 <__libc_init_array+0x44>)
 80091e0:	f002 f864 	bl	800b2ac <_init>
 80091e4:	1b64      	subs	r4, r4, r5
 80091e6:	10a4      	asrs	r4, r4, #2
 80091e8:	2600      	movs	r6, #0
 80091ea:	42a6      	cmp	r6, r4
 80091ec:	d105      	bne.n	80091fa <__libc_init_array+0x2e>
 80091ee:	bd70      	pop	{r4, r5, r6, pc}
 80091f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80091f4:	4798      	blx	r3
 80091f6:	3601      	adds	r6, #1
 80091f8:	e7ee      	b.n	80091d8 <__libc_init_array+0xc>
 80091fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80091fe:	4798      	blx	r3
 8009200:	3601      	adds	r6, #1
 8009202:	e7f2      	b.n	80091ea <__libc_init_array+0x1e>
 8009204:	0800c4a0 	.word	0x0800c4a0
 8009208:	0800c4a0 	.word	0x0800c4a0
 800920c:	0800c4a0 	.word	0x0800c4a0
 8009210:	0800c4a4 	.word	0x0800c4a4

08009214 <__retarget_lock_init_recursive>:
 8009214:	4770      	bx	lr

08009216 <__retarget_lock_acquire_recursive>:
 8009216:	4770      	bx	lr

08009218 <__retarget_lock_release_recursive>:
 8009218:	4770      	bx	lr

0800921a <memcpy>:
 800921a:	440a      	add	r2, r1
 800921c:	4291      	cmp	r1, r2
 800921e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009222:	d100      	bne.n	8009226 <memcpy+0xc>
 8009224:	4770      	bx	lr
 8009226:	b510      	push	{r4, lr}
 8009228:	f811 4b01 	ldrb.w	r4, [r1], #1
 800922c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009230:	4291      	cmp	r1, r2
 8009232:	d1f9      	bne.n	8009228 <memcpy+0xe>
 8009234:	bd10      	pop	{r4, pc}

08009236 <quorem>:
 8009236:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800923a:	6903      	ldr	r3, [r0, #16]
 800923c:	690c      	ldr	r4, [r1, #16]
 800923e:	42a3      	cmp	r3, r4
 8009240:	4607      	mov	r7, r0
 8009242:	db7e      	blt.n	8009342 <quorem+0x10c>
 8009244:	3c01      	subs	r4, #1
 8009246:	f101 0814 	add.w	r8, r1, #20
 800924a:	00a3      	lsls	r3, r4, #2
 800924c:	f100 0514 	add.w	r5, r0, #20
 8009250:	9300      	str	r3, [sp, #0]
 8009252:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009256:	9301      	str	r3, [sp, #4]
 8009258:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800925c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009260:	3301      	adds	r3, #1
 8009262:	429a      	cmp	r2, r3
 8009264:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009268:	fbb2 f6f3 	udiv	r6, r2, r3
 800926c:	d32e      	bcc.n	80092cc <quorem+0x96>
 800926e:	f04f 0a00 	mov.w	sl, #0
 8009272:	46c4      	mov	ip, r8
 8009274:	46ae      	mov	lr, r5
 8009276:	46d3      	mov	fp, sl
 8009278:	f85c 3b04 	ldr.w	r3, [ip], #4
 800927c:	b298      	uxth	r0, r3
 800927e:	fb06 a000 	mla	r0, r6, r0, sl
 8009282:	0c02      	lsrs	r2, r0, #16
 8009284:	0c1b      	lsrs	r3, r3, #16
 8009286:	fb06 2303 	mla	r3, r6, r3, r2
 800928a:	f8de 2000 	ldr.w	r2, [lr]
 800928e:	b280      	uxth	r0, r0
 8009290:	b292      	uxth	r2, r2
 8009292:	1a12      	subs	r2, r2, r0
 8009294:	445a      	add	r2, fp
 8009296:	f8de 0000 	ldr.w	r0, [lr]
 800929a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800929e:	b29b      	uxth	r3, r3
 80092a0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80092a4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80092a8:	b292      	uxth	r2, r2
 80092aa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80092ae:	45e1      	cmp	r9, ip
 80092b0:	f84e 2b04 	str.w	r2, [lr], #4
 80092b4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80092b8:	d2de      	bcs.n	8009278 <quorem+0x42>
 80092ba:	9b00      	ldr	r3, [sp, #0]
 80092bc:	58eb      	ldr	r3, [r5, r3]
 80092be:	b92b      	cbnz	r3, 80092cc <quorem+0x96>
 80092c0:	9b01      	ldr	r3, [sp, #4]
 80092c2:	3b04      	subs	r3, #4
 80092c4:	429d      	cmp	r5, r3
 80092c6:	461a      	mov	r2, r3
 80092c8:	d32f      	bcc.n	800932a <quorem+0xf4>
 80092ca:	613c      	str	r4, [r7, #16]
 80092cc:	4638      	mov	r0, r7
 80092ce:	f001 f979 	bl	800a5c4 <__mcmp>
 80092d2:	2800      	cmp	r0, #0
 80092d4:	db25      	blt.n	8009322 <quorem+0xec>
 80092d6:	4629      	mov	r1, r5
 80092d8:	2000      	movs	r0, #0
 80092da:	f858 2b04 	ldr.w	r2, [r8], #4
 80092de:	f8d1 c000 	ldr.w	ip, [r1]
 80092e2:	fa1f fe82 	uxth.w	lr, r2
 80092e6:	fa1f f38c 	uxth.w	r3, ip
 80092ea:	eba3 030e 	sub.w	r3, r3, lr
 80092ee:	4403      	add	r3, r0
 80092f0:	0c12      	lsrs	r2, r2, #16
 80092f2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80092f6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009300:	45c1      	cmp	r9, r8
 8009302:	f841 3b04 	str.w	r3, [r1], #4
 8009306:	ea4f 4022 	mov.w	r0, r2, asr #16
 800930a:	d2e6      	bcs.n	80092da <quorem+0xa4>
 800930c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009310:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009314:	b922      	cbnz	r2, 8009320 <quorem+0xea>
 8009316:	3b04      	subs	r3, #4
 8009318:	429d      	cmp	r5, r3
 800931a:	461a      	mov	r2, r3
 800931c:	d30b      	bcc.n	8009336 <quorem+0x100>
 800931e:	613c      	str	r4, [r7, #16]
 8009320:	3601      	adds	r6, #1
 8009322:	4630      	mov	r0, r6
 8009324:	b003      	add	sp, #12
 8009326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800932a:	6812      	ldr	r2, [r2, #0]
 800932c:	3b04      	subs	r3, #4
 800932e:	2a00      	cmp	r2, #0
 8009330:	d1cb      	bne.n	80092ca <quorem+0x94>
 8009332:	3c01      	subs	r4, #1
 8009334:	e7c6      	b.n	80092c4 <quorem+0x8e>
 8009336:	6812      	ldr	r2, [r2, #0]
 8009338:	3b04      	subs	r3, #4
 800933a:	2a00      	cmp	r2, #0
 800933c:	d1ef      	bne.n	800931e <quorem+0xe8>
 800933e:	3c01      	subs	r4, #1
 8009340:	e7ea      	b.n	8009318 <quorem+0xe2>
 8009342:	2000      	movs	r0, #0
 8009344:	e7ee      	b.n	8009324 <quorem+0xee>
	...

08009348 <_dtoa_r>:
 8009348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800934c:	69c7      	ldr	r7, [r0, #28]
 800934e:	b099      	sub	sp, #100	@ 0x64
 8009350:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009354:	ec55 4b10 	vmov	r4, r5, d0
 8009358:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800935a:	9109      	str	r1, [sp, #36]	@ 0x24
 800935c:	4683      	mov	fp, r0
 800935e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009360:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009362:	b97f      	cbnz	r7, 8009384 <_dtoa_r+0x3c>
 8009364:	2010      	movs	r0, #16
 8009366:	f000 fdfd 	bl	8009f64 <malloc>
 800936a:	4602      	mov	r2, r0
 800936c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009370:	b920      	cbnz	r0, 800937c <_dtoa_r+0x34>
 8009372:	4ba7      	ldr	r3, [pc, #668]	@ (8009610 <_dtoa_r+0x2c8>)
 8009374:	21ef      	movs	r1, #239	@ 0xef
 8009376:	48a7      	ldr	r0, [pc, #668]	@ (8009614 <_dtoa_r+0x2cc>)
 8009378:	f001 fc5a 	bl	800ac30 <__assert_func>
 800937c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009380:	6007      	str	r7, [r0, #0]
 8009382:	60c7      	str	r7, [r0, #12]
 8009384:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009388:	6819      	ldr	r1, [r3, #0]
 800938a:	b159      	cbz	r1, 80093a4 <_dtoa_r+0x5c>
 800938c:	685a      	ldr	r2, [r3, #4]
 800938e:	604a      	str	r2, [r1, #4]
 8009390:	2301      	movs	r3, #1
 8009392:	4093      	lsls	r3, r2
 8009394:	608b      	str	r3, [r1, #8]
 8009396:	4658      	mov	r0, fp
 8009398:	f000 feda 	bl	800a150 <_Bfree>
 800939c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80093a0:	2200      	movs	r2, #0
 80093a2:	601a      	str	r2, [r3, #0]
 80093a4:	1e2b      	subs	r3, r5, #0
 80093a6:	bfb9      	ittee	lt
 80093a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80093ac:	9303      	strlt	r3, [sp, #12]
 80093ae:	2300      	movge	r3, #0
 80093b0:	6033      	strge	r3, [r6, #0]
 80093b2:	9f03      	ldr	r7, [sp, #12]
 80093b4:	4b98      	ldr	r3, [pc, #608]	@ (8009618 <_dtoa_r+0x2d0>)
 80093b6:	bfbc      	itt	lt
 80093b8:	2201      	movlt	r2, #1
 80093ba:	6032      	strlt	r2, [r6, #0]
 80093bc:	43bb      	bics	r3, r7
 80093be:	d112      	bne.n	80093e6 <_dtoa_r+0x9e>
 80093c0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80093c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80093c6:	6013      	str	r3, [r2, #0]
 80093c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80093cc:	4323      	orrs	r3, r4
 80093ce:	f000 854d 	beq.w	8009e6c <_dtoa_r+0xb24>
 80093d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80093d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800962c <_dtoa_r+0x2e4>
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f000 854f 	beq.w	8009e7c <_dtoa_r+0xb34>
 80093de:	f10a 0303 	add.w	r3, sl, #3
 80093e2:	f000 bd49 	b.w	8009e78 <_dtoa_r+0xb30>
 80093e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80093ea:	2200      	movs	r2, #0
 80093ec:	ec51 0b17 	vmov	r0, r1, d7
 80093f0:	2300      	movs	r3, #0
 80093f2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80093f6:	f7f7 fb6f 	bl	8000ad8 <__aeabi_dcmpeq>
 80093fa:	4680      	mov	r8, r0
 80093fc:	b158      	cbz	r0, 8009416 <_dtoa_r+0xce>
 80093fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009400:	2301      	movs	r3, #1
 8009402:	6013      	str	r3, [r2, #0]
 8009404:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009406:	b113      	cbz	r3, 800940e <_dtoa_r+0xc6>
 8009408:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800940a:	4b84      	ldr	r3, [pc, #528]	@ (800961c <_dtoa_r+0x2d4>)
 800940c:	6013      	str	r3, [r2, #0]
 800940e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009630 <_dtoa_r+0x2e8>
 8009412:	f000 bd33 	b.w	8009e7c <_dtoa_r+0xb34>
 8009416:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800941a:	aa16      	add	r2, sp, #88	@ 0x58
 800941c:	a917      	add	r1, sp, #92	@ 0x5c
 800941e:	4658      	mov	r0, fp
 8009420:	f001 f980 	bl	800a724 <__d2b>
 8009424:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009428:	4681      	mov	r9, r0
 800942a:	2e00      	cmp	r6, #0
 800942c:	d077      	beq.n	800951e <_dtoa_r+0x1d6>
 800942e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009430:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009434:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009438:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800943c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009440:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009444:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009448:	4619      	mov	r1, r3
 800944a:	2200      	movs	r2, #0
 800944c:	4b74      	ldr	r3, [pc, #464]	@ (8009620 <_dtoa_r+0x2d8>)
 800944e:	f7f6 ff23 	bl	8000298 <__aeabi_dsub>
 8009452:	a369      	add	r3, pc, #420	@ (adr r3, 80095f8 <_dtoa_r+0x2b0>)
 8009454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009458:	f7f7 f8d6 	bl	8000608 <__aeabi_dmul>
 800945c:	a368      	add	r3, pc, #416	@ (adr r3, 8009600 <_dtoa_r+0x2b8>)
 800945e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009462:	f7f6 ff1b 	bl	800029c <__adddf3>
 8009466:	4604      	mov	r4, r0
 8009468:	4630      	mov	r0, r6
 800946a:	460d      	mov	r5, r1
 800946c:	f7f7 f862 	bl	8000534 <__aeabi_i2d>
 8009470:	a365      	add	r3, pc, #404	@ (adr r3, 8009608 <_dtoa_r+0x2c0>)
 8009472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009476:	f7f7 f8c7 	bl	8000608 <__aeabi_dmul>
 800947a:	4602      	mov	r2, r0
 800947c:	460b      	mov	r3, r1
 800947e:	4620      	mov	r0, r4
 8009480:	4629      	mov	r1, r5
 8009482:	f7f6 ff0b 	bl	800029c <__adddf3>
 8009486:	4604      	mov	r4, r0
 8009488:	460d      	mov	r5, r1
 800948a:	f7f7 fb6d 	bl	8000b68 <__aeabi_d2iz>
 800948e:	2200      	movs	r2, #0
 8009490:	4607      	mov	r7, r0
 8009492:	2300      	movs	r3, #0
 8009494:	4620      	mov	r0, r4
 8009496:	4629      	mov	r1, r5
 8009498:	f7f7 fb28 	bl	8000aec <__aeabi_dcmplt>
 800949c:	b140      	cbz	r0, 80094b0 <_dtoa_r+0x168>
 800949e:	4638      	mov	r0, r7
 80094a0:	f7f7 f848 	bl	8000534 <__aeabi_i2d>
 80094a4:	4622      	mov	r2, r4
 80094a6:	462b      	mov	r3, r5
 80094a8:	f7f7 fb16 	bl	8000ad8 <__aeabi_dcmpeq>
 80094ac:	b900      	cbnz	r0, 80094b0 <_dtoa_r+0x168>
 80094ae:	3f01      	subs	r7, #1
 80094b0:	2f16      	cmp	r7, #22
 80094b2:	d851      	bhi.n	8009558 <_dtoa_r+0x210>
 80094b4:	4b5b      	ldr	r3, [pc, #364]	@ (8009624 <_dtoa_r+0x2dc>)
 80094b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80094ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094c2:	f7f7 fb13 	bl	8000aec <__aeabi_dcmplt>
 80094c6:	2800      	cmp	r0, #0
 80094c8:	d048      	beq.n	800955c <_dtoa_r+0x214>
 80094ca:	3f01      	subs	r7, #1
 80094cc:	2300      	movs	r3, #0
 80094ce:	9312      	str	r3, [sp, #72]	@ 0x48
 80094d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80094d2:	1b9b      	subs	r3, r3, r6
 80094d4:	1e5a      	subs	r2, r3, #1
 80094d6:	bf44      	itt	mi
 80094d8:	f1c3 0801 	rsbmi	r8, r3, #1
 80094dc:	2300      	movmi	r3, #0
 80094de:	9208      	str	r2, [sp, #32]
 80094e0:	bf54      	ite	pl
 80094e2:	f04f 0800 	movpl.w	r8, #0
 80094e6:	9308      	strmi	r3, [sp, #32]
 80094e8:	2f00      	cmp	r7, #0
 80094ea:	db39      	blt.n	8009560 <_dtoa_r+0x218>
 80094ec:	9b08      	ldr	r3, [sp, #32]
 80094ee:	970f      	str	r7, [sp, #60]	@ 0x3c
 80094f0:	443b      	add	r3, r7
 80094f2:	9308      	str	r3, [sp, #32]
 80094f4:	2300      	movs	r3, #0
 80094f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80094f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094fa:	2b09      	cmp	r3, #9
 80094fc:	d864      	bhi.n	80095c8 <_dtoa_r+0x280>
 80094fe:	2b05      	cmp	r3, #5
 8009500:	bfc4      	itt	gt
 8009502:	3b04      	subgt	r3, #4
 8009504:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009508:	f1a3 0302 	sub.w	r3, r3, #2
 800950c:	bfcc      	ite	gt
 800950e:	2400      	movgt	r4, #0
 8009510:	2401      	movle	r4, #1
 8009512:	2b03      	cmp	r3, #3
 8009514:	d863      	bhi.n	80095de <_dtoa_r+0x296>
 8009516:	e8df f003 	tbb	[pc, r3]
 800951a:	372a      	.short	0x372a
 800951c:	5535      	.short	0x5535
 800951e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009522:	441e      	add	r6, r3
 8009524:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009528:	2b20      	cmp	r3, #32
 800952a:	bfc1      	itttt	gt
 800952c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009530:	409f      	lslgt	r7, r3
 8009532:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009536:	fa24 f303 	lsrgt.w	r3, r4, r3
 800953a:	bfd6      	itet	le
 800953c:	f1c3 0320 	rsble	r3, r3, #32
 8009540:	ea47 0003 	orrgt.w	r0, r7, r3
 8009544:	fa04 f003 	lslle.w	r0, r4, r3
 8009548:	f7f6 ffe4 	bl	8000514 <__aeabi_ui2d>
 800954c:	2201      	movs	r2, #1
 800954e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009552:	3e01      	subs	r6, #1
 8009554:	9214      	str	r2, [sp, #80]	@ 0x50
 8009556:	e777      	b.n	8009448 <_dtoa_r+0x100>
 8009558:	2301      	movs	r3, #1
 800955a:	e7b8      	b.n	80094ce <_dtoa_r+0x186>
 800955c:	9012      	str	r0, [sp, #72]	@ 0x48
 800955e:	e7b7      	b.n	80094d0 <_dtoa_r+0x188>
 8009560:	427b      	negs	r3, r7
 8009562:	930a      	str	r3, [sp, #40]	@ 0x28
 8009564:	2300      	movs	r3, #0
 8009566:	eba8 0807 	sub.w	r8, r8, r7
 800956a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800956c:	e7c4      	b.n	80094f8 <_dtoa_r+0x1b0>
 800956e:	2300      	movs	r3, #0
 8009570:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009572:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009574:	2b00      	cmp	r3, #0
 8009576:	dc35      	bgt.n	80095e4 <_dtoa_r+0x29c>
 8009578:	2301      	movs	r3, #1
 800957a:	9300      	str	r3, [sp, #0]
 800957c:	9307      	str	r3, [sp, #28]
 800957e:	461a      	mov	r2, r3
 8009580:	920e      	str	r2, [sp, #56]	@ 0x38
 8009582:	e00b      	b.n	800959c <_dtoa_r+0x254>
 8009584:	2301      	movs	r3, #1
 8009586:	e7f3      	b.n	8009570 <_dtoa_r+0x228>
 8009588:	2300      	movs	r3, #0
 800958a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800958c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800958e:	18fb      	adds	r3, r7, r3
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	3301      	adds	r3, #1
 8009594:	2b01      	cmp	r3, #1
 8009596:	9307      	str	r3, [sp, #28]
 8009598:	bfb8      	it	lt
 800959a:	2301      	movlt	r3, #1
 800959c:	f8db 001c 	ldr.w	r0, [fp, #28]
 80095a0:	2100      	movs	r1, #0
 80095a2:	2204      	movs	r2, #4
 80095a4:	f102 0514 	add.w	r5, r2, #20
 80095a8:	429d      	cmp	r5, r3
 80095aa:	d91f      	bls.n	80095ec <_dtoa_r+0x2a4>
 80095ac:	6041      	str	r1, [r0, #4]
 80095ae:	4658      	mov	r0, fp
 80095b0:	f000 fd8e 	bl	800a0d0 <_Balloc>
 80095b4:	4682      	mov	sl, r0
 80095b6:	2800      	cmp	r0, #0
 80095b8:	d13c      	bne.n	8009634 <_dtoa_r+0x2ec>
 80095ba:	4b1b      	ldr	r3, [pc, #108]	@ (8009628 <_dtoa_r+0x2e0>)
 80095bc:	4602      	mov	r2, r0
 80095be:	f240 11af 	movw	r1, #431	@ 0x1af
 80095c2:	e6d8      	b.n	8009376 <_dtoa_r+0x2e>
 80095c4:	2301      	movs	r3, #1
 80095c6:	e7e0      	b.n	800958a <_dtoa_r+0x242>
 80095c8:	2401      	movs	r4, #1
 80095ca:	2300      	movs	r3, #0
 80095cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80095ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 80095d0:	f04f 33ff 	mov.w	r3, #4294967295
 80095d4:	9300      	str	r3, [sp, #0]
 80095d6:	9307      	str	r3, [sp, #28]
 80095d8:	2200      	movs	r2, #0
 80095da:	2312      	movs	r3, #18
 80095dc:	e7d0      	b.n	8009580 <_dtoa_r+0x238>
 80095de:	2301      	movs	r3, #1
 80095e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095e2:	e7f5      	b.n	80095d0 <_dtoa_r+0x288>
 80095e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095e6:	9300      	str	r3, [sp, #0]
 80095e8:	9307      	str	r3, [sp, #28]
 80095ea:	e7d7      	b.n	800959c <_dtoa_r+0x254>
 80095ec:	3101      	adds	r1, #1
 80095ee:	0052      	lsls	r2, r2, #1
 80095f0:	e7d8      	b.n	80095a4 <_dtoa_r+0x25c>
 80095f2:	bf00      	nop
 80095f4:	f3af 8000 	nop.w
 80095f8:	636f4361 	.word	0x636f4361
 80095fc:	3fd287a7 	.word	0x3fd287a7
 8009600:	8b60c8b3 	.word	0x8b60c8b3
 8009604:	3fc68a28 	.word	0x3fc68a28
 8009608:	509f79fb 	.word	0x509f79fb
 800960c:	3fd34413 	.word	0x3fd34413
 8009610:	0800c169 	.word	0x0800c169
 8009614:	0800c180 	.word	0x0800c180
 8009618:	7ff00000 	.word	0x7ff00000
 800961c:	0800c139 	.word	0x0800c139
 8009620:	3ff80000 	.word	0x3ff80000
 8009624:	0800c278 	.word	0x0800c278
 8009628:	0800c1d8 	.word	0x0800c1d8
 800962c:	0800c165 	.word	0x0800c165
 8009630:	0800c138 	.word	0x0800c138
 8009634:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009638:	6018      	str	r0, [r3, #0]
 800963a:	9b07      	ldr	r3, [sp, #28]
 800963c:	2b0e      	cmp	r3, #14
 800963e:	f200 80a4 	bhi.w	800978a <_dtoa_r+0x442>
 8009642:	2c00      	cmp	r4, #0
 8009644:	f000 80a1 	beq.w	800978a <_dtoa_r+0x442>
 8009648:	2f00      	cmp	r7, #0
 800964a:	dd33      	ble.n	80096b4 <_dtoa_r+0x36c>
 800964c:	4bad      	ldr	r3, [pc, #692]	@ (8009904 <_dtoa_r+0x5bc>)
 800964e:	f007 020f 	and.w	r2, r7, #15
 8009652:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009656:	ed93 7b00 	vldr	d7, [r3]
 800965a:	05f8      	lsls	r0, r7, #23
 800965c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009660:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009664:	d516      	bpl.n	8009694 <_dtoa_r+0x34c>
 8009666:	4ba8      	ldr	r3, [pc, #672]	@ (8009908 <_dtoa_r+0x5c0>)
 8009668:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800966c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009670:	f7f7 f8f4 	bl	800085c <__aeabi_ddiv>
 8009674:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009678:	f004 040f 	and.w	r4, r4, #15
 800967c:	2603      	movs	r6, #3
 800967e:	4da2      	ldr	r5, [pc, #648]	@ (8009908 <_dtoa_r+0x5c0>)
 8009680:	b954      	cbnz	r4, 8009698 <_dtoa_r+0x350>
 8009682:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009686:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800968a:	f7f7 f8e7 	bl	800085c <__aeabi_ddiv>
 800968e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009692:	e028      	b.n	80096e6 <_dtoa_r+0x39e>
 8009694:	2602      	movs	r6, #2
 8009696:	e7f2      	b.n	800967e <_dtoa_r+0x336>
 8009698:	07e1      	lsls	r1, r4, #31
 800969a:	d508      	bpl.n	80096ae <_dtoa_r+0x366>
 800969c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80096a4:	f7f6 ffb0 	bl	8000608 <__aeabi_dmul>
 80096a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096ac:	3601      	adds	r6, #1
 80096ae:	1064      	asrs	r4, r4, #1
 80096b0:	3508      	adds	r5, #8
 80096b2:	e7e5      	b.n	8009680 <_dtoa_r+0x338>
 80096b4:	f000 80d2 	beq.w	800985c <_dtoa_r+0x514>
 80096b8:	427c      	negs	r4, r7
 80096ba:	4b92      	ldr	r3, [pc, #584]	@ (8009904 <_dtoa_r+0x5bc>)
 80096bc:	4d92      	ldr	r5, [pc, #584]	@ (8009908 <_dtoa_r+0x5c0>)
 80096be:	f004 020f 	and.w	r2, r4, #15
 80096c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096ce:	f7f6 ff9b 	bl	8000608 <__aeabi_dmul>
 80096d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096d6:	1124      	asrs	r4, r4, #4
 80096d8:	2300      	movs	r3, #0
 80096da:	2602      	movs	r6, #2
 80096dc:	2c00      	cmp	r4, #0
 80096de:	f040 80b2 	bne.w	8009846 <_dtoa_r+0x4fe>
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d1d3      	bne.n	800968e <_dtoa_r+0x346>
 80096e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80096e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	f000 80b7 	beq.w	8009860 <_dtoa_r+0x518>
 80096f2:	4b86      	ldr	r3, [pc, #536]	@ (800990c <_dtoa_r+0x5c4>)
 80096f4:	2200      	movs	r2, #0
 80096f6:	4620      	mov	r0, r4
 80096f8:	4629      	mov	r1, r5
 80096fa:	f7f7 f9f7 	bl	8000aec <__aeabi_dcmplt>
 80096fe:	2800      	cmp	r0, #0
 8009700:	f000 80ae 	beq.w	8009860 <_dtoa_r+0x518>
 8009704:	9b07      	ldr	r3, [sp, #28]
 8009706:	2b00      	cmp	r3, #0
 8009708:	f000 80aa 	beq.w	8009860 <_dtoa_r+0x518>
 800970c:	9b00      	ldr	r3, [sp, #0]
 800970e:	2b00      	cmp	r3, #0
 8009710:	dd37      	ble.n	8009782 <_dtoa_r+0x43a>
 8009712:	1e7b      	subs	r3, r7, #1
 8009714:	9304      	str	r3, [sp, #16]
 8009716:	4620      	mov	r0, r4
 8009718:	4b7d      	ldr	r3, [pc, #500]	@ (8009910 <_dtoa_r+0x5c8>)
 800971a:	2200      	movs	r2, #0
 800971c:	4629      	mov	r1, r5
 800971e:	f7f6 ff73 	bl	8000608 <__aeabi_dmul>
 8009722:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009726:	9c00      	ldr	r4, [sp, #0]
 8009728:	3601      	adds	r6, #1
 800972a:	4630      	mov	r0, r6
 800972c:	f7f6 ff02 	bl	8000534 <__aeabi_i2d>
 8009730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009734:	f7f6 ff68 	bl	8000608 <__aeabi_dmul>
 8009738:	4b76      	ldr	r3, [pc, #472]	@ (8009914 <_dtoa_r+0x5cc>)
 800973a:	2200      	movs	r2, #0
 800973c:	f7f6 fdae 	bl	800029c <__adddf3>
 8009740:	4605      	mov	r5, r0
 8009742:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009746:	2c00      	cmp	r4, #0
 8009748:	f040 808d 	bne.w	8009866 <_dtoa_r+0x51e>
 800974c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009750:	4b71      	ldr	r3, [pc, #452]	@ (8009918 <_dtoa_r+0x5d0>)
 8009752:	2200      	movs	r2, #0
 8009754:	f7f6 fda0 	bl	8000298 <__aeabi_dsub>
 8009758:	4602      	mov	r2, r0
 800975a:	460b      	mov	r3, r1
 800975c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009760:	462a      	mov	r2, r5
 8009762:	4633      	mov	r3, r6
 8009764:	f7f7 f9e0 	bl	8000b28 <__aeabi_dcmpgt>
 8009768:	2800      	cmp	r0, #0
 800976a:	f040 828b 	bne.w	8009c84 <_dtoa_r+0x93c>
 800976e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009772:	462a      	mov	r2, r5
 8009774:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009778:	f7f7 f9b8 	bl	8000aec <__aeabi_dcmplt>
 800977c:	2800      	cmp	r0, #0
 800977e:	f040 8128 	bne.w	80099d2 <_dtoa_r+0x68a>
 8009782:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009786:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800978a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800978c:	2b00      	cmp	r3, #0
 800978e:	f2c0 815a 	blt.w	8009a46 <_dtoa_r+0x6fe>
 8009792:	2f0e      	cmp	r7, #14
 8009794:	f300 8157 	bgt.w	8009a46 <_dtoa_r+0x6fe>
 8009798:	4b5a      	ldr	r3, [pc, #360]	@ (8009904 <_dtoa_r+0x5bc>)
 800979a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800979e:	ed93 7b00 	vldr	d7, [r3]
 80097a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	ed8d 7b00 	vstr	d7, [sp]
 80097aa:	da03      	bge.n	80097b4 <_dtoa_r+0x46c>
 80097ac:	9b07      	ldr	r3, [sp, #28]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	f340 8101 	ble.w	80099b6 <_dtoa_r+0x66e>
 80097b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80097b8:	4656      	mov	r6, sl
 80097ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097be:	4620      	mov	r0, r4
 80097c0:	4629      	mov	r1, r5
 80097c2:	f7f7 f84b 	bl	800085c <__aeabi_ddiv>
 80097c6:	f7f7 f9cf 	bl	8000b68 <__aeabi_d2iz>
 80097ca:	4680      	mov	r8, r0
 80097cc:	f7f6 feb2 	bl	8000534 <__aeabi_i2d>
 80097d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097d4:	f7f6 ff18 	bl	8000608 <__aeabi_dmul>
 80097d8:	4602      	mov	r2, r0
 80097da:	460b      	mov	r3, r1
 80097dc:	4620      	mov	r0, r4
 80097de:	4629      	mov	r1, r5
 80097e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80097e4:	f7f6 fd58 	bl	8000298 <__aeabi_dsub>
 80097e8:	f806 4b01 	strb.w	r4, [r6], #1
 80097ec:	9d07      	ldr	r5, [sp, #28]
 80097ee:	eba6 040a 	sub.w	r4, r6, sl
 80097f2:	42a5      	cmp	r5, r4
 80097f4:	4602      	mov	r2, r0
 80097f6:	460b      	mov	r3, r1
 80097f8:	f040 8117 	bne.w	8009a2a <_dtoa_r+0x6e2>
 80097fc:	f7f6 fd4e 	bl	800029c <__adddf3>
 8009800:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009804:	4604      	mov	r4, r0
 8009806:	460d      	mov	r5, r1
 8009808:	f7f7 f98e 	bl	8000b28 <__aeabi_dcmpgt>
 800980c:	2800      	cmp	r0, #0
 800980e:	f040 80f9 	bne.w	8009a04 <_dtoa_r+0x6bc>
 8009812:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009816:	4620      	mov	r0, r4
 8009818:	4629      	mov	r1, r5
 800981a:	f7f7 f95d 	bl	8000ad8 <__aeabi_dcmpeq>
 800981e:	b118      	cbz	r0, 8009828 <_dtoa_r+0x4e0>
 8009820:	f018 0f01 	tst.w	r8, #1
 8009824:	f040 80ee 	bne.w	8009a04 <_dtoa_r+0x6bc>
 8009828:	4649      	mov	r1, r9
 800982a:	4658      	mov	r0, fp
 800982c:	f000 fc90 	bl	800a150 <_Bfree>
 8009830:	2300      	movs	r3, #0
 8009832:	7033      	strb	r3, [r6, #0]
 8009834:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009836:	3701      	adds	r7, #1
 8009838:	601f      	str	r7, [r3, #0]
 800983a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800983c:	2b00      	cmp	r3, #0
 800983e:	f000 831d 	beq.w	8009e7c <_dtoa_r+0xb34>
 8009842:	601e      	str	r6, [r3, #0]
 8009844:	e31a      	b.n	8009e7c <_dtoa_r+0xb34>
 8009846:	07e2      	lsls	r2, r4, #31
 8009848:	d505      	bpl.n	8009856 <_dtoa_r+0x50e>
 800984a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800984e:	f7f6 fedb 	bl	8000608 <__aeabi_dmul>
 8009852:	3601      	adds	r6, #1
 8009854:	2301      	movs	r3, #1
 8009856:	1064      	asrs	r4, r4, #1
 8009858:	3508      	adds	r5, #8
 800985a:	e73f      	b.n	80096dc <_dtoa_r+0x394>
 800985c:	2602      	movs	r6, #2
 800985e:	e742      	b.n	80096e6 <_dtoa_r+0x39e>
 8009860:	9c07      	ldr	r4, [sp, #28]
 8009862:	9704      	str	r7, [sp, #16]
 8009864:	e761      	b.n	800972a <_dtoa_r+0x3e2>
 8009866:	4b27      	ldr	r3, [pc, #156]	@ (8009904 <_dtoa_r+0x5bc>)
 8009868:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800986a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800986e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009872:	4454      	add	r4, sl
 8009874:	2900      	cmp	r1, #0
 8009876:	d053      	beq.n	8009920 <_dtoa_r+0x5d8>
 8009878:	4928      	ldr	r1, [pc, #160]	@ (800991c <_dtoa_r+0x5d4>)
 800987a:	2000      	movs	r0, #0
 800987c:	f7f6 ffee 	bl	800085c <__aeabi_ddiv>
 8009880:	4633      	mov	r3, r6
 8009882:	462a      	mov	r2, r5
 8009884:	f7f6 fd08 	bl	8000298 <__aeabi_dsub>
 8009888:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800988c:	4656      	mov	r6, sl
 800988e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009892:	f7f7 f969 	bl	8000b68 <__aeabi_d2iz>
 8009896:	4605      	mov	r5, r0
 8009898:	f7f6 fe4c 	bl	8000534 <__aeabi_i2d>
 800989c:	4602      	mov	r2, r0
 800989e:	460b      	mov	r3, r1
 80098a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098a4:	f7f6 fcf8 	bl	8000298 <__aeabi_dsub>
 80098a8:	3530      	adds	r5, #48	@ 0x30
 80098aa:	4602      	mov	r2, r0
 80098ac:	460b      	mov	r3, r1
 80098ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80098b2:	f806 5b01 	strb.w	r5, [r6], #1
 80098b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80098ba:	f7f7 f917 	bl	8000aec <__aeabi_dcmplt>
 80098be:	2800      	cmp	r0, #0
 80098c0:	d171      	bne.n	80099a6 <_dtoa_r+0x65e>
 80098c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098c6:	4911      	ldr	r1, [pc, #68]	@ (800990c <_dtoa_r+0x5c4>)
 80098c8:	2000      	movs	r0, #0
 80098ca:	f7f6 fce5 	bl	8000298 <__aeabi_dsub>
 80098ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80098d2:	f7f7 f90b 	bl	8000aec <__aeabi_dcmplt>
 80098d6:	2800      	cmp	r0, #0
 80098d8:	f040 8095 	bne.w	8009a06 <_dtoa_r+0x6be>
 80098dc:	42a6      	cmp	r6, r4
 80098de:	f43f af50 	beq.w	8009782 <_dtoa_r+0x43a>
 80098e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80098e6:	4b0a      	ldr	r3, [pc, #40]	@ (8009910 <_dtoa_r+0x5c8>)
 80098e8:	2200      	movs	r2, #0
 80098ea:	f7f6 fe8d 	bl	8000608 <__aeabi_dmul>
 80098ee:	4b08      	ldr	r3, [pc, #32]	@ (8009910 <_dtoa_r+0x5c8>)
 80098f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80098f4:	2200      	movs	r2, #0
 80098f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098fa:	f7f6 fe85 	bl	8000608 <__aeabi_dmul>
 80098fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009902:	e7c4      	b.n	800988e <_dtoa_r+0x546>
 8009904:	0800c278 	.word	0x0800c278
 8009908:	0800c250 	.word	0x0800c250
 800990c:	3ff00000 	.word	0x3ff00000
 8009910:	40240000 	.word	0x40240000
 8009914:	401c0000 	.word	0x401c0000
 8009918:	40140000 	.word	0x40140000
 800991c:	3fe00000 	.word	0x3fe00000
 8009920:	4631      	mov	r1, r6
 8009922:	4628      	mov	r0, r5
 8009924:	f7f6 fe70 	bl	8000608 <__aeabi_dmul>
 8009928:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800992c:	9415      	str	r4, [sp, #84]	@ 0x54
 800992e:	4656      	mov	r6, sl
 8009930:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009934:	f7f7 f918 	bl	8000b68 <__aeabi_d2iz>
 8009938:	4605      	mov	r5, r0
 800993a:	f7f6 fdfb 	bl	8000534 <__aeabi_i2d>
 800993e:	4602      	mov	r2, r0
 8009940:	460b      	mov	r3, r1
 8009942:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009946:	f7f6 fca7 	bl	8000298 <__aeabi_dsub>
 800994a:	3530      	adds	r5, #48	@ 0x30
 800994c:	f806 5b01 	strb.w	r5, [r6], #1
 8009950:	4602      	mov	r2, r0
 8009952:	460b      	mov	r3, r1
 8009954:	42a6      	cmp	r6, r4
 8009956:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800995a:	f04f 0200 	mov.w	r2, #0
 800995e:	d124      	bne.n	80099aa <_dtoa_r+0x662>
 8009960:	4bac      	ldr	r3, [pc, #688]	@ (8009c14 <_dtoa_r+0x8cc>)
 8009962:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009966:	f7f6 fc99 	bl	800029c <__adddf3>
 800996a:	4602      	mov	r2, r0
 800996c:	460b      	mov	r3, r1
 800996e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009972:	f7f7 f8d9 	bl	8000b28 <__aeabi_dcmpgt>
 8009976:	2800      	cmp	r0, #0
 8009978:	d145      	bne.n	8009a06 <_dtoa_r+0x6be>
 800997a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800997e:	49a5      	ldr	r1, [pc, #660]	@ (8009c14 <_dtoa_r+0x8cc>)
 8009980:	2000      	movs	r0, #0
 8009982:	f7f6 fc89 	bl	8000298 <__aeabi_dsub>
 8009986:	4602      	mov	r2, r0
 8009988:	460b      	mov	r3, r1
 800998a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800998e:	f7f7 f8ad 	bl	8000aec <__aeabi_dcmplt>
 8009992:	2800      	cmp	r0, #0
 8009994:	f43f aef5 	beq.w	8009782 <_dtoa_r+0x43a>
 8009998:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800999a:	1e73      	subs	r3, r6, #1
 800999c:	9315      	str	r3, [sp, #84]	@ 0x54
 800999e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80099a2:	2b30      	cmp	r3, #48	@ 0x30
 80099a4:	d0f8      	beq.n	8009998 <_dtoa_r+0x650>
 80099a6:	9f04      	ldr	r7, [sp, #16]
 80099a8:	e73e      	b.n	8009828 <_dtoa_r+0x4e0>
 80099aa:	4b9b      	ldr	r3, [pc, #620]	@ (8009c18 <_dtoa_r+0x8d0>)
 80099ac:	f7f6 fe2c 	bl	8000608 <__aeabi_dmul>
 80099b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099b4:	e7bc      	b.n	8009930 <_dtoa_r+0x5e8>
 80099b6:	d10c      	bne.n	80099d2 <_dtoa_r+0x68a>
 80099b8:	4b98      	ldr	r3, [pc, #608]	@ (8009c1c <_dtoa_r+0x8d4>)
 80099ba:	2200      	movs	r2, #0
 80099bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099c0:	f7f6 fe22 	bl	8000608 <__aeabi_dmul>
 80099c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099c8:	f7f7 f8a4 	bl	8000b14 <__aeabi_dcmpge>
 80099cc:	2800      	cmp	r0, #0
 80099ce:	f000 8157 	beq.w	8009c80 <_dtoa_r+0x938>
 80099d2:	2400      	movs	r4, #0
 80099d4:	4625      	mov	r5, r4
 80099d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099d8:	43db      	mvns	r3, r3
 80099da:	9304      	str	r3, [sp, #16]
 80099dc:	4656      	mov	r6, sl
 80099de:	2700      	movs	r7, #0
 80099e0:	4621      	mov	r1, r4
 80099e2:	4658      	mov	r0, fp
 80099e4:	f000 fbb4 	bl	800a150 <_Bfree>
 80099e8:	2d00      	cmp	r5, #0
 80099ea:	d0dc      	beq.n	80099a6 <_dtoa_r+0x65e>
 80099ec:	b12f      	cbz	r7, 80099fa <_dtoa_r+0x6b2>
 80099ee:	42af      	cmp	r7, r5
 80099f0:	d003      	beq.n	80099fa <_dtoa_r+0x6b2>
 80099f2:	4639      	mov	r1, r7
 80099f4:	4658      	mov	r0, fp
 80099f6:	f000 fbab 	bl	800a150 <_Bfree>
 80099fa:	4629      	mov	r1, r5
 80099fc:	4658      	mov	r0, fp
 80099fe:	f000 fba7 	bl	800a150 <_Bfree>
 8009a02:	e7d0      	b.n	80099a6 <_dtoa_r+0x65e>
 8009a04:	9704      	str	r7, [sp, #16]
 8009a06:	4633      	mov	r3, r6
 8009a08:	461e      	mov	r6, r3
 8009a0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a0e:	2a39      	cmp	r2, #57	@ 0x39
 8009a10:	d107      	bne.n	8009a22 <_dtoa_r+0x6da>
 8009a12:	459a      	cmp	sl, r3
 8009a14:	d1f8      	bne.n	8009a08 <_dtoa_r+0x6c0>
 8009a16:	9a04      	ldr	r2, [sp, #16]
 8009a18:	3201      	adds	r2, #1
 8009a1a:	9204      	str	r2, [sp, #16]
 8009a1c:	2230      	movs	r2, #48	@ 0x30
 8009a1e:	f88a 2000 	strb.w	r2, [sl]
 8009a22:	781a      	ldrb	r2, [r3, #0]
 8009a24:	3201      	adds	r2, #1
 8009a26:	701a      	strb	r2, [r3, #0]
 8009a28:	e7bd      	b.n	80099a6 <_dtoa_r+0x65e>
 8009a2a:	4b7b      	ldr	r3, [pc, #492]	@ (8009c18 <_dtoa_r+0x8d0>)
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	f7f6 fdeb 	bl	8000608 <__aeabi_dmul>
 8009a32:	2200      	movs	r2, #0
 8009a34:	2300      	movs	r3, #0
 8009a36:	4604      	mov	r4, r0
 8009a38:	460d      	mov	r5, r1
 8009a3a:	f7f7 f84d 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	f43f aebb 	beq.w	80097ba <_dtoa_r+0x472>
 8009a44:	e6f0      	b.n	8009828 <_dtoa_r+0x4e0>
 8009a46:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009a48:	2a00      	cmp	r2, #0
 8009a4a:	f000 80db 	beq.w	8009c04 <_dtoa_r+0x8bc>
 8009a4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a50:	2a01      	cmp	r2, #1
 8009a52:	f300 80bf 	bgt.w	8009bd4 <_dtoa_r+0x88c>
 8009a56:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009a58:	2a00      	cmp	r2, #0
 8009a5a:	f000 80b7 	beq.w	8009bcc <_dtoa_r+0x884>
 8009a5e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009a62:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009a64:	4646      	mov	r6, r8
 8009a66:	9a08      	ldr	r2, [sp, #32]
 8009a68:	2101      	movs	r1, #1
 8009a6a:	441a      	add	r2, r3
 8009a6c:	4658      	mov	r0, fp
 8009a6e:	4498      	add	r8, r3
 8009a70:	9208      	str	r2, [sp, #32]
 8009a72:	f000 fc21 	bl	800a2b8 <__i2b>
 8009a76:	4605      	mov	r5, r0
 8009a78:	b15e      	cbz	r6, 8009a92 <_dtoa_r+0x74a>
 8009a7a:	9b08      	ldr	r3, [sp, #32]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	dd08      	ble.n	8009a92 <_dtoa_r+0x74a>
 8009a80:	42b3      	cmp	r3, r6
 8009a82:	9a08      	ldr	r2, [sp, #32]
 8009a84:	bfa8      	it	ge
 8009a86:	4633      	movge	r3, r6
 8009a88:	eba8 0803 	sub.w	r8, r8, r3
 8009a8c:	1af6      	subs	r6, r6, r3
 8009a8e:	1ad3      	subs	r3, r2, r3
 8009a90:	9308      	str	r3, [sp, #32]
 8009a92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a94:	b1f3      	cbz	r3, 8009ad4 <_dtoa_r+0x78c>
 8009a96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	f000 80b7 	beq.w	8009c0c <_dtoa_r+0x8c4>
 8009a9e:	b18c      	cbz	r4, 8009ac4 <_dtoa_r+0x77c>
 8009aa0:	4629      	mov	r1, r5
 8009aa2:	4622      	mov	r2, r4
 8009aa4:	4658      	mov	r0, fp
 8009aa6:	f000 fcc7 	bl	800a438 <__pow5mult>
 8009aaa:	464a      	mov	r2, r9
 8009aac:	4601      	mov	r1, r0
 8009aae:	4605      	mov	r5, r0
 8009ab0:	4658      	mov	r0, fp
 8009ab2:	f000 fc17 	bl	800a2e4 <__multiply>
 8009ab6:	4649      	mov	r1, r9
 8009ab8:	9004      	str	r0, [sp, #16]
 8009aba:	4658      	mov	r0, fp
 8009abc:	f000 fb48 	bl	800a150 <_Bfree>
 8009ac0:	9b04      	ldr	r3, [sp, #16]
 8009ac2:	4699      	mov	r9, r3
 8009ac4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ac6:	1b1a      	subs	r2, r3, r4
 8009ac8:	d004      	beq.n	8009ad4 <_dtoa_r+0x78c>
 8009aca:	4649      	mov	r1, r9
 8009acc:	4658      	mov	r0, fp
 8009ace:	f000 fcb3 	bl	800a438 <__pow5mult>
 8009ad2:	4681      	mov	r9, r0
 8009ad4:	2101      	movs	r1, #1
 8009ad6:	4658      	mov	r0, fp
 8009ad8:	f000 fbee 	bl	800a2b8 <__i2b>
 8009adc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ade:	4604      	mov	r4, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	f000 81cf 	beq.w	8009e84 <_dtoa_r+0xb3c>
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	4601      	mov	r1, r0
 8009aea:	4658      	mov	r0, fp
 8009aec:	f000 fca4 	bl	800a438 <__pow5mult>
 8009af0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	4604      	mov	r4, r0
 8009af6:	f300 8095 	bgt.w	8009c24 <_dtoa_r+0x8dc>
 8009afa:	9b02      	ldr	r3, [sp, #8]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	f040 8087 	bne.w	8009c10 <_dtoa_r+0x8c8>
 8009b02:	9b03      	ldr	r3, [sp, #12]
 8009b04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	f040 8089 	bne.w	8009c20 <_dtoa_r+0x8d8>
 8009b0e:	9b03      	ldr	r3, [sp, #12]
 8009b10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009b14:	0d1b      	lsrs	r3, r3, #20
 8009b16:	051b      	lsls	r3, r3, #20
 8009b18:	b12b      	cbz	r3, 8009b26 <_dtoa_r+0x7de>
 8009b1a:	9b08      	ldr	r3, [sp, #32]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	9308      	str	r3, [sp, #32]
 8009b20:	f108 0801 	add.w	r8, r8, #1
 8009b24:	2301      	movs	r3, #1
 8009b26:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	f000 81b0 	beq.w	8009e90 <_dtoa_r+0xb48>
 8009b30:	6923      	ldr	r3, [r4, #16]
 8009b32:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b36:	6918      	ldr	r0, [r3, #16]
 8009b38:	f000 fb72 	bl	800a220 <__hi0bits>
 8009b3c:	f1c0 0020 	rsb	r0, r0, #32
 8009b40:	9b08      	ldr	r3, [sp, #32]
 8009b42:	4418      	add	r0, r3
 8009b44:	f010 001f 	ands.w	r0, r0, #31
 8009b48:	d077      	beq.n	8009c3a <_dtoa_r+0x8f2>
 8009b4a:	f1c0 0320 	rsb	r3, r0, #32
 8009b4e:	2b04      	cmp	r3, #4
 8009b50:	dd6b      	ble.n	8009c2a <_dtoa_r+0x8e2>
 8009b52:	9b08      	ldr	r3, [sp, #32]
 8009b54:	f1c0 001c 	rsb	r0, r0, #28
 8009b58:	4403      	add	r3, r0
 8009b5a:	4480      	add	r8, r0
 8009b5c:	4406      	add	r6, r0
 8009b5e:	9308      	str	r3, [sp, #32]
 8009b60:	f1b8 0f00 	cmp.w	r8, #0
 8009b64:	dd05      	ble.n	8009b72 <_dtoa_r+0x82a>
 8009b66:	4649      	mov	r1, r9
 8009b68:	4642      	mov	r2, r8
 8009b6a:	4658      	mov	r0, fp
 8009b6c:	f000 fcbe 	bl	800a4ec <__lshift>
 8009b70:	4681      	mov	r9, r0
 8009b72:	9b08      	ldr	r3, [sp, #32]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	dd05      	ble.n	8009b84 <_dtoa_r+0x83c>
 8009b78:	4621      	mov	r1, r4
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	4658      	mov	r0, fp
 8009b7e:	f000 fcb5 	bl	800a4ec <__lshift>
 8009b82:	4604      	mov	r4, r0
 8009b84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d059      	beq.n	8009c3e <_dtoa_r+0x8f6>
 8009b8a:	4621      	mov	r1, r4
 8009b8c:	4648      	mov	r0, r9
 8009b8e:	f000 fd19 	bl	800a5c4 <__mcmp>
 8009b92:	2800      	cmp	r0, #0
 8009b94:	da53      	bge.n	8009c3e <_dtoa_r+0x8f6>
 8009b96:	1e7b      	subs	r3, r7, #1
 8009b98:	9304      	str	r3, [sp, #16]
 8009b9a:	4649      	mov	r1, r9
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	220a      	movs	r2, #10
 8009ba0:	4658      	mov	r0, fp
 8009ba2:	f000 faf7 	bl	800a194 <__multadd>
 8009ba6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ba8:	4681      	mov	r9, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	f000 8172 	beq.w	8009e94 <_dtoa_r+0xb4c>
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	4629      	mov	r1, r5
 8009bb4:	220a      	movs	r2, #10
 8009bb6:	4658      	mov	r0, fp
 8009bb8:	f000 faec 	bl	800a194 <__multadd>
 8009bbc:	9b00      	ldr	r3, [sp, #0]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	4605      	mov	r5, r0
 8009bc2:	dc67      	bgt.n	8009c94 <_dtoa_r+0x94c>
 8009bc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bc6:	2b02      	cmp	r3, #2
 8009bc8:	dc41      	bgt.n	8009c4e <_dtoa_r+0x906>
 8009bca:	e063      	b.n	8009c94 <_dtoa_r+0x94c>
 8009bcc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009bce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009bd2:	e746      	b.n	8009a62 <_dtoa_r+0x71a>
 8009bd4:	9b07      	ldr	r3, [sp, #28]
 8009bd6:	1e5c      	subs	r4, r3, #1
 8009bd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bda:	42a3      	cmp	r3, r4
 8009bdc:	bfbf      	itttt	lt
 8009bde:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009be0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009be2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009be4:	1ae3      	sublt	r3, r4, r3
 8009be6:	bfb4      	ite	lt
 8009be8:	18d2      	addlt	r2, r2, r3
 8009bea:	1b1c      	subge	r4, r3, r4
 8009bec:	9b07      	ldr	r3, [sp, #28]
 8009bee:	bfbc      	itt	lt
 8009bf0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009bf2:	2400      	movlt	r4, #0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	bfb5      	itete	lt
 8009bf8:	eba8 0603 	sublt.w	r6, r8, r3
 8009bfc:	9b07      	ldrge	r3, [sp, #28]
 8009bfe:	2300      	movlt	r3, #0
 8009c00:	4646      	movge	r6, r8
 8009c02:	e730      	b.n	8009a66 <_dtoa_r+0x71e>
 8009c04:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009c06:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009c08:	4646      	mov	r6, r8
 8009c0a:	e735      	b.n	8009a78 <_dtoa_r+0x730>
 8009c0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c0e:	e75c      	b.n	8009aca <_dtoa_r+0x782>
 8009c10:	2300      	movs	r3, #0
 8009c12:	e788      	b.n	8009b26 <_dtoa_r+0x7de>
 8009c14:	3fe00000 	.word	0x3fe00000
 8009c18:	40240000 	.word	0x40240000
 8009c1c:	40140000 	.word	0x40140000
 8009c20:	9b02      	ldr	r3, [sp, #8]
 8009c22:	e780      	b.n	8009b26 <_dtoa_r+0x7de>
 8009c24:	2300      	movs	r3, #0
 8009c26:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c28:	e782      	b.n	8009b30 <_dtoa_r+0x7e8>
 8009c2a:	d099      	beq.n	8009b60 <_dtoa_r+0x818>
 8009c2c:	9a08      	ldr	r2, [sp, #32]
 8009c2e:	331c      	adds	r3, #28
 8009c30:	441a      	add	r2, r3
 8009c32:	4498      	add	r8, r3
 8009c34:	441e      	add	r6, r3
 8009c36:	9208      	str	r2, [sp, #32]
 8009c38:	e792      	b.n	8009b60 <_dtoa_r+0x818>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	e7f6      	b.n	8009c2c <_dtoa_r+0x8e4>
 8009c3e:	9b07      	ldr	r3, [sp, #28]
 8009c40:	9704      	str	r7, [sp, #16]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	dc20      	bgt.n	8009c88 <_dtoa_r+0x940>
 8009c46:	9300      	str	r3, [sp, #0]
 8009c48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c4a:	2b02      	cmp	r3, #2
 8009c4c:	dd1e      	ble.n	8009c8c <_dtoa_r+0x944>
 8009c4e:	9b00      	ldr	r3, [sp, #0]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	f47f aec0 	bne.w	80099d6 <_dtoa_r+0x68e>
 8009c56:	4621      	mov	r1, r4
 8009c58:	2205      	movs	r2, #5
 8009c5a:	4658      	mov	r0, fp
 8009c5c:	f000 fa9a 	bl	800a194 <__multadd>
 8009c60:	4601      	mov	r1, r0
 8009c62:	4604      	mov	r4, r0
 8009c64:	4648      	mov	r0, r9
 8009c66:	f000 fcad 	bl	800a5c4 <__mcmp>
 8009c6a:	2800      	cmp	r0, #0
 8009c6c:	f77f aeb3 	ble.w	80099d6 <_dtoa_r+0x68e>
 8009c70:	4656      	mov	r6, sl
 8009c72:	2331      	movs	r3, #49	@ 0x31
 8009c74:	f806 3b01 	strb.w	r3, [r6], #1
 8009c78:	9b04      	ldr	r3, [sp, #16]
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	9304      	str	r3, [sp, #16]
 8009c7e:	e6ae      	b.n	80099de <_dtoa_r+0x696>
 8009c80:	9c07      	ldr	r4, [sp, #28]
 8009c82:	9704      	str	r7, [sp, #16]
 8009c84:	4625      	mov	r5, r4
 8009c86:	e7f3      	b.n	8009c70 <_dtoa_r+0x928>
 8009c88:	9b07      	ldr	r3, [sp, #28]
 8009c8a:	9300      	str	r3, [sp, #0]
 8009c8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	f000 8104 	beq.w	8009e9c <_dtoa_r+0xb54>
 8009c94:	2e00      	cmp	r6, #0
 8009c96:	dd05      	ble.n	8009ca4 <_dtoa_r+0x95c>
 8009c98:	4629      	mov	r1, r5
 8009c9a:	4632      	mov	r2, r6
 8009c9c:	4658      	mov	r0, fp
 8009c9e:	f000 fc25 	bl	800a4ec <__lshift>
 8009ca2:	4605      	mov	r5, r0
 8009ca4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d05a      	beq.n	8009d60 <_dtoa_r+0xa18>
 8009caa:	6869      	ldr	r1, [r5, #4]
 8009cac:	4658      	mov	r0, fp
 8009cae:	f000 fa0f 	bl	800a0d0 <_Balloc>
 8009cb2:	4606      	mov	r6, r0
 8009cb4:	b928      	cbnz	r0, 8009cc2 <_dtoa_r+0x97a>
 8009cb6:	4b84      	ldr	r3, [pc, #528]	@ (8009ec8 <_dtoa_r+0xb80>)
 8009cb8:	4602      	mov	r2, r0
 8009cba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009cbe:	f7ff bb5a 	b.w	8009376 <_dtoa_r+0x2e>
 8009cc2:	692a      	ldr	r2, [r5, #16]
 8009cc4:	3202      	adds	r2, #2
 8009cc6:	0092      	lsls	r2, r2, #2
 8009cc8:	f105 010c 	add.w	r1, r5, #12
 8009ccc:	300c      	adds	r0, #12
 8009cce:	f7ff faa4 	bl	800921a <memcpy>
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	4631      	mov	r1, r6
 8009cd6:	4658      	mov	r0, fp
 8009cd8:	f000 fc08 	bl	800a4ec <__lshift>
 8009cdc:	f10a 0301 	add.w	r3, sl, #1
 8009ce0:	9307      	str	r3, [sp, #28]
 8009ce2:	9b00      	ldr	r3, [sp, #0]
 8009ce4:	4453      	add	r3, sl
 8009ce6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ce8:	9b02      	ldr	r3, [sp, #8]
 8009cea:	f003 0301 	and.w	r3, r3, #1
 8009cee:	462f      	mov	r7, r5
 8009cf0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009cf2:	4605      	mov	r5, r0
 8009cf4:	9b07      	ldr	r3, [sp, #28]
 8009cf6:	4621      	mov	r1, r4
 8009cf8:	3b01      	subs	r3, #1
 8009cfa:	4648      	mov	r0, r9
 8009cfc:	9300      	str	r3, [sp, #0]
 8009cfe:	f7ff fa9a 	bl	8009236 <quorem>
 8009d02:	4639      	mov	r1, r7
 8009d04:	9002      	str	r0, [sp, #8]
 8009d06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009d0a:	4648      	mov	r0, r9
 8009d0c:	f000 fc5a 	bl	800a5c4 <__mcmp>
 8009d10:	462a      	mov	r2, r5
 8009d12:	9008      	str	r0, [sp, #32]
 8009d14:	4621      	mov	r1, r4
 8009d16:	4658      	mov	r0, fp
 8009d18:	f000 fc70 	bl	800a5fc <__mdiff>
 8009d1c:	68c2      	ldr	r2, [r0, #12]
 8009d1e:	4606      	mov	r6, r0
 8009d20:	bb02      	cbnz	r2, 8009d64 <_dtoa_r+0xa1c>
 8009d22:	4601      	mov	r1, r0
 8009d24:	4648      	mov	r0, r9
 8009d26:	f000 fc4d 	bl	800a5c4 <__mcmp>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	4631      	mov	r1, r6
 8009d2e:	4658      	mov	r0, fp
 8009d30:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d32:	f000 fa0d 	bl	800a150 <_Bfree>
 8009d36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d3a:	9e07      	ldr	r6, [sp, #28]
 8009d3c:	ea43 0102 	orr.w	r1, r3, r2
 8009d40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d42:	4319      	orrs	r1, r3
 8009d44:	d110      	bne.n	8009d68 <_dtoa_r+0xa20>
 8009d46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009d4a:	d029      	beq.n	8009da0 <_dtoa_r+0xa58>
 8009d4c:	9b08      	ldr	r3, [sp, #32]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	dd02      	ble.n	8009d58 <_dtoa_r+0xa10>
 8009d52:	9b02      	ldr	r3, [sp, #8]
 8009d54:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009d58:	9b00      	ldr	r3, [sp, #0]
 8009d5a:	f883 8000 	strb.w	r8, [r3]
 8009d5e:	e63f      	b.n	80099e0 <_dtoa_r+0x698>
 8009d60:	4628      	mov	r0, r5
 8009d62:	e7bb      	b.n	8009cdc <_dtoa_r+0x994>
 8009d64:	2201      	movs	r2, #1
 8009d66:	e7e1      	b.n	8009d2c <_dtoa_r+0x9e4>
 8009d68:	9b08      	ldr	r3, [sp, #32]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	db04      	blt.n	8009d78 <_dtoa_r+0xa30>
 8009d6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009d70:	430b      	orrs	r3, r1
 8009d72:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009d74:	430b      	orrs	r3, r1
 8009d76:	d120      	bne.n	8009dba <_dtoa_r+0xa72>
 8009d78:	2a00      	cmp	r2, #0
 8009d7a:	dded      	ble.n	8009d58 <_dtoa_r+0xa10>
 8009d7c:	4649      	mov	r1, r9
 8009d7e:	2201      	movs	r2, #1
 8009d80:	4658      	mov	r0, fp
 8009d82:	f000 fbb3 	bl	800a4ec <__lshift>
 8009d86:	4621      	mov	r1, r4
 8009d88:	4681      	mov	r9, r0
 8009d8a:	f000 fc1b 	bl	800a5c4 <__mcmp>
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	dc03      	bgt.n	8009d9a <_dtoa_r+0xa52>
 8009d92:	d1e1      	bne.n	8009d58 <_dtoa_r+0xa10>
 8009d94:	f018 0f01 	tst.w	r8, #1
 8009d98:	d0de      	beq.n	8009d58 <_dtoa_r+0xa10>
 8009d9a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009d9e:	d1d8      	bne.n	8009d52 <_dtoa_r+0xa0a>
 8009da0:	9a00      	ldr	r2, [sp, #0]
 8009da2:	2339      	movs	r3, #57	@ 0x39
 8009da4:	7013      	strb	r3, [r2, #0]
 8009da6:	4633      	mov	r3, r6
 8009da8:	461e      	mov	r6, r3
 8009daa:	3b01      	subs	r3, #1
 8009dac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009db0:	2a39      	cmp	r2, #57	@ 0x39
 8009db2:	d052      	beq.n	8009e5a <_dtoa_r+0xb12>
 8009db4:	3201      	adds	r2, #1
 8009db6:	701a      	strb	r2, [r3, #0]
 8009db8:	e612      	b.n	80099e0 <_dtoa_r+0x698>
 8009dba:	2a00      	cmp	r2, #0
 8009dbc:	dd07      	ble.n	8009dce <_dtoa_r+0xa86>
 8009dbe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009dc2:	d0ed      	beq.n	8009da0 <_dtoa_r+0xa58>
 8009dc4:	9a00      	ldr	r2, [sp, #0]
 8009dc6:	f108 0301 	add.w	r3, r8, #1
 8009dca:	7013      	strb	r3, [r2, #0]
 8009dcc:	e608      	b.n	80099e0 <_dtoa_r+0x698>
 8009dce:	9b07      	ldr	r3, [sp, #28]
 8009dd0:	9a07      	ldr	r2, [sp, #28]
 8009dd2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009dd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d028      	beq.n	8009e2e <_dtoa_r+0xae6>
 8009ddc:	4649      	mov	r1, r9
 8009dde:	2300      	movs	r3, #0
 8009de0:	220a      	movs	r2, #10
 8009de2:	4658      	mov	r0, fp
 8009de4:	f000 f9d6 	bl	800a194 <__multadd>
 8009de8:	42af      	cmp	r7, r5
 8009dea:	4681      	mov	r9, r0
 8009dec:	f04f 0300 	mov.w	r3, #0
 8009df0:	f04f 020a 	mov.w	r2, #10
 8009df4:	4639      	mov	r1, r7
 8009df6:	4658      	mov	r0, fp
 8009df8:	d107      	bne.n	8009e0a <_dtoa_r+0xac2>
 8009dfa:	f000 f9cb 	bl	800a194 <__multadd>
 8009dfe:	4607      	mov	r7, r0
 8009e00:	4605      	mov	r5, r0
 8009e02:	9b07      	ldr	r3, [sp, #28]
 8009e04:	3301      	adds	r3, #1
 8009e06:	9307      	str	r3, [sp, #28]
 8009e08:	e774      	b.n	8009cf4 <_dtoa_r+0x9ac>
 8009e0a:	f000 f9c3 	bl	800a194 <__multadd>
 8009e0e:	4629      	mov	r1, r5
 8009e10:	4607      	mov	r7, r0
 8009e12:	2300      	movs	r3, #0
 8009e14:	220a      	movs	r2, #10
 8009e16:	4658      	mov	r0, fp
 8009e18:	f000 f9bc 	bl	800a194 <__multadd>
 8009e1c:	4605      	mov	r5, r0
 8009e1e:	e7f0      	b.n	8009e02 <_dtoa_r+0xaba>
 8009e20:	9b00      	ldr	r3, [sp, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	bfcc      	ite	gt
 8009e26:	461e      	movgt	r6, r3
 8009e28:	2601      	movle	r6, #1
 8009e2a:	4456      	add	r6, sl
 8009e2c:	2700      	movs	r7, #0
 8009e2e:	4649      	mov	r1, r9
 8009e30:	2201      	movs	r2, #1
 8009e32:	4658      	mov	r0, fp
 8009e34:	f000 fb5a 	bl	800a4ec <__lshift>
 8009e38:	4621      	mov	r1, r4
 8009e3a:	4681      	mov	r9, r0
 8009e3c:	f000 fbc2 	bl	800a5c4 <__mcmp>
 8009e40:	2800      	cmp	r0, #0
 8009e42:	dcb0      	bgt.n	8009da6 <_dtoa_r+0xa5e>
 8009e44:	d102      	bne.n	8009e4c <_dtoa_r+0xb04>
 8009e46:	f018 0f01 	tst.w	r8, #1
 8009e4a:	d1ac      	bne.n	8009da6 <_dtoa_r+0xa5e>
 8009e4c:	4633      	mov	r3, r6
 8009e4e:	461e      	mov	r6, r3
 8009e50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e54:	2a30      	cmp	r2, #48	@ 0x30
 8009e56:	d0fa      	beq.n	8009e4e <_dtoa_r+0xb06>
 8009e58:	e5c2      	b.n	80099e0 <_dtoa_r+0x698>
 8009e5a:	459a      	cmp	sl, r3
 8009e5c:	d1a4      	bne.n	8009da8 <_dtoa_r+0xa60>
 8009e5e:	9b04      	ldr	r3, [sp, #16]
 8009e60:	3301      	adds	r3, #1
 8009e62:	9304      	str	r3, [sp, #16]
 8009e64:	2331      	movs	r3, #49	@ 0x31
 8009e66:	f88a 3000 	strb.w	r3, [sl]
 8009e6a:	e5b9      	b.n	80099e0 <_dtoa_r+0x698>
 8009e6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009e6e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009ecc <_dtoa_r+0xb84>
 8009e72:	b11b      	cbz	r3, 8009e7c <_dtoa_r+0xb34>
 8009e74:	f10a 0308 	add.w	r3, sl, #8
 8009e78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009e7a:	6013      	str	r3, [r2, #0]
 8009e7c:	4650      	mov	r0, sl
 8009e7e:	b019      	add	sp, #100	@ 0x64
 8009e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	f77f ae37 	ble.w	8009afa <_dtoa_r+0x7b2>
 8009e8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e90:	2001      	movs	r0, #1
 8009e92:	e655      	b.n	8009b40 <_dtoa_r+0x7f8>
 8009e94:	9b00      	ldr	r3, [sp, #0]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	f77f aed6 	ble.w	8009c48 <_dtoa_r+0x900>
 8009e9c:	4656      	mov	r6, sl
 8009e9e:	4621      	mov	r1, r4
 8009ea0:	4648      	mov	r0, r9
 8009ea2:	f7ff f9c8 	bl	8009236 <quorem>
 8009ea6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009eaa:	f806 8b01 	strb.w	r8, [r6], #1
 8009eae:	9b00      	ldr	r3, [sp, #0]
 8009eb0:	eba6 020a 	sub.w	r2, r6, sl
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	ddb3      	ble.n	8009e20 <_dtoa_r+0xad8>
 8009eb8:	4649      	mov	r1, r9
 8009eba:	2300      	movs	r3, #0
 8009ebc:	220a      	movs	r2, #10
 8009ebe:	4658      	mov	r0, fp
 8009ec0:	f000 f968 	bl	800a194 <__multadd>
 8009ec4:	4681      	mov	r9, r0
 8009ec6:	e7ea      	b.n	8009e9e <_dtoa_r+0xb56>
 8009ec8:	0800c1d8 	.word	0x0800c1d8
 8009ecc:	0800c15c 	.word	0x0800c15c

08009ed0 <_free_r>:
 8009ed0:	b538      	push	{r3, r4, r5, lr}
 8009ed2:	4605      	mov	r5, r0
 8009ed4:	2900      	cmp	r1, #0
 8009ed6:	d041      	beq.n	8009f5c <_free_r+0x8c>
 8009ed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009edc:	1f0c      	subs	r4, r1, #4
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	bfb8      	it	lt
 8009ee2:	18e4      	addlt	r4, r4, r3
 8009ee4:	f000 f8e8 	bl	800a0b8 <__malloc_lock>
 8009ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8009f60 <_free_r+0x90>)
 8009eea:	6813      	ldr	r3, [r2, #0]
 8009eec:	b933      	cbnz	r3, 8009efc <_free_r+0x2c>
 8009eee:	6063      	str	r3, [r4, #4]
 8009ef0:	6014      	str	r4, [r2, #0]
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ef8:	f000 b8e4 	b.w	800a0c4 <__malloc_unlock>
 8009efc:	42a3      	cmp	r3, r4
 8009efe:	d908      	bls.n	8009f12 <_free_r+0x42>
 8009f00:	6820      	ldr	r0, [r4, #0]
 8009f02:	1821      	adds	r1, r4, r0
 8009f04:	428b      	cmp	r3, r1
 8009f06:	bf01      	itttt	eq
 8009f08:	6819      	ldreq	r1, [r3, #0]
 8009f0a:	685b      	ldreq	r3, [r3, #4]
 8009f0c:	1809      	addeq	r1, r1, r0
 8009f0e:	6021      	streq	r1, [r4, #0]
 8009f10:	e7ed      	b.n	8009eee <_free_r+0x1e>
 8009f12:	461a      	mov	r2, r3
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	b10b      	cbz	r3, 8009f1c <_free_r+0x4c>
 8009f18:	42a3      	cmp	r3, r4
 8009f1a:	d9fa      	bls.n	8009f12 <_free_r+0x42>
 8009f1c:	6811      	ldr	r1, [r2, #0]
 8009f1e:	1850      	adds	r0, r2, r1
 8009f20:	42a0      	cmp	r0, r4
 8009f22:	d10b      	bne.n	8009f3c <_free_r+0x6c>
 8009f24:	6820      	ldr	r0, [r4, #0]
 8009f26:	4401      	add	r1, r0
 8009f28:	1850      	adds	r0, r2, r1
 8009f2a:	4283      	cmp	r3, r0
 8009f2c:	6011      	str	r1, [r2, #0]
 8009f2e:	d1e0      	bne.n	8009ef2 <_free_r+0x22>
 8009f30:	6818      	ldr	r0, [r3, #0]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	6053      	str	r3, [r2, #4]
 8009f36:	4408      	add	r0, r1
 8009f38:	6010      	str	r0, [r2, #0]
 8009f3a:	e7da      	b.n	8009ef2 <_free_r+0x22>
 8009f3c:	d902      	bls.n	8009f44 <_free_r+0x74>
 8009f3e:	230c      	movs	r3, #12
 8009f40:	602b      	str	r3, [r5, #0]
 8009f42:	e7d6      	b.n	8009ef2 <_free_r+0x22>
 8009f44:	6820      	ldr	r0, [r4, #0]
 8009f46:	1821      	adds	r1, r4, r0
 8009f48:	428b      	cmp	r3, r1
 8009f4a:	bf04      	itt	eq
 8009f4c:	6819      	ldreq	r1, [r3, #0]
 8009f4e:	685b      	ldreq	r3, [r3, #4]
 8009f50:	6063      	str	r3, [r4, #4]
 8009f52:	bf04      	itt	eq
 8009f54:	1809      	addeq	r1, r1, r0
 8009f56:	6021      	streq	r1, [r4, #0]
 8009f58:	6054      	str	r4, [r2, #4]
 8009f5a:	e7ca      	b.n	8009ef2 <_free_r+0x22>
 8009f5c:	bd38      	pop	{r3, r4, r5, pc}
 8009f5e:	bf00      	nop
 8009f60:	20004ef8 	.word	0x20004ef8

08009f64 <malloc>:
 8009f64:	4b02      	ldr	r3, [pc, #8]	@ (8009f70 <malloc+0xc>)
 8009f66:	4601      	mov	r1, r0
 8009f68:	6818      	ldr	r0, [r3, #0]
 8009f6a:	f000 b825 	b.w	8009fb8 <_malloc_r>
 8009f6e:	bf00      	nop
 8009f70:	20000024 	.word	0x20000024

08009f74 <sbrk_aligned>:
 8009f74:	b570      	push	{r4, r5, r6, lr}
 8009f76:	4e0f      	ldr	r6, [pc, #60]	@ (8009fb4 <sbrk_aligned+0x40>)
 8009f78:	460c      	mov	r4, r1
 8009f7a:	6831      	ldr	r1, [r6, #0]
 8009f7c:	4605      	mov	r5, r0
 8009f7e:	b911      	cbnz	r1, 8009f86 <sbrk_aligned+0x12>
 8009f80:	f000 fe46 	bl	800ac10 <_sbrk_r>
 8009f84:	6030      	str	r0, [r6, #0]
 8009f86:	4621      	mov	r1, r4
 8009f88:	4628      	mov	r0, r5
 8009f8a:	f000 fe41 	bl	800ac10 <_sbrk_r>
 8009f8e:	1c43      	adds	r3, r0, #1
 8009f90:	d103      	bne.n	8009f9a <sbrk_aligned+0x26>
 8009f92:	f04f 34ff 	mov.w	r4, #4294967295
 8009f96:	4620      	mov	r0, r4
 8009f98:	bd70      	pop	{r4, r5, r6, pc}
 8009f9a:	1cc4      	adds	r4, r0, #3
 8009f9c:	f024 0403 	bic.w	r4, r4, #3
 8009fa0:	42a0      	cmp	r0, r4
 8009fa2:	d0f8      	beq.n	8009f96 <sbrk_aligned+0x22>
 8009fa4:	1a21      	subs	r1, r4, r0
 8009fa6:	4628      	mov	r0, r5
 8009fa8:	f000 fe32 	bl	800ac10 <_sbrk_r>
 8009fac:	3001      	adds	r0, #1
 8009fae:	d1f2      	bne.n	8009f96 <sbrk_aligned+0x22>
 8009fb0:	e7ef      	b.n	8009f92 <sbrk_aligned+0x1e>
 8009fb2:	bf00      	nop
 8009fb4:	20004ef4 	.word	0x20004ef4

08009fb8 <_malloc_r>:
 8009fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fbc:	1ccd      	adds	r5, r1, #3
 8009fbe:	f025 0503 	bic.w	r5, r5, #3
 8009fc2:	3508      	adds	r5, #8
 8009fc4:	2d0c      	cmp	r5, #12
 8009fc6:	bf38      	it	cc
 8009fc8:	250c      	movcc	r5, #12
 8009fca:	2d00      	cmp	r5, #0
 8009fcc:	4606      	mov	r6, r0
 8009fce:	db01      	blt.n	8009fd4 <_malloc_r+0x1c>
 8009fd0:	42a9      	cmp	r1, r5
 8009fd2:	d904      	bls.n	8009fde <_malloc_r+0x26>
 8009fd4:	230c      	movs	r3, #12
 8009fd6:	6033      	str	r3, [r6, #0]
 8009fd8:	2000      	movs	r0, #0
 8009fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a0b4 <_malloc_r+0xfc>
 8009fe2:	f000 f869 	bl	800a0b8 <__malloc_lock>
 8009fe6:	f8d8 3000 	ldr.w	r3, [r8]
 8009fea:	461c      	mov	r4, r3
 8009fec:	bb44      	cbnz	r4, 800a040 <_malloc_r+0x88>
 8009fee:	4629      	mov	r1, r5
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	f7ff ffbf 	bl	8009f74 <sbrk_aligned>
 8009ff6:	1c43      	adds	r3, r0, #1
 8009ff8:	4604      	mov	r4, r0
 8009ffa:	d158      	bne.n	800a0ae <_malloc_r+0xf6>
 8009ffc:	f8d8 4000 	ldr.w	r4, [r8]
 800a000:	4627      	mov	r7, r4
 800a002:	2f00      	cmp	r7, #0
 800a004:	d143      	bne.n	800a08e <_malloc_r+0xd6>
 800a006:	2c00      	cmp	r4, #0
 800a008:	d04b      	beq.n	800a0a2 <_malloc_r+0xea>
 800a00a:	6823      	ldr	r3, [r4, #0]
 800a00c:	4639      	mov	r1, r7
 800a00e:	4630      	mov	r0, r6
 800a010:	eb04 0903 	add.w	r9, r4, r3
 800a014:	f000 fdfc 	bl	800ac10 <_sbrk_r>
 800a018:	4581      	cmp	r9, r0
 800a01a:	d142      	bne.n	800a0a2 <_malloc_r+0xea>
 800a01c:	6821      	ldr	r1, [r4, #0]
 800a01e:	1a6d      	subs	r5, r5, r1
 800a020:	4629      	mov	r1, r5
 800a022:	4630      	mov	r0, r6
 800a024:	f7ff ffa6 	bl	8009f74 <sbrk_aligned>
 800a028:	3001      	adds	r0, #1
 800a02a:	d03a      	beq.n	800a0a2 <_malloc_r+0xea>
 800a02c:	6823      	ldr	r3, [r4, #0]
 800a02e:	442b      	add	r3, r5
 800a030:	6023      	str	r3, [r4, #0]
 800a032:	f8d8 3000 	ldr.w	r3, [r8]
 800a036:	685a      	ldr	r2, [r3, #4]
 800a038:	bb62      	cbnz	r2, 800a094 <_malloc_r+0xdc>
 800a03a:	f8c8 7000 	str.w	r7, [r8]
 800a03e:	e00f      	b.n	800a060 <_malloc_r+0xa8>
 800a040:	6822      	ldr	r2, [r4, #0]
 800a042:	1b52      	subs	r2, r2, r5
 800a044:	d420      	bmi.n	800a088 <_malloc_r+0xd0>
 800a046:	2a0b      	cmp	r2, #11
 800a048:	d917      	bls.n	800a07a <_malloc_r+0xc2>
 800a04a:	1961      	adds	r1, r4, r5
 800a04c:	42a3      	cmp	r3, r4
 800a04e:	6025      	str	r5, [r4, #0]
 800a050:	bf18      	it	ne
 800a052:	6059      	strne	r1, [r3, #4]
 800a054:	6863      	ldr	r3, [r4, #4]
 800a056:	bf08      	it	eq
 800a058:	f8c8 1000 	streq.w	r1, [r8]
 800a05c:	5162      	str	r2, [r4, r5]
 800a05e:	604b      	str	r3, [r1, #4]
 800a060:	4630      	mov	r0, r6
 800a062:	f000 f82f 	bl	800a0c4 <__malloc_unlock>
 800a066:	f104 000b 	add.w	r0, r4, #11
 800a06a:	1d23      	adds	r3, r4, #4
 800a06c:	f020 0007 	bic.w	r0, r0, #7
 800a070:	1ac2      	subs	r2, r0, r3
 800a072:	bf1c      	itt	ne
 800a074:	1a1b      	subne	r3, r3, r0
 800a076:	50a3      	strne	r3, [r4, r2]
 800a078:	e7af      	b.n	8009fda <_malloc_r+0x22>
 800a07a:	6862      	ldr	r2, [r4, #4]
 800a07c:	42a3      	cmp	r3, r4
 800a07e:	bf0c      	ite	eq
 800a080:	f8c8 2000 	streq.w	r2, [r8]
 800a084:	605a      	strne	r2, [r3, #4]
 800a086:	e7eb      	b.n	800a060 <_malloc_r+0xa8>
 800a088:	4623      	mov	r3, r4
 800a08a:	6864      	ldr	r4, [r4, #4]
 800a08c:	e7ae      	b.n	8009fec <_malloc_r+0x34>
 800a08e:	463c      	mov	r4, r7
 800a090:	687f      	ldr	r7, [r7, #4]
 800a092:	e7b6      	b.n	800a002 <_malloc_r+0x4a>
 800a094:	461a      	mov	r2, r3
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	42a3      	cmp	r3, r4
 800a09a:	d1fb      	bne.n	800a094 <_malloc_r+0xdc>
 800a09c:	2300      	movs	r3, #0
 800a09e:	6053      	str	r3, [r2, #4]
 800a0a0:	e7de      	b.n	800a060 <_malloc_r+0xa8>
 800a0a2:	230c      	movs	r3, #12
 800a0a4:	6033      	str	r3, [r6, #0]
 800a0a6:	4630      	mov	r0, r6
 800a0a8:	f000 f80c 	bl	800a0c4 <__malloc_unlock>
 800a0ac:	e794      	b.n	8009fd8 <_malloc_r+0x20>
 800a0ae:	6005      	str	r5, [r0, #0]
 800a0b0:	e7d6      	b.n	800a060 <_malloc_r+0xa8>
 800a0b2:	bf00      	nop
 800a0b4:	20004ef8 	.word	0x20004ef8

0800a0b8 <__malloc_lock>:
 800a0b8:	4801      	ldr	r0, [pc, #4]	@ (800a0c0 <__malloc_lock+0x8>)
 800a0ba:	f7ff b8ac 	b.w	8009216 <__retarget_lock_acquire_recursive>
 800a0be:	bf00      	nop
 800a0c0:	20004ef0 	.word	0x20004ef0

0800a0c4 <__malloc_unlock>:
 800a0c4:	4801      	ldr	r0, [pc, #4]	@ (800a0cc <__malloc_unlock+0x8>)
 800a0c6:	f7ff b8a7 	b.w	8009218 <__retarget_lock_release_recursive>
 800a0ca:	bf00      	nop
 800a0cc:	20004ef0 	.word	0x20004ef0

0800a0d0 <_Balloc>:
 800a0d0:	b570      	push	{r4, r5, r6, lr}
 800a0d2:	69c6      	ldr	r6, [r0, #28]
 800a0d4:	4604      	mov	r4, r0
 800a0d6:	460d      	mov	r5, r1
 800a0d8:	b976      	cbnz	r6, 800a0f8 <_Balloc+0x28>
 800a0da:	2010      	movs	r0, #16
 800a0dc:	f7ff ff42 	bl	8009f64 <malloc>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	61e0      	str	r0, [r4, #28]
 800a0e4:	b920      	cbnz	r0, 800a0f0 <_Balloc+0x20>
 800a0e6:	4b18      	ldr	r3, [pc, #96]	@ (800a148 <_Balloc+0x78>)
 800a0e8:	4818      	ldr	r0, [pc, #96]	@ (800a14c <_Balloc+0x7c>)
 800a0ea:	216b      	movs	r1, #107	@ 0x6b
 800a0ec:	f000 fda0 	bl	800ac30 <__assert_func>
 800a0f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0f4:	6006      	str	r6, [r0, #0]
 800a0f6:	60c6      	str	r6, [r0, #12]
 800a0f8:	69e6      	ldr	r6, [r4, #28]
 800a0fa:	68f3      	ldr	r3, [r6, #12]
 800a0fc:	b183      	cbz	r3, 800a120 <_Balloc+0x50>
 800a0fe:	69e3      	ldr	r3, [r4, #28]
 800a100:	68db      	ldr	r3, [r3, #12]
 800a102:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a106:	b9b8      	cbnz	r0, 800a138 <_Balloc+0x68>
 800a108:	2101      	movs	r1, #1
 800a10a:	fa01 f605 	lsl.w	r6, r1, r5
 800a10e:	1d72      	adds	r2, r6, #5
 800a110:	0092      	lsls	r2, r2, #2
 800a112:	4620      	mov	r0, r4
 800a114:	f000 fdaa 	bl	800ac6c <_calloc_r>
 800a118:	b160      	cbz	r0, 800a134 <_Balloc+0x64>
 800a11a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a11e:	e00e      	b.n	800a13e <_Balloc+0x6e>
 800a120:	2221      	movs	r2, #33	@ 0x21
 800a122:	2104      	movs	r1, #4
 800a124:	4620      	mov	r0, r4
 800a126:	f000 fda1 	bl	800ac6c <_calloc_r>
 800a12a:	69e3      	ldr	r3, [r4, #28]
 800a12c:	60f0      	str	r0, [r6, #12]
 800a12e:	68db      	ldr	r3, [r3, #12]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d1e4      	bne.n	800a0fe <_Balloc+0x2e>
 800a134:	2000      	movs	r0, #0
 800a136:	bd70      	pop	{r4, r5, r6, pc}
 800a138:	6802      	ldr	r2, [r0, #0]
 800a13a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a13e:	2300      	movs	r3, #0
 800a140:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a144:	e7f7      	b.n	800a136 <_Balloc+0x66>
 800a146:	bf00      	nop
 800a148:	0800c169 	.word	0x0800c169
 800a14c:	0800c1e9 	.word	0x0800c1e9

0800a150 <_Bfree>:
 800a150:	b570      	push	{r4, r5, r6, lr}
 800a152:	69c6      	ldr	r6, [r0, #28]
 800a154:	4605      	mov	r5, r0
 800a156:	460c      	mov	r4, r1
 800a158:	b976      	cbnz	r6, 800a178 <_Bfree+0x28>
 800a15a:	2010      	movs	r0, #16
 800a15c:	f7ff ff02 	bl	8009f64 <malloc>
 800a160:	4602      	mov	r2, r0
 800a162:	61e8      	str	r0, [r5, #28]
 800a164:	b920      	cbnz	r0, 800a170 <_Bfree+0x20>
 800a166:	4b09      	ldr	r3, [pc, #36]	@ (800a18c <_Bfree+0x3c>)
 800a168:	4809      	ldr	r0, [pc, #36]	@ (800a190 <_Bfree+0x40>)
 800a16a:	218f      	movs	r1, #143	@ 0x8f
 800a16c:	f000 fd60 	bl	800ac30 <__assert_func>
 800a170:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a174:	6006      	str	r6, [r0, #0]
 800a176:	60c6      	str	r6, [r0, #12]
 800a178:	b13c      	cbz	r4, 800a18a <_Bfree+0x3a>
 800a17a:	69eb      	ldr	r3, [r5, #28]
 800a17c:	6862      	ldr	r2, [r4, #4]
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a184:	6021      	str	r1, [r4, #0]
 800a186:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a18a:	bd70      	pop	{r4, r5, r6, pc}
 800a18c:	0800c169 	.word	0x0800c169
 800a190:	0800c1e9 	.word	0x0800c1e9

0800a194 <__multadd>:
 800a194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a198:	690d      	ldr	r5, [r1, #16]
 800a19a:	4607      	mov	r7, r0
 800a19c:	460c      	mov	r4, r1
 800a19e:	461e      	mov	r6, r3
 800a1a0:	f101 0c14 	add.w	ip, r1, #20
 800a1a4:	2000      	movs	r0, #0
 800a1a6:	f8dc 3000 	ldr.w	r3, [ip]
 800a1aa:	b299      	uxth	r1, r3
 800a1ac:	fb02 6101 	mla	r1, r2, r1, r6
 800a1b0:	0c1e      	lsrs	r6, r3, #16
 800a1b2:	0c0b      	lsrs	r3, r1, #16
 800a1b4:	fb02 3306 	mla	r3, r2, r6, r3
 800a1b8:	b289      	uxth	r1, r1
 800a1ba:	3001      	adds	r0, #1
 800a1bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a1c0:	4285      	cmp	r5, r0
 800a1c2:	f84c 1b04 	str.w	r1, [ip], #4
 800a1c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a1ca:	dcec      	bgt.n	800a1a6 <__multadd+0x12>
 800a1cc:	b30e      	cbz	r6, 800a212 <__multadd+0x7e>
 800a1ce:	68a3      	ldr	r3, [r4, #8]
 800a1d0:	42ab      	cmp	r3, r5
 800a1d2:	dc19      	bgt.n	800a208 <__multadd+0x74>
 800a1d4:	6861      	ldr	r1, [r4, #4]
 800a1d6:	4638      	mov	r0, r7
 800a1d8:	3101      	adds	r1, #1
 800a1da:	f7ff ff79 	bl	800a0d0 <_Balloc>
 800a1de:	4680      	mov	r8, r0
 800a1e0:	b928      	cbnz	r0, 800a1ee <__multadd+0x5a>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	4b0c      	ldr	r3, [pc, #48]	@ (800a218 <__multadd+0x84>)
 800a1e6:	480d      	ldr	r0, [pc, #52]	@ (800a21c <__multadd+0x88>)
 800a1e8:	21ba      	movs	r1, #186	@ 0xba
 800a1ea:	f000 fd21 	bl	800ac30 <__assert_func>
 800a1ee:	6922      	ldr	r2, [r4, #16]
 800a1f0:	3202      	adds	r2, #2
 800a1f2:	f104 010c 	add.w	r1, r4, #12
 800a1f6:	0092      	lsls	r2, r2, #2
 800a1f8:	300c      	adds	r0, #12
 800a1fa:	f7ff f80e 	bl	800921a <memcpy>
 800a1fe:	4621      	mov	r1, r4
 800a200:	4638      	mov	r0, r7
 800a202:	f7ff ffa5 	bl	800a150 <_Bfree>
 800a206:	4644      	mov	r4, r8
 800a208:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a20c:	3501      	adds	r5, #1
 800a20e:	615e      	str	r6, [r3, #20]
 800a210:	6125      	str	r5, [r4, #16]
 800a212:	4620      	mov	r0, r4
 800a214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a218:	0800c1d8 	.word	0x0800c1d8
 800a21c:	0800c1e9 	.word	0x0800c1e9

0800a220 <__hi0bits>:
 800a220:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a224:	4603      	mov	r3, r0
 800a226:	bf36      	itet	cc
 800a228:	0403      	lslcc	r3, r0, #16
 800a22a:	2000      	movcs	r0, #0
 800a22c:	2010      	movcc	r0, #16
 800a22e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a232:	bf3c      	itt	cc
 800a234:	021b      	lslcc	r3, r3, #8
 800a236:	3008      	addcc	r0, #8
 800a238:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a23c:	bf3c      	itt	cc
 800a23e:	011b      	lslcc	r3, r3, #4
 800a240:	3004      	addcc	r0, #4
 800a242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a246:	bf3c      	itt	cc
 800a248:	009b      	lslcc	r3, r3, #2
 800a24a:	3002      	addcc	r0, #2
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	db05      	blt.n	800a25c <__hi0bits+0x3c>
 800a250:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a254:	f100 0001 	add.w	r0, r0, #1
 800a258:	bf08      	it	eq
 800a25a:	2020      	moveq	r0, #32
 800a25c:	4770      	bx	lr

0800a25e <__lo0bits>:
 800a25e:	6803      	ldr	r3, [r0, #0]
 800a260:	4602      	mov	r2, r0
 800a262:	f013 0007 	ands.w	r0, r3, #7
 800a266:	d00b      	beq.n	800a280 <__lo0bits+0x22>
 800a268:	07d9      	lsls	r1, r3, #31
 800a26a:	d421      	bmi.n	800a2b0 <__lo0bits+0x52>
 800a26c:	0798      	lsls	r0, r3, #30
 800a26e:	bf49      	itett	mi
 800a270:	085b      	lsrmi	r3, r3, #1
 800a272:	089b      	lsrpl	r3, r3, #2
 800a274:	2001      	movmi	r0, #1
 800a276:	6013      	strmi	r3, [r2, #0]
 800a278:	bf5c      	itt	pl
 800a27a:	6013      	strpl	r3, [r2, #0]
 800a27c:	2002      	movpl	r0, #2
 800a27e:	4770      	bx	lr
 800a280:	b299      	uxth	r1, r3
 800a282:	b909      	cbnz	r1, 800a288 <__lo0bits+0x2a>
 800a284:	0c1b      	lsrs	r3, r3, #16
 800a286:	2010      	movs	r0, #16
 800a288:	b2d9      	uxtb	r1, r3
 800a28a:	b909      	cbnz	r1, 800a290 <__lo0bits+0x32>
 800a28c:	3008      	adds	r0, #8
 800a28e:	0a1b      	lsrs	r3, r3, #8
 800a290:	0719      	lsls	r1, r3, #28
 800a292:	bf04      	itt	eq
 800a294:	091b      	lsreq	r3, r3, #4
 800a296:	3004      	addeq	r0, #4
 800a298:	0799      	lsls	r1, r3, #30
 800a29a:	bf04      	itt	eq
 800a29c:	089b      	lsreq	r3, r3, #2
 800a29e:	3002      	addeq	r0, #2
 800a2a0:	07d9      	lsls	r1, r3, #31
 800a2a2:	d403      	bmi.n	800a2ac <__lo0bits+0x4e>
 800a2a4:	085b      	lsrs	r3, r3, #1
 800a2a6:	f100 0001 	add.w	r0, r0, #1
 800a2aa:	d003      	beq.n	800a2b4 <__lo0bits+0x56>
 800a2ac:	6013      	str	r3, [r2, #0]
 800a2ae:	4770      	bx	lr
 800a2b0:	2000      	movs	r0, #0
 800a2b2:	4770      	bx	lr
 800a2b4:	2020      	movs	r0, #32
 800a2b6:	4770      	bx	lr

0800a2b8 <__i2b>:
 800a2b8:	b510      	push	{r4, lr}
 800a2ba:	460c      	mov	r4, r1
 800a2bc:	2101      	movs	r1, #1
 800a2be:	f7ff ff07 	bl	800a0d0 <_Balloc>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	b928      	cbnz	r0, 800a2d2 <__i2b+0x1a>
 800a2c6:	4b05      	ldr	r3, [pc, #20]	@ (800a2dc <__i2b+0x24>)
 800a2c8:	4805      	ldr	r0, [pc, #20]	@ (800a2e0 <__i2b+0x28>)
 800a2ca:	f240 1145 	movw	r1, #325	@ 0x145
 800a2ce:	f000 fcaf 	bl	800ac30 <__assert_func>
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	6144      	str	r4, [r0, #20]
 800a2d6:	6103      	str	r3, [r0, #16]
 800a2d8:	bd10      	pop	{r4, pc}
 800a2da:	bf00      	nop
 800a2dc:	0800c1d8 	.word	0x0800c1d8
 800a2e0:	0800c1e9 	.word	0x0800c1e9

0800a2e4 <__multiply>:
 800a2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2e8:	4614      	mov	r4, r2
 800a2ea:	690a      	ldr	r2, [r1, #16]
 800a2ec:	6923      	ldr	r3, [r4, #16]
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	bfa8      	it	ge
 800a2f2:	4623      	movge	r3, r4
 800a2f4:	460f      	mov	r7, r1
 800a2f6:	bfa4      	itt	ge
 800a2f8:	460c      	movge	r4, r1
 800a2fa:	461f      	movge	r7, r3
 800a2fc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a300:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a304:	68a3      	ldr	r3, [r4, #8]
 800a306:	6861      	ldr	r1, [r4, #4]
 800a308:	eb0a 0609 	add.w	r6, sl, r9
 800a30c:	42b3      	cmp	r3, r6
 800a30e:	b085      	sub	sp, #20
 800a310:	bfb8      	it	lt
 800a312:	3101      	addlt	r1, #1
 800a314:	f7ff fedc 	bl	800a0d0 <_Balloc>
 800a318:	b930      	cbnz	r0, 800a328 <__multiply+0x44>
 800a31a:	4602      	mov	r2, r0
 800a31c:	4b44      	ldr	r3, [pc, #272]	@ (800a430 <__multiply+0x14c>)
 800a31e:	4845      	ldr	r0, [pc, #276]	@ (800a434 <__multiply+0x150>)
 800a320:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a324:	f000 fc84 	bl	800ac30 <__assert_func>
 800a328:	f100 0514 	add.w	r5, r0, #20
 800a32c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a330:	462b      	mov	r3, r5
 800a332:	2200      	movs	r2, #0
 800a334:	4543      	cmp	r3, r8
 800a336:	d321      	bcc.n	800a37c <__multiply+0x98>
 800a338:	f107 0114 	add.w	r1, r7, #20
 800a33c:	f104 0214 	add.w	r2, r4, #20
 800a340:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a344:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a348:	9302      	str	r3, [sp, #8]
 800a34a:	1b13      	subs	r3, r2, r4
 800a34c:	3b15      	subs	r3, #21
 800a34e:	f023 0303 	bic.w	r3, r3, #3
 800a352:	3304      	adds	r3, #4
 800a354:	f104 0715 	add.w	r7, r4, #21
 800a358:	42ba      	cmp	r2, r7
 800a35a:	bf38      	it	cc
 800a35c:	2304      	movcc	r3, #4
 800a35e:	9301      	str	r3, [sp, #4]
 800a360:	9b02      	ldr	r3, [sp, #8]
 800a362:	9103      	str	r1, [sp, #12]
 800a364:	428b      	cmp	r3, r1
 800a366:	d80c      	bhi.n	800a382 <__multiply+0x9e>
 800a368:	2e00      	cmp	r6, #0
 800a36a:	dd03      	ble.n	800a374 <__multiply+0x90>
 800a36c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a370:	2b00      	cmp	r3, #0
 800a372:	d05b      	beq.n	800a42c <__multiply+0x148>
 800a374:	6106      	str	r6, [r0, #16]
 800a376:	b005      	add	sp, #20
 800a378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a37c:	f843 2b04 	str.w	r2, [r3], #4
 800a380:	e7d8      	b.n	800a334 <__multiply+0x50>
 800a382:	f8b1 a000 	ldrh.w	sl, [r1]
 800a386:	f1ba 0f00 	cmp.w	sl, #0
 800a38a:	d024      	beq.n	800a3d6 <__multiply+0xf2>
 800a38c:	f104 0e14 	add.w	lr, r4, #20
 800a390:	46a9      	mov	r9, r5
 800a392:	f04f 0c00 	mov.w	ip, #0
 800a396:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a39a:	f8d9 3000 	ldr.w	r3, [r9]
 800a39e:	fa1f fb87 	uxth.w	fp, r7
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	fb0a 330b 	mla	r3, sl, fp, r3
 800a3a8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a3ac:	f8d9 7000 	ldr.w	r7, [r9]
 800a3b0:	4463      	add	r3, ip
 800a3b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a3b6:	fb0a c70b 	mla	r7, sl, fp, ip
 800a3ba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a3c4:	4572      	cmp	r2, lr
 800a3c6:	f849 3b04 	str.w	r3, [r9], #4
 800a3ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a3ce:	d8e2      	bhi.n	800a396 <__multiply+0xb2>
 800a3d0:	9b01      	ldr	r3, [sp, #4]
 800a3d2:	f845 c003 	str.w	ip, [r5, r3]
 800a3d6:	9b03      	ldr	r3, [sp, #12]
 800a3d8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a3dc:	3104      	adds	r1, #4
 800a3de:	f1b9 0f00 	cmp.w	r9, #0
 800a3e2:	d021      	beq.n	800a428 <__multiply+0x144>
 800a3e4:	682b      	ldr	r3, [r5, #0]
 800a3e6:	f104 0c14 	add.w	ip, r4, #20
 800a3ea:	46ae      	mov	lr, r5
 800a3ec:	f04f 0a00 	mov.w	sl, #0
 800a3f0:	f8bc b000 	ldrh.w	fp, [ip]
 800a3f4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a3f8:	fb09 770b 	mla	r7, r9, fp, r7
 800a3fc:	4457      	add	r7, sl
 800a3fe:	b29b      	uxth	r3, r3
 800a400:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a404:	f84e 3b04 	str.w	r3, [lr], #4
 800a408:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a40c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a410:	f8be 3000 	ldrh.w	r3, [lr]
 800a414:	fb09 330a 	mla	r3, r9, sl, r3
 800a418:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a41c:	4562      	cmp	r2, ip
 800a41e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a422:	d8e5      	bhi.n	800a3f0 <__multiply+0x10c>
 800a424:	9f01      	ldr	r7, [sp, #4]
 800a426:	51eb      	str	r3, [r5, r7]
 800a428:	3504      	adds	r5, #4
 800a42a:	e799      	b.n	800a360 <__multiply+0x7c>
 800a42c:	3e01      	subs	r6, #1
 800a42e:	e79b      	b.n	800a368 <__multiply+0x84>
 800a430:	0800c1d8 	.word	0x0800c1d8
 800a434:	0800c1e9 	.word	0x0800c1e9

0800a438 <__pow5mult>:
 800a438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a43c:	4615      	mov	r5, r2
 800a43e:	f012 0203 	ands.w	r2, r2, #3
 800a442:	4607      	mov	r7, r0
 800a444:	460e      	mov	r6, r1
 800a446:	d007      	beq.n	800a458 <__pow5mult+0x20>
 800a448:	4c25      	ldr	r4, [pc, #148]	@ (800a4e0 <__pow5mult+0xa8>)
 800a44a:	3a01      	subs	r2, #1
 800a44c:	2300      	movs	r3, #0
 800a44e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a452:	f7ff fe9f 	bl	800a194 <__multadd>
 800a456:	4606      	mov	r6, r0
 800a458:	10ad      	asrs	r5, r5, #2
 800a45a:	d03d      	beq.n	800a4d8 <__pow5mult+0xa0>
 800a45c:	69fc      	ldr	r4, [r7, #28]
 800a45e:	b97c      	cbnz	r4, 800a480 <__pow5mult+0x48>
 800a460:	2010      	movs	r0, #16
 800a462:	f7ff fd7f 	bl	8009f64 <malloc>
 800a466:	4602      	mov	r2, r0
 800a468:	61f8      	str	r0, [r7, #28]
 800a46a:	b928      	cbnz	r0, 800a478 <__pow5mult+0x40>
 800a46c:	4b1d      	ldr	r3, [pc, #116]	@ (800a4e4 <__pow5mult+0xac>)
 800a46e:	481e      	ldr	r0, [pc, #120]	@ (800a4e8 <__pow5mult+0xb0>)
 800a470:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a474:	f000 fbdc 	bl	800ac30 <__assert_func>
 800a478:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a47c:	6004      	str	r4, [r0, #0]
 800a47e:	60c4      	str	r4, [r0, #12]
 800a480:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a484:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a488:	b94c      	cbnz	r4, 800a49e <__pow5mult+0x66>
 800a48a:	f240 2171 	movw	r1, #625	@ 0x271
 800a48e:	4638      	mov	r0, r7
 800a490:	f7ff ff12 	bl	800a2b8 <__i2b>
 800a494:	2300      	movs	r3, #0
 800a496:	f8c8 0008 	str.w	r0, [r8, #8]
 800a49a:	4604      	mov	r4, r0
 800a49c:	6003      	str	r3, [r0, #0]
 800a49e:	f04f 0900 	mov.w	r9, #0
 800a4a2:	07eb      	lsls	r3, r5, #31
 800a4a4:	d50a      	bpl.n	800a4bc <__pow5mult+0x84>
 800a4a6:	4631      	mov	r1, r6
 800a4a8:	4622      	mov	r2, r4
 800a4aa:	4638      	mov	r0, r7
 800a4ac:	f7ff ff1a 	bl	800a2e4 <__multiply>
 800a4b0:	4631      	mov	r1, r6
 800a4b2:	4680      	mov	r8, r0
 800a4b4:	4638      	mov	r0, r7
 800a4b6:	f7ff fe4b 	bl	800a150 <_Bfree>
 800a4ba:	4646      	mov	r6, r8
 800a4bc:	106d      	asrs	r5, r5, #1
 800a4be:	d00b      	beq.n	800a4d8 <__pow5mult+0xa0>
 800a4c0:	6820      	ldr	r0, [r4, #0]
 800a4c2:	b938      	cbnz	r0, 800a4d4 <__pow5mult+0x9c>
 800a4c4:	4622      	mov	r2, r4
 800a4c6:	4621      	mov	r1, r4
 800a4c8:	4638      	mov	r0, r7
 800a4ca:	f7ff ff0b 	bl	800a2e4 <__multiply>
 800a4ce:	6020      	str	r0, [r4, #0]
 800a4d0:	f8c0 9000 	str.w	r9, [r0]
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	e7e4      	b.n	800a4a2 <__pow5mult+0x6a>
 800a4d8:	4630      	mov	r0, r6
 800a4da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4de:	bf00      	nop
 800a4e0:	0800c244 	.word	0x0800c244
 800a4e4:	0800c169 	.word	0x0800c169
 800a4e8:	0800c1e9 	.word	0x0800c1e9

0800a4ec <__lshift>:
 800a4ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4f0:	460c      	mov	r4, r1
 800a4f2:	6849      	ldr	r1, [r1, #4]
 800a4f4:	6923      	ldr	r3, [r4, #16]
 800a4f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a4fa:	68a3      	ldr	r3, [r4, #8]
 800a4fc:	4607      	mov	r7, r0
 800a4fe:	4691      	mov	r9, r2
 800a500:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a504:	f108 0601 	add.w	r6, r8, #1
 800a508:	42b3      	cmp	r3, r6
 800a50a:	db0b      	blt.n	800a524 <__lshift+0x38>
 800a50c:	4638      	mov	r0, r7
 800a50e:	f7ff fddf 	bl	800a0d0 <_Balloc>
 800a512:	4605      	mov	r5, r0
 800a514:	b948      	cbnz	r0, 800a52a <__lshift+0x3e>
 800a516:	4602      	mov	r2, r0
 800a518:	4b28      	ldr	r3, [pc, #160]	@ (800a5bc <__lshift+0xd0>)
 800a51a:	4829      	ldr	r0, [pc, #164]	@ (800a5c0 <__lshift+0xd4>)
 800a51c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a520:	f000 fb86 	bl	800ac30 <__assert_func>
 800a524:	3101      	adds	r1, #1
 800a526:	005b      	lsls	r3, r3, #1
 800a528:	e7ee      	b.n	800a508 <__lshift+0x1c>
 800a52a:	2300      	movs	r3, #0
 800a52c:	f100 0114 	add.w	r1, r0, #20
 800a530:	f100 0210 	add.w	r2, r0, #16
 800a534:	4618      	mov	r0, r3
 800a536:	4553      	cmp	r3, sl
 800a538:	db33      	blt.n	800a5a2 <__lshift+0xb6>
 800a53a:	6920      	ldr	r0, [r4, #16]
 800a53c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a540:	f104 0314 	add.w	r3, r4, #20
 800a544:	f019 091f 	ands.w	r9, r9, #31
 800a548:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a54c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a550:	d02b      	beq.n	800a5aa <__lshift+0xbe>
 800a552:	f1c9 0e20 	rsb	lr, r9, #32
 800a556:	468a      	mov	sl, r1
 800a558:	2200      	movs	r2, #0
 800a55a:	6818      	ldr	r0, [r3, #0]
 800a55c:	fa00 f009 	lsl.w	r0, r0, r9
 800a560:	4310      	orrs	r0, r2
 800a562:	f84a 0b04 	str.w	r0, [sl], #4
 800a566:	f853 2b04 	ldr.w	r2, [r3], #4
 800a56a:	459c      	cmp	ip, r3
 800a56c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a570:	d8f3      	bhi.n	800a55a <__lshift+0x6e>
 800a572:	ebac 0304 	sub.w	r3, ip, r4
 800a576:	3b15      	subs	r3, #21
 800a578:	f023 0303 	bic.w	r3, r3, #3
 800a57c:	3304      	adds	r3, #4
 800a57e:	f104 0015 	add.w	r0, r4, #21
 800a582:	4584      	cmp	ip, r0
 800a584:	bf38      	it	cc
 800a586:	2304      	movcc	r3, #4
 800a588:	50ca      	str	r2, [r1, r3]
 800a58a:	b10a      	cbz	r2, 800a590 <__lshift+0xa4>
 800a58c:	f108 0602 	add.w	r6, r8, #2
 800a590:	3e01      	subs	r6, #1
 800a592:	4638      	mov	r0, r7
 800a594:	612e      	str	r6, [r5, #16]
 800a596:	4621      	mov	r1, r4
 800a598:	f7ff fdda 	bl	800a150 <_Bfree>
 800a59c:	4628      	mov	r0, r5
 800a59e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	e7c5      	b.n	800a536 <__lshift+0x4a>
 800a5aa:	3904      	subs	r1, #4
 800a5ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a5b4:	459c      	cmp	ip, r3
 800a5b6:	d8f9      	bhi.n	800a5ac <__lshift+0xc0>
 800a5b8:	e7ea      	b.n	800a590 <__lshift+0xa4>
 800a5ba:	bf00      	nop
 800a5bc:	0800c1d8 	.word	0x0800c1d8
 800a5c0:	0800c1e9 	.word	0x0800c1e9

0800a5c4 <__mcmp>:
 800a5c4:	690a      	ldr	r2, [r1, #16]
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	6900      	ldr	r0, [r0, #16]
 800a5ca:	1a80      	subs	r0, r0, r2
 800a5cc:	b530      	push	{r4, r5, lr}
 800a5ce:	d10e      	bne.n	800a5ee <__mcmp+0x2a>
 800a5d0:	3314      	adds	r3, #20
 800a5d2:	3114      	adds	r1, #20
 800a5d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a5d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a5dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a5e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a5e4:	4295      	cmp	r5, r2
 800a5e6:	d003      	beq.n	800a5f0 <__mcmp+0x2c>
 800a5e8:	d205      	bcs.n	800a5f6 <__mcmp+0x32>
 800a5ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ee:	bd30      	pop	{r4, r5, pc}
 800a5f0:	42a3      	cmp	r3, r4
 800a5f2:	d3f3      	bcc.n	800a5dc <__mcmp+0x18>
 800a5f4:	e7fb      	b.n	800a5ee <__mcmp+0x2a>
 800a5f6:	2001      	movs	r0, #1
 800a5f8:	e7f9      	b.n	800a5ee <__mcmp+0x2a>
	...

0800a5fc <__mdiff>:
 800a5fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a600:	4689      	mov	r9, r1
 800a602:	4606      	mov	r6, r0
 800a604:	4611      	mov	r1, r2
 800a606:	4648      	mov	r0, r9
 800a608:	4614      	mov	r4, r2
 800a60a:	f7ff ffdb 	bl	800a5c4 <__mcmp>
 800a60e:	1e05      	subs	r5, r0, #0
 800a610:	d112      	bne.n	800a638 <__mdiff+0x3c>
 800a612:	4629      	mov	r1, r5
 800a614:	4630      	mov	r0, r6
 800a616:	f7ff fd5b 	bl	800a0d0 <_Balloc>
 800a61a:	4602      	mov	r2, r0
 800a61c:	b928      	cbnz	r0, 800a62a <__mdiff+0x2e>
 800a61e:	4b3f      	ldr	r3, [pc, #252]	@ (800a71c <__mdiff+0x120>)
 800a620:	f240 2137 	movw	r1, #567	@ 0x237
 800a624:	483e      	ldr	r0, [pc, #248]	@ (800a720 <__mdiff+0x124>)
 800a626:	f000 fb03 	bl	800ac30 <__assert_func>
 800a62a:	2301      	movs	r3, #1
 800a62c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a630:	4610      	mov	r0, r2
 800a632:	b003      	add	sp, #12
 800a634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a638:	bfbc      	itt	lt
 800a63a:	464b      	movlt	r3, r9
 800a63c:	46a1      	movlt	r9, r4
 800a63e:	4630      	mov	r0, r6
 800a640:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a644:	bfba      	itte	lt
 800a646:	461c      	movlt	r4, r3
 800a648:	2501      	movlt	r5, #1
 800a64a:	2500      	movge	r5, #0
 800a64c:	f7ff fd40 	bl	800a0d0 <_Balloc>
 800a650:	4602      	mov	r2, r0
 800a652:	b918      	cbnz	r0, 800a65c <__mdiff+0x60>
 800a654:	4b31      	ldr	r3, [pc, #196]	@ (800a71c <__mdiff+0x120>)
 800a656:	f240 2145 	movw	r1, #581	@ 0x245
 800a65a:	e7e3      	b.n	800a624 <__mdiff+0x28>
 800a65c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a660:	6926      	ldr	r6, [r4, #16]
 800a662:	60c5      	str	r5, [r0, #12]
 800a664:	f109 0310 	add.w	r3, r9, #16
 800a668:	f109 0514 	add.w	r5, r9, #20
 800a66c:	f104 0e14 	add.w	lr, r4, #20
 800a670:	f100 0b14 	add.w	fp, r0, #20
 800a674:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a678:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a67c:	9301      	str	r3, [sp, #4]
 800a67e:	46d9      	mov	r9, fp
 800a680:	f04f 0c00 	mov.w	ip, #0
 800a684:	9b01      	ldr	r3, [sp, #4]
 800a686:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a68a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a68e:	9301      	str	r3, [sp, #4]
 800a690:	fa1f f38a 	uxth.w	r3, sl
 800a694:	4619      	mov	r1, r3
 800a696:	b283      	uxth	r3, r0
 800a698:	1acb      	subs	r3, r1, r3
 800a69a:	0c00      	lsrs	r0, r0, #16
 800a69c:	4463      	add	r3, ip
 800a69e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a6a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a6ac:	4576      	cmp	r6, lr
 800a6ae:	f849 3b04 	str.w	r3, [r9], #4
 800a6b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a6b6:	d8e5      	bhi.n	800a684 <__mdiff+0x88>
 800a6b8:	1b33      	subs	r3, r6, r4
 800a6ba:	3b15      	subs	r3, #21
 800a6bc:	f023 0303 	bic.w	r3, r3, #3
 800a6c0:	3415      	adds	r4, #21
 800a6c2:	3304      	adds	r3, #4
 800a6c4:	42a6      	cmp	r6, r4
 800a6c6:	bf38      	it	cc
 800a6c8:	2304      	movcc	r3, #4
 800a6ca:	441d      	add	r5, r3
 800a6cc:	445b      	add	r3, fp
 800a6ce:	461e      	mov	r6, r3
 800a6d0:	462c      	mov	r4, r5
 800a6d2:	4544      	cmp	r4, r8
 800a6d4:	d30e      	bcc.n	800a6f4 <__mdiff+0xf8>
 800a6d6:	f108 0103 	add.w	r1, r8, #3
 800a6da:	1b49      	subs	r1, r1, r5
 800a6dc:	f021 0103 	bic.w	r1, r1, #3
 800a6e0:	3d03      	subs	r5, #3
 800a6e2:	45a8      	cmp	r8, r5
 800a6e4:	bf38      	it	cc
 800a6e6:	2100      	movcc	r1, #0
 800a6e8:	440b      	add	r3, r1
 800a6ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a6ee:	b191      	cbz	r1, 800a716 <__mdiff+0x11a>
 800a6f0:	6117      	str	r7, [r2, #16]
 800a6f2:	e79d      	b.n	800a630 <__mdiff+0x34>
 800a6f4:	f854 1b04 	ldr.w	r1, [r4], #4
 800a6f8:	46e6      	mov	lr, ip
 800a6fa:	0c08      	lsrs	r0, r1, #16
 800a6fc:	fa1c fc81 	uxtah	ip, ip, r1
 800a700:	4471      	add	r1, lr
 800a702:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a706:	b289      	uxth	r1, r1
 800a708:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a70c:	f846 1b04 	str.w	r1, [r6], #4
 800a710:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a714:	e7dd      	b.n	800a6d2 <__mdiff+0xd6>
 800a716:	3f01      	subs	r7, #1
 800a718:	e7e7      	b.n	800a6ea <__mdiff+0xee>
 800a71a:	bf00      	nop
 800a71c:	0800c1d8 	.word	0x0800c1d8
 800a720:	0800c1e9 	.word	0x0800c1e9

0800a724 <__d2b>:
 800a724:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a728:	460f      	mov	r7, r1
 800a72a:	2101      	movs	r1, #1
 800a72c:	ec59 8b10 	vmov	r8, r9, d0
 800a730:	4616      	mov	r6, r2
 800a732:	f7ff fccd 	bl	800a0d0 <_Balloc>
 800a736:	4604      	mov	r4, r0
 800a738:	b930      	cbnz	r0, 800a748 <__d2b+0x24>
 800a73a:	4602      	mov	r2, r0
 800a73c:	4b23      	ldr	r3, [pc, #140]	@ (800a7cc <__d2b+0xa8>)
 800a73e:	4824      	ldr	r0, [pc, #144]	@ (800a7d0 <__d2b+0xac>)
 800a740:	f240 310f 	movw	r1, #783	@ 0x30f
 800a744:	f000 fa74 	bl	800ac30 <__assert_func>
 800a748:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a74c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a750:	b10d      	cbz	r5, 800a756 <__d2b+0x32>
 800a752:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a756:	9301      	str	r3, [sp, #4]
 800a758:	f1b8 0300 	subs.w	r3, r8, #0
 800a75c:	d023      	beq.n	800a7a6 <__d2b+0x82>
 800a75e:	4668      	mov	r0, sp
 800a760:	9300      	str	r3, [sp, #0]
 800a762:	f7ff fd7c 	bl	800a25e <__lo0bits>
 800a766:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a76a:	b1d0      	cbz	r0, 800a7a2 <__d2b+0x7e>
 800a76c:	f1c0 0320 	rsb	r3, r0, #32
 800a770:	fa02 f303 	lsl.w	r3, r2, r3
 800a774:	430b      	orrs	r3, r1
 800a776:	40c2      	lsrs	r2, r0
 800a778:	6163      	str	r3, [r4, #20]
 800a77a:	9201      	str	r2, [sp, #4]
 800a77c:	9b01      	ldr	r3, [sp, #4]
 800a77e:	61a3      	str	r3, [r4, #24]
 800a780:	2b00      	cmp	r3, #0
 800a782:	bf0c      	ite	eq
 800a784:	2201      	moveq	r2, #1
 800a786:	2202      	movne	r2, #2
 800a788:	6122      	str	r2, [r4, #16]
 800a78a:	b1a5      	cbz	r5, 800a7b6 <__d2b+0x92>
 800a78c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a790:	4405      	add	r5, r0
 800a792:	603d      	str	r5, [r7, #0]
 800a794:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a798:	6030      	str	r0, [r6, #0]
 800a79a:	4620      	mov	r0, r4
 800a79c:	b003      	add	sp, #12
 800a79e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7a2:	6161      	str	r1, [r4, #20]
 800a7a4:	e7ea      	b.n	800a77c <__d2b+0x58>
 800a7a6:	a801      	add	r0, sp, #4
 800a7a8:	f7ff fd59 	bl	800a25e <__lo0bits>
 800a7ac:	9b01      	ldr	r3, [sp, #4]
 800a7ae:	6163      	str	r3, [r4, #20]
 800a7b0:	3020      	adds	r0, #32
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	e7e8      	b.n	800a788 <__d2b+0x64>
 800a7b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a7ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a7be:	6038      	str	r0, [r7, #0]
 800a7c0:	6918      	ldr	r0, [r3, #16]
 800a7c2:	f7ff fd2d 	bl	800a220 <__hi0bits>
 800a7c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a7ca:	e7e5      	b.n	800a798 <__d2b+0x74>
 800a7cc:	0800c1d8 	.word	0x0800c1d8
 800a7d0:	0800c1e9 	.word	0x0800c1e9

0800a7d4 <__ssputs_r>:
 800a7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7d8:	688e      	ldr	r6, [r1, #8]
 800a7da:	461f      	mov	r7, r3
 800a7dc:	42be      	cmp	r6, r7
 800a7de:	680b      	ldr	r3, [r1, #0]
 800a7e0:	4682      	mov	sl, r0
 800a7e2:	460c      	mov	r4, r1
 800a7e4:	4690      	mov	r8, r2
 800a7e6:	d82d      	bhi.n	800a844 <__ssputs_r+0x70>
 800a7e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a7ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a7f0:	d026      	beq.n	800a840 <__ssputs_r+0x6c>
 800a7f2:	6965      	ldr	r5, [r4, #20]
 800a7f4:	6909      	ldr	r1, [r1, #16]
 800a7f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7fa:	eba3 0901 	sub.w	r9, r3, r1
 800a7fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a802:	1c7b      	adds	r3, r7, #1
 800a804:	444b      	add	r3, r9
 800a806:	106d      	asrs	r5, r5, #1
 800a808:	429d      	cmp	r5, r3
 800a80a:	bf38      	it	cc
 800a80c:	461d      	movcc	r5, r3
 800a80e:	0553      	lsls	r3, r2, #21
 800a810:	d527      	bpl.n	800a862 <__ssputs_r+0x8e>
 800a812:	4629      	mov	r1, r5
 800a814:	f7ff fbd0 	bl	8009fb8 <_malloc_r>
 800a818:	4606      	mov	r6, r0
 800a81a:	b360      	cbz	r0, 800a876 <__ssputs_r+0xa2>
 800a81c:	6921      	ldr	r1, [r4, #16]
 800a81e:	464a      	mov	r2, r9
 800a820:	f7fe fcfb 	bl	800921a <memcpy>
 800a824:	89a3      	ldrh	r3, [r4, #12]
 800a826:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a82a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a82e:	81a3      	strh	r3, [r4, #12]
 800a830:	6126      	str	r6, [r4, #16]
 800a832:	6165      	str	r5, [r4, #20]
 800a834:	444e      	add	r6, r9
 800a836:	eba5 0509 	sub.w	r5, r5, r9
 800a83a:	6026      	str	r6, [r4, #0]
 800a83c:	60a5      	str	r5, [r4, #8]
 800a83e:	463e      	mov	r6, r7
 800a840:	42be      	cmp	r6, r7
 800a842:	d900      	bls.n	800a846 <__ssputs_r+0x72>
 800a844:	463e      	mov	r6, r7
 800a846:	6820      	ldr	r0, [r4, #0]
 800a848:	4632      	mov	r2, r6
 800a84a:	4641      	mov	r1, r8
 800a84c:	f000 f9c6 	bl	800abdc <memmove>
 800a850:	68a3      	ldr	r3, [r4, #8]
 800a852:	1b9b      	subs	r3, r3, r6
 800a854:	60a3      	str	r3, [r4, #8]
 800a856:	6823      	ldr	r3, [r4, #0]
 800a858:	4433      	add	r3, r6
 800a85a:	6023      	str	r3, [r4, #0]
 800a85c:	2000      	movs	r0, #0
 800a85e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a862:	462a      	mov	r2, r5
 800a864:	f000 fa28 	bl	800acb8 <_realloc_r>
 800a868:	4606      	mov	r6, r0
 800a86a:	2800      	cmp	r0, #0
 800a86c:	d1e0      	bne.n	800a830 <__ssputs_r+0x5c>
 800a86e:	6921      	ldr	r1, [r4, #16]
 800a870:	4650      	mov	r0, sl
 800a872:	f7ff fb2d 	bl	8009ed0 <_free_r>
 800a876:	230c      	movs	r3, #12
 800a878:	f8ca 3000 	str.w	r3, [sl]
 800a87c:	89a3      	ldrh	r3, [r4, #12]
 800a87e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a882:	81a3      	strh	r3, [r4, #12]
 800a884:	f04f 30ff 	mov.w	r0, #4294967295
 800a888:	e7e9      	b.n	800a85e <__ssputs_r+0x8a>
	...

0800a88c <_svfiprintf_r>:
 800a88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a890:	4698      	mov	r8, r3
 800a892:	898b      	ldrh	r3, [r1, #12]
 800a894:	061b      	lsls	r3, r3, #24
 800a896:	b09d      	sub	sp, #116	@ 0x74
 800a898:	4607      	mov	r7, r0
 800a89a:	460d      	mov	r5, r1
 800a89c:	4614      	mov	r4, r2
 800a89e:	d510      	bpl.n	800a8c2 <_svfiprintf_r+0x36>
 800a8a0:	690b      	ldr	r3, [r1, #16]
 800a8a2:	b973      	cbnz	r3, 800a8c2 <_svfiprintf_r+0x36>
 800a8a4:	2140      	movs	r1, #64	@ 0x40
 800a8a6:	f7ff fb87 	bl	8009fb8 <_malloc_r>
 800a8aa:	6028      	str	r0, [r5, #0]
 800a8ac:	6128      	str	r0, [r5, #16]
 800a8ae:	b930      	cbnz	r0, 800a8be <_svfiprintf_r+0x32>
 800a8b0:	230c      	movs	r3, #12
 800a8b2:	603b      	str	r3, [r7, #0]
 800a8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b8:	b01d      	add	sp, #116	@ 0x74
 800a8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8be:	2340      	movs	r3, #64	@ 0x40
 800a8c0:	616b      	str	r3, [r5, #20]
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8c6:	2320      	movs	r3, #32
 800a8c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a8cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8d0:	2330      	movs	r3, #48	@ 0x30
 800a8d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aa70 <_svfiprintf_r+0x1e4>
 800a8d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a8da:	f04f 0901 	mov.w	r9, #1
 800a8de:	4623      	mov	r3, r4
 800a8e0:	469a      	mov	sl, r3
 800a8e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8e6:	b10a      	cbz	r2, 800a8ec <_svfiprintf_r+0x60>
 800a8e8:	2a25      	cmp	r2, #37	@ 0x25
 800a8ea:	d1f9      	bne.n	800a8e0 <_svfiprintf_r+0x54>
 800a8ec:	ebba 0b04 	subs.w	fp, sl, r4
 800a8f0:	d00b      	beq.n	800a90a <_svfiprintf_r+0x7e>
 800a8f2:	465b      	mov	r3, fp
 800a8f4:	4622      	mov	r2, r4
 800a8f6:	4629      	mov	r1, r5
 800a8f8:	4638      	mov	r0, r7
 800a8fa:	f7ff ff6b 	bl	800a7d4 <__ssputs_r>
 800a8fe:	3001      	adds	r0, #1
 800a900:	f000 80a7 	beq.w	800aa52 <_svfiprintf_r+0x1c6>
 800a904:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a906:	445a      	add	r2, fp
 800a908:	9209      	str	r2, [sp, #36]	@ 0x24
 800a90a:	f89a 3000 	ldrb.w	r3, [sl]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f000 809f 	beq.w	800aa52 <_svfiprintf_r+0x1c6>
 800a914:	2300      	movs	r3, #0
 800a916:	f04f 32ff 	mov.w	r2, #4294967295
 800a91a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a91e:	f10a 0a01 	add.w	sl, sl, #1
 800a922:	9304      	str	r3, [sp, #16]
 800a924:	9307      	str	r3, [sp, #28]
 800a926:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a92a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a92c:	4654      	mov	r4, sl
 800a92e:	2205      	movs	r2, #5
 800a930:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a934:	484e      	ldr	r0, [pc, #312]	@ (800aa70 <_svfiprintf_r+0x1e4>)
 800a936:	f7f5 fc53 	bl	80001e0 <memchr>
 800a93a:	9a04      	ldr	r2, [sp, #16]
 800a93c:	b9d8      	cbnz	r0, 800a976 <_svfiprintf_r+0xea>
 800a93e:	06d0      	lsls	r0, r2, #27
 800a940:	bf44      	itt	mi
 800a942:	2320      	movmi	r3, #32
 800a944:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a948:	0711      	lsls	r1, r2, #28
 800a94a:	bf44      	itt	mi
 800a94c:	232b      	movmi	r3, #43	@ 0x2b
 800a94e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a952:	f89a 3000 	ldrb.w	r3, [sl]
 800a956:	2b2a      	cmp	r3, #42	@ 0x2a
 800a958:	d015      	beq.n	800a986 <_svfiprintf_r+0xfa>
 800a95a:	9a07      	ldr	r2, [sp, #28]
 800a95c:	4654      	mov	r4, sl
 800a95e:	2000      	movs	r0, #0
 800a960:	f04f 0c0a 	mov.w	ip, #10
 800a964:	4621      	mov	r1, r4
 800a966:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a96a:	3b30      	subs	r3, #48	@ 0x30
 800a96c:	2b09      	cmp	r3, #9
 800a96e:	d94b      	bls.n	800aa08 <_svfiprintf_r+0x17c>
 800a970:	b1b0      	cbz	r0, 800a9a0 <_svfiprintf_r+0x114>
 800a972:	9207      	str	r2, [sp, #28]
 800a974:	e014      	b.n	800a9a0 <_svfiprintf_r+0x114>
 800a976:	eba0 0308 	sub.w	r3, r0, r8
 800a97a:	fa09 f303 	lsl.w	r3, r9, r3
 800a97e:	4313      	orrs	r3, r2
 800a980:	9304      	str	r3, [sp, #16]
 800a982:	46a2      	mov	sl, r4
 800a984:	e7d2      	b.n	800a92c <_svfiprintf_r+0xa0>
 800a986:	9b03      	ldr	r3, [sp, #12]
 800a988:	1d19      	adds	r1, r3, #4
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	9103      	str	r1, [sp, #12]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	bfbb      	ittet	lt
 800a992:	425b      	neglt	r3, r3
 800a994:	f042 0202 	orrlt.w	r2, r2, #2
 800a998:	9307      	strge	r3, [sp, #28]
 800a99a:	9307      	strlt	r3, [sp, #28]
 800a99c:	bfb8      	it	lt
 800a99e:	9204      	strlt	r2, [sp, #16]
 800a9a0:	7823      	ldrb	r3, [r4, #0]
 800a9a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a9a4:	d10a      	bne.n	800a9bc <_svfiprintf_r+0x130>
 800a9a6:	7863      	ldrb	r3, [r4, #1]
 800a9a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9aa:	d132      	bne.n	800aa12 <_svfiprintf_r+0x186>
 800a9ac:	9b03      	ldr	r3, [sp, #12]
 800a9ae:	1d1a      	adds	r2, r3, #4
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	9203      	str	r2, [sp, #12]
 800a9b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a9b8:	3402      	adds	r4, #2
 800a9ba:	9305      	str	r3, [sp, #20]
 800a9bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aa80 <_svfiprintf_r+0x1f4>
 800a9c0:	7821      	ldrb	r1, [r4, #0]
 800a9c2:	2203      	movs	r2, #3
 800a9c4:	4650      	mov	r0, sl
 800a9c6:	f7f5 fc0b 	bl	80001e0 <memchr>
 800a9ca:	b138      	cbz	r0, 800a9dc <_svfiprintf_r+0x150>
 800a9cc:	9b04      	ldr	r3, [sp, #16]
 800a9ce:	eba0 000a 	sub.w	r0, r0, sl
 800a9d2:	2240      	movs	r2, #64	@ 0x40
 800a9d4:	4082      	lsls	r2, r0
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	3401      	adds	r4, #1
 800a9da:	9304      	str	r3, [sp, #16]
 800a9dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9e0:	4824      	ldr	r0, [pc, #144]	@ (800aa74 <_svfiprintf_r+0x1e8>)
 800a9e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a9e6:	2206      	movs	r2, #6
 800a9e8:	f7f5 fbfa 	bl	80001e0 <memchr>
 800a9ec:	2800      	cmp	r0, #0
 800a9ee:	d036      	beq.n	800aa5e <_svfiprintf_r+0x1d2>
 800a9f0:	4b21      	ldr	r3, [pc, #132]	@ (800aa78 <_svfiprintf_r+0x1ec>)
 800a9f2:	bb1b      	cbnz	r3, 800aa3c <_svfiprintf_r+0x1b0>
 800a9f4:	9b03      	ldr	r3, [sp, #12]
 800a9f6:	3307      	adds	r3, #7
 800a9f8:	f023 0307 	bic.w	r3, r3, #7
 800a9fc:	3308      	adds	r3, #8
 800a9fe:	9303      	str	r3, [sp, #12]
 800aa00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa02:	4433      	add	r3, r6
 800aa04:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa06:	e76a      	b.n	800a8de <_svfiprintf_r+0x52>
 800aa08:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa0c:	460c      	mov	r4, r1
 800aa0e:	2001      	movs	r0, #1
 800aa10:	e7a8      	b.n	800a964 <_svfiprintf_r+0xd8>
 800aa12:	2300      	movs	r3, #0
 800aa14:	3401      	adds	r4, #1
 800aa16:	9305      	str	r3, [sp, #20]
 800aa18:	4619      	mov	r1, r3
 800aa1a:	f04f 0c0a 	mov.w	ip, #10
 800aa1e:	4620      	mov	r0, r4
 800aa20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa24:	3a30      	subs	r2, #48	@ 0x30
 800aa26:	2a09      	cmp	r2, #9
 800aa28:	d903      	bls.n	800aa32 <_svfiprintf_r+0x1a6>
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d0c6      	beq.n	800a9bc <_svfiprintf_r+0x130>
 800aa2e:	9105      	str	r1, [sp, #20]
 800aa30:	e7c4      	b.n	800a9bc <_svfiprintf_r+0x130>
 800aa32:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa36:	4604      	mov	r4, r0
 800aa38:	2301      	movs	r3, #1
 800aa3a:	e7f0      	b.n	800aa1e <_svfiprintf_r+0x192>
 800aa3c:	ab03      	add	r3, sp, #12
 800aa3e:	9300      	str	r3, [sp, #0]
 800aa40:	462a      	mov	r2, r5
 800aa42:	4b0e      	ldr	r3, [pc, #56]	@ (800aa7c <_svfiprintf_r+0x1f0>)
 800aa44:	a904      	add	r1, sp, #16
 800aa46:	4638      	mov	r0, r7
 800aa48:	f7fd fe76 	bl	8008738 <_printf_float>
 800aa4c:	1c42      	adds	r2, r0, #1
 800aa4e:	4606      	mov	r6, r0
 800aa50:	d1d6      	bne.n	800aa00 <_svfiprintf_r+0x174>
 800aa52:	89ab      	ldrh	r3, [r5, #12]
 800aa54:	065b      	lsls	r3, r3, #25
 800aa56:	f53f af2d 	bmi.w	800a8b4 <_svfiprintf_r+0x28>
 800aa5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa5c:	e72c      	b.n	800a8b8 <_svfiprintf_r+0x2c>
 800aa5e:	ab03      	add	r3, sp, #12
 800aa60:	9300      	str	r3, [sp, #0]
 800aa62:	462a      	mov	r2, r5
 800aa64:	4b05      	ldr	r3, [pc, #20]	@ (800aa7c <_svfiprintf_r+0x1f0>)
 800aa66:	a904      	add	r1, sp, #16
 800aa68:	4638      	mov	r0, r7
 800aa6a:	f7fe f8fd 	bl	8008c68 <_printf_i>
 800aa6e:	e7ed      	b.n	800aa4c <_svfiprintf_r+0x1c0>
 800aa70:	0800c340 	.word	0x0800c340
 800aa74:	0800c34a 	.word	0x0800c34a
 800aa78:	08008739 	.word	0x08008739
 800aa7c:	0800a7d5 	.word	0x0800a7d5
 800aa80:	0800c346 	.word	0x0800c346

0800aa84 <__sflush_r>:
 800aa84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa8c:	0716      	lsls	r6, r2, #28
 800aa8e:	4605      	mov	r5, r0
 800aa90:	460c      	mov	r4, r1
 800aa92:	d454      	bmi.n	800ab3e <__sflush_r+0xba>
 800aa94:	684b      	ldr	r3, [r1, #4]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	dc02      	bgt.n	800aaa0 <__sflush_r+0x1c>
 800aa9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	dd48      	ble.n	800ab32 <__sflush_r+0xae>
 800aaa0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aaa2:	2e00      	cmp	r6, #0
 800aaa4:	d045      	beq.n	800ab32 <__sflush_r+0xae>
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aaac:	682f      	ldr	r7, [r5, #0]
 800aaae:	6a21      	ldr	r1, [r4, #32]
 800aab0:	602b      	str	r3, [r5, #0]
 800aab2:	d030      	beq.n	800ab16 <__sflush_r+0x92>
 800aab4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aab6:	89a3      	ldrh	r3, [r4, #12]
 800aab8:	0759      	lsls	r1, r3, #29
 800aaba:	d505      	bpl.n	800aac8 <__sflush_r+0x44>
 800aabc:	6863      	ldr	r3, [r4, #4]
 800aabe:	1ad2      	subs	r2, r2, r3
 800aac0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aac2:	b10b      	cbz	r3, 800aac8 <__sflush_r+0x44>
 800aac4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aac6:	1ad2      	subs	r2, r2, r3
 800aac8:	2300      	movs	r3, #0
 800aaca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aacc:	6a21      	ldr	r1, [r4, #32]
 800aace:	4628      	mov	r0, r5
 800aad0:	47b0      	blx	r6
 800aad2:	1c43      	adds	r3, r0, #1
 800aad4:	89a3      	ldrh	r3, [r4, #12]
 800aad6:	d106      	bne.n	800aae6 <__sflush_r+0x62>
 800aad8:	6829      	ldr	r1, [r5, #0]
 800aada:	291d      	cmp	r1, #29
 800aadc:	d82b      	bhi.n	800ab36 <__sflush_r+0xb2>
 800aade:	4a2a      	ldr	r2, [pc, #168]	@ (800ab88 <__sflush_r+0x104>)
 800aae0:	410a      	asrs	r2, r1
 800aae2:	07d6      	lsls	r6, r2, #31
 800aae4:	d427      	bmi.n	800ab36 <__sflush_r+0xb2>
 800aae6:	2200      	movs	r2, #0
 800aae8:	6062      	str	r2, [r4, #4]
 800aaea:	04d9      	lsls	r1, r3, #19
 800aaec:	6922      	ldr	r2, [r4, #16]
 800aaee:	6022      	str	r2, [r4, #0]
 800aaf0:	d504      	bpl.n	800aafc <__sflush_r+0x78>
 800aaf2:	1c42      	adds	r2, r0, #1
 800aaf4:	d101      	bne.n	800aafa <__sflush_r+0x76>
 800aaf6:	682b      	ldr	r3, [r5, #0]
 800aaf8:	b903      	cbnz	r3, 800aafc <__sflush_r+0x78>
 800aafa:	6560      	str	r0, [r4, #84]	@ 0x54
 800aafc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aafe:	602f      	str	r7, [r5, #0]
 800ab00:	b1b9      	cbz	r1, 800ab32 <__sflush_r+0xae>
 800ab02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab06:	4299      	cmp	r1, r3
 800ab08:	d002      	beq.n	800ab10 <__sflush_r+0x8c>
 800ab0a:	4628      	mov	r0, r5
 800ab0c:	f7ff f9e0 	bl	8009ed0 <_free_r>
 800ab10:	2300      	movs	r3, #0
 800ab12:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab14:	e00d      	b.n	800ab32 <__sflush_r+0xae>
 800ab16:	2301      	movs	r3, #1
 800ab18:	4628      	mov	r0, r5
 800ab1a:	47b0      	blx	r6
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	1c50      	adds	r0, r2, #1
 800ab20:	d1c9      	bne.n	800aab6 <__sflush_r+0x32>
 800ab22:	682b      	ldr	r3, [r5, #0]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d0c6      	beq.n	800aab6 <__sflush_r+0x32>
 800ab28:	2b1d      	cmp	r3, #29
 800ab2a:	d001      	beq.n	800ab30 <__sflush_r+0xac>
 800ab2c:	2b16      	cmp	r3, #22
 800ab2e:	d11e      	bne.n	800ab6e <__sflush_r+0xea>
 800ab30:	602f      	str	r7, [r5, #0]
 800ab32:	2000      	movs	r0, #0
 800ab34:	e022      	b.n	800ab7c <__sflush_r+0xf8>
 800ab36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab3a:	b21b      	sxth	r3, r3
 800ab3c:	e01b      	b.n	800ab76 <__sflush_r+0xf2>
 800ab3e:	690f      	ldr	r7, [r1, #16]
 800ab40:	2f00      	cmp	r7, #0
 800ab42:	d0f6      	beq.n	800ab32 <__sflush_r+0xae>
 800ab44:	0793      	lsls	r3, r2, #30
 800ab46:	680e      	ldr	r6, [r1, #0]
 800ab48:	bf08      	it	eq
 800ab4a:	694b      	ldreq	r3, [r1, #20]
 800ab4c:	600f      	str	r7, [r1, #0]
 800ab4e:	bf18      	it	ne
 800ab50:	2300      	movne	r3, #0
 800ab52:	eba6 0807 	sub.w	r8, r6, r7
 800ab56:	608b      	str	r3, [r1, #8]
 800ab58:	f1b8 0f00 	cmp.w	r8, #0
 800ab5c:	dde9      	ble.n	800ab32 <__sflush_r+0xae>
 800ab5e:	6a21      	ldr	r1, [r4, #32]
 800ab60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ab62:	4643      	mov	r3, r8
 800ab64:	463a      	mov	r2, r7
 800ab66:	4628      	mov	r0, r5
 800ab68:	47b0      	blx	r6
 800ab6a:	2800      	cmp	r0, #0
 800ab6c:	dc08      	bgt.n	800ab80 <__sflush_r+0xfc>
 800ab6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab76:	81a3      	strh	r3, [r4, #12]
 800ab78:	f04f 30ff 	mov.w	r0, #4294967295
 800ab7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab80:	4407      	add	r7, r0
 800ab82:	eba8 0800 	sub.w	r8, r8, r0
 800ab86:	e7e7      	b.n	800ab58 <__sflush_r+0xd4>
 800ab88:	dfbffffe 	.word	0xdfbffffe

0800ab8c <_fflush_r>:
 800ab8c:	b538      	push	{r3, r4, r5, lr}
 800ab8e:	690b      	ldr	r3, [r1, #16]
 800ab90:	4605      	mov	r5, r0
 800ab92:	460c      	mov	r4, r1
 800ab94:	b913      	cbnz	r3, 800ab9c <_fflush_r+0x10>
 800ab96:	2500      	movs	r5, #0
 800ab98:	4628      	mov	r0, r5
 800ab9a:	bd38      	pop	{r3, r4, r5, pc}
 800ab9c:	b118      	cbz	r0, 800aba6 <_fflush_r+0x1a>
 800ab9e:	6a03      	ldr	r3, [r0, #32]
 800aba0:	b90b      	cbnz	r3, 800aba6 <_fflush_r+0x1a>
 800aba2:	f7fe fa0d 	bl	8008fc0 <__sinit>
 800aba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d0f3      	beq.n	800ab96 <_fflush_r+0xa>
 800abae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800abb0:	07d0      	lsls	r0, r2, #31
 800abb2:	d404      	bmi.n	800abbe <_fflush_r+0x32>
 800abb4:	0599      	lsls	r1, r3, #22
 800abb6:	d402      	bmi.n	800abbe <_fflush_r+0x32>
 800abb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800abba:	f7fe fb2c 	bl	8009216 <__retarget_lock_acquire_recursive>
 800abbe:	4628      	mov	r0, r5
 800abc0:	4621      	mov	r1, r4
 800abc2:	f7ff ff5f 	bl	800aa84 <__sflush_r>
 800abc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800abc8:	07da      	lsls	r2, r3, #31
 800abca:	4605      	mov	r5, r0
 800abcc:	d4e4      	bmi.n	800ab98 <_fflush_r+0xc>
 800abce:	89a3      	ldrh	r3, [r4, #12]
 800abd0:	059b      	lsls	r3, r3, #22
 800abd2:	d4e1      	bmi.n	800ab98 <_fflush_r+0xc>
 800abd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800abd6:	f7fe fb1f 	bl	8009218 <__retarget_lock_release_recursive>
 800abda:	e7dd      	b.n	800ab98 <_fflush_r+0xc>

0800abdc <memmove>:
 800abdc:	4288      	cmp	r0, r1
 800abde:	b510      	push	{r4, lr}
 800abe0:	eb01 0402 	add.w	r4, r1, r2
 800abe4:	d902      	bls.n	800abec <memmove+0x10>
 800abe6:	4284      	cmp	r4, r0
 800abe8:	4623      	mov	r3, r4
 800abea:	d807      	bhi.n	800abfc <memmove+0x20>
 800abec:	1e43      	subs	r3, r0, #1
 800abee:	42a1      	cmp	r1, r4
 800abf0:	d008      	beq.n	800ac04 <memmove+0x28>
 800abf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800abfa:	e7f8      	b.n	800abee <memmove+0x12>
 800abfc:	4402      	add	r2, r0
 800abfe:	4601      	mov	r1, r0
 800ac00:	428a      	cmp	r2, r1
 800ac02:	d100      	bne.n	800ac06 <memmove+0x2a>
 800ac04:	bd10      	pop	{r4, pc}
 800ac06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac0e:	e7f7      	b.n	800ac00 <memmove+0x24>

0800ac10 <_sbrk_r>:
 800ac10:	b538      	push	{r3, r4, r5, lr}
 800ac12:	4d06      	ldr	r5, [pc, #24]	@ (800ac2c <_sbrk_r+0x1c>)
 800ac14:	2300      	movs	r3, #0
 800ac16:	4604      	mov	r4, r0
 800ac18:	4608      	mov	r0, r1
 800ac1a:	602b      	str	r3, [r5, #0]
 800ac1c:	f7f7 fcae 	bl	800257c <_sbrk>
 800ac20:	1c43      	adds	r3, r0, #1
 800ac22:	d102      	bne.n	800ac2a <_sbrk_r+0x1a>
 800ac24:	682b      	ldr	r3, [r5, #0]
 800ac26:	b103      	cbz	r3, 800ac2a <_sbrk_r+0x1a>
 800ac28:	6023      	str	r3, [r4, #0]
 800ac2a:	bd38      	pop	{r3, r4, r5, pc}
 800ac2c:	20004eec 	.word	0x20004eec

0800ac30 <__assert_func>:
 800ac30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac32:	4614      	mov	r4, r2
 800ac34:	461a      	mov	r2, r3
 800ac36:	4b09      	ldr	r3, [pc, #36]	@ (800ac5c <__assert_func+0x2c>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4605      	mov	r5, r0
 800ac3c:	68d8      	ldr	r0, [r3, #12]
 800ac3e:	b954      	cbnz	r4, 800ac56 <__assert_func+0x26>
 800ac40:	4b07      	ldr	r3, [pc, #28]	@ (800ac60 <__assert_func+0x30>)
 800ac42:	461c      	mov	r4, r3
 800ac44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac48:	9100      	str	r1, [sp, #0]
 800ac4a:	462b      	mov	r3, r5
 800ac4c:	4905      	ldr	r1, [pc, #20]	@ (800ac64 <__assert_func+0x34>)
 800ac4e:	f000 f86f 	bl	800ad30 <fiprintf>
 800ac52:	f000 f87f 	bl	800ad54 <abort>
 800ac56:	4b04      	ldr	r3, [pc, #16]	@ (800ac68 <__assert_func+0x38>)
 800ac58:	e7f4      	b.n	800ac44 <__assert_func+0x14>
 800ac5a:	bf00      	nop
 800ac5c:	20000024 	.word	0x20000024
 800ac60:	0800c396 	.word	0x0800c396
 800ac64:	0800c368 	.word	0x0800c368
 800ac68:	0800c35b 	.word	0x0800c35b

0800ac6c <_calloc_r>:
 800ac6c:	b570      	push	{r4, r5, r6, lr}
 800ac6e:	fba1 5402 	umull	r5, r4, r1, r2
 800ac72:	b93c      	cbnz	r4, 800ac84 <_calloc_r+0x18>
 800ac74:	4629      	mov	r1, r5
 800ac76:	f7ff f99f 	bl	8009fb8 <_malloc_r>
 800ac7a:	4606      	mov	r6, r0
 800ac7c:	b928      	cbnz	r0, 800ac8a <_calloc_r+0x1e>
 800ac7e:	2600      	movs	r6, #0
 800ac80:	4630      	mov	r0, r6
 800ac82:	bd70      	pop	{r4, r5, r6, pc}
 800ac84:	220c      	movs	r2, #12
 800ac86:	6002      	str	r2, [r0, #0]
 800ac88:	e7f9      	b.n	800ac7e <_calloc_r+0x12>
 800ac8a:	462a      	mov	r2, r5
 800ac8c:	4621      	mov	r1, r4
 800ac8e:	f7fe fa44 	bl	800911a <memset>
 800ac92:	e7f5      	b.n	800ac80 <_calloc_r+0x14>

0800ac94 <__ascii_mbtowc>:
 800ac94:	b082      	sub	sp, #8
 800ac96:	b901      	cbnz	r1, 800ac9a <__ascii_mbtowc+0x6>
 800ac98:	a901      	add	r1, sp, #4
 800ac9a:	b142      	cbz	r2, 800acae <__ascii_mbtowc+0x1a>
 800ac9c:	b14b      	cbz	r3, 800acb2 <__ascii_mbtowc+0x1e>
 800ac9e:	7813      	ldrb	r3, [r2, #0]
 800aca0:	600b      	str	r3, [r1, #0]
 800aca2:	7812      	ldrb	r2, [r2, #0]
 800aca4:	1e10      	subs	r0, r2, #0
 800aca6:	bf18      	it	ne
 800aca8:	2001      	movne	r0, #1
 800acaa:	b002      	add	sp, #8
 800acac:	4770      	bx	lr
 800acae:	4610      	mov	r0, r2
 800acb0:	e7fb      	b.n	800acaa <__ascii_mbtowc+0x16>
 800acb2:	f06f 0001 	mvn.w	r0, #1
 800acb6:	e7f8      	b.n	800acaa <__ascii_mbtowc+0x16>

0800acb8 <_realloc_r>:
 800acb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acbc:	4680      	mov	r8, r0
 800acbe:	4615      	mov	r5, r2
 800acc0:	460c      	mov	r4, r1
 800acc2:	b921      	cbnz	r1, 800acce <_realloc_r+0x16>
 800acc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acc8:	4611      	mov	r1, r2
 800acca:	f7ff b975 	b.w	8009fb8 <_malloc_r>
 800acce:	b92a      	cbnz	r2, 800acdc <_realloc_r+0x24>
 800acd0:	f7ff f8fe 	bl	8009ed0 <_free_r>
 800acd4:	2400      	movs	r4, #0
 800acd6:	4620      	mov	r0, r4
 800acd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acdc:	f000 f841 	bl	800ad62 <_malloc_usable_size_r>
 800ace0:	4285      	cmp	r5, r0
 800ace2:	4606      	mov	r6, r0
 800ace4:	d802      	bhi.n	800acec <_realloc_r+0x34>
 800ace6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800acea:	d8f4      	bhi.n	800acd6 <_realloc_r+0x1e>
 800acec:	4629      	mov	r1, r5
 800acee:	4640      	mov	r0, r8
 800acf0:	f7ff f962 	bl	8009fb8 <_malloc_r>
 800acf4:	4607      	mov	r7, r0
 800acf6:	2800      	cmp	r0, #0
 800acf8:	d0ec      	beq.n	800acd4 <_realloc_r+0x1c>
 800acfa:	42b5      	cmp	r5, r6
 800acfc:	462a      	mov	r2, r5
 800acfe:	4621      	mov	r1, r4
 800ad00:	bf28      	it	cs
 800ad02:	4632      	movcs	r2, r6
 800ad04:	f7fe fa89 	bl	800921a <memcpy>
 800ad08:	4621      	mov	r1, r4
 800ad0a:	4640      	mov	r0, r8
 800ad0c:	f7ff f8e0 	bl	8009ed0 <_free_r>
 800ad10:	463c      	mov	r4, r7
 800ad12:	e7e0      	b.n	800acd6 <_realloc_r+0x1e>

0800ad14 <__ascii_wctomb>:
 800ad14:	4603      	mov	r3, r0
 800ad16:	4608      	mov	r0, r1
 800ad18:	b141      	cbz	r1, 800ad2c <__ascii_wctomb+0x18>
 800ad1a:	2aff      	cmp	r2, #255	@ 0xff
 800ad1c:	d904      	bls.n	800ad28 <__ascii_wctomb+0x14>
 800ad1e:	228a      	movs	r2, #138	@ 0x8a
 800ad20:	601a      	str	r2, [r3, #0]
 800ad22:	f04f 30ff 	mov.w	r0, #4294967295
 800ad26:	4770      	bx	lr
 800ad28:	700a      	strb	r2, [r1, #0]
 800ad2a:	2001      	movs	r0, #1
 800ad2c:	4770      	bx	lr
	...

0800ad30 <fiprintf>:
 800ad30:	b40e      	push	{r1, r2, r3}
 800ad32:	b503      	push	{r0, r1, lr}
 800ad34:	4601      	mov	r1, r0
 800ad36:	ab03      	add	r3, sp, #12
 800ad38:	4805      	ldr	r0, [pc, #20]	@ (800ad50 <fiprintf+0x20>)
 800ad3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad3e:	6800      	ldr	r0, [r0, #0]
 800ad40:	9301      	str	r3, [sp, #4]
 800ad42:	f000 f83f 	bl	800adc4 <_vfiprintf_r>
 800ad46:	b002      	add	sp, #8
 800ad48:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad4c:	b003      	add	sp, #12
 800ad4e:	4770      	bx	lr
 800ad50:	20000024 	.word	0x20000024

0800ad54 <abort>:
 800ad54:	b508      	push	{r3, lr}
 800ad56:	2006      	movs	r0, #6
 800ad58:	f000 fa08 	bl	800b16c <raise>
 800ad5c:	2001      	movs	r0, #1
 800ad5e:	f7f7 fbb1 	bl	80024c4 <_exit>

0800ad62 <_malloc_usable_size_r>:
 800ad62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad66:	1f18      	subs	r0, r3, #4
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	bfbc      	itt	lt
 800ad6c:	580b      	ldrlt	r3, [r1, r0]
 800ad6e:	18c0      	addlt	r0, r0, r3
 800ad70:	4770      	bx	lr

0800ad72 <__sfputc_r>:
 800ad72:	6893      	ldr	r3, [r2, #8]
 800ad74:	3b01      	subs	r3, #1
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	b410      	push	{r4}
 800ad7a:	6093      	str	r3, [r2, #8]
 800ad7c:	da08      	bge.n	800ad90 <__sfputc_r+0x1e>
 800ad7e:	6994      	ldr	r4, [r2, #24]
 800ad80:	42a3      	cmp	r3, r4
 800ad82:	db01      	blt.n	800ad88 <__sfputc_r+0x16>
 800ad84:	290a      	cmp	r1, #10
 800ad86:	d103      	bne.n	800ad90 <__sfputc_r+0x1e>
 800ad88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad8c:	f000 b932 	b.w	800aff4 <__swbuf_r>
 800ad90:	6813      	ldr	r3, [r2, #0]
 800ad92:	1c58      	adds	r0, r3, #1
 800ad94:	6010      	str	r0, [r2, #0]
 800ad96:	7019      	strb	r1, [r3, #0]
 800ad98:	4608      	mov	r0, r1
 800ad9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad9e:	4770      	bx	lr

0800ada0 <__sfputs_r>:
 800ada0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ada2:	4606      	mov	r6, r0
 800ada4:	460f      	mov	r7, r1
 800ada6:	4614      	mov	r4, r2
 800ada8:	18d5      	adds	r5, r2, r3
 800adaa:	42ac      	cmp	r4, r5
 800adac:	d101      	bne.n	800adb2 <__sfputs_r+0x12>
 800adae:	2000      	movs	r0, #0
 800adb0:	e007      	b.n	800adc2 <__sfputs_r+0x22>
 800adb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adb6:	463a      	mov	r2, r7
 800adb8:	4630      	mov	r0, r6
 800adba:	f7ff ffda 	bl	800ad72 <__sfputc_r>
 800adbe:	1c43      	adds	r3, r0, #1
 800adc0:	d1f3      	bne.n	800adaa <__sfputs_r+0xa>
 800adc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800adc4 <_vfiprintf_r>:
 800adc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc8:	460d      	mov	r5, r1
 800adca:	b09d      	sub	sp, #116	@ 0x74
 800adcc:	4614      	mov	r4, r2
 800adce:	4698      	mov	r8, r3
 800add0:	4606      	mov	r6, r0
 800add2:	b118      	cbz	r0, 800addc <_vfiprintf_r+0x18>
 800add4:	6a03      	ldr	r3, [r0, #32]
 800add6:	b90b      	cbnz	r3, 800addc <_vfiprintf_r+0x18>
 800add8:	f7fe f8f2 	bl	8008fc0 <__sinit>
 800addc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800adde:	07d9      	lsls	r1, r3, #31
 800ade0:	d405      	bmi.n	800adee <_vfiprintf_r+0x2a>
 800ade2:	89ab      	ldrh	r3, [r5, #12]
 800ade4:	059a      	lsls	r2, r3, #22
 800ade6:	d402      	bmi.n	800adee <_vfiprintf_r+0x2a>
 800ade8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800adea:	f7fe fa14 	bl	8009216 <__retarget_lock_acquire_recursive>
 800adee:	89ab      	ldrh	r3, [r5, #12]
 800adf0:	071b      	lsls	r3, r3, #28
 800adf2:	d501      	bpl.n	800adf8 <_vfiprintf_r+0x34>
 800adf4:	692b      	ldr	r3, [r5, #16]
 800adf6:	b99b      	cbnz	r3, 800ae20 <_vfiprintf_r+0x5c>
 800adf8:	4629      	mov	r1, r5
 800adfa:	4630      	mov	r0, r6
 800adfc:	f000 f938 	bl	800b070 <__swsetup_r>
 800ae00:	b170      	cbz	r0, 800ae20 <_vfiprintf_r+0x5c>
 800ae02:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae04:	07dc      	lsls	r4, r3, #31
 800ae06:	d504      	bpl.n	800ae12 <_vfiprintf_r+0x4e>
 800ae08:	f04f 30ff 	mov.w	r0, #4294967295
 800ae0c:	b01d      	add	sp, #116	@ 0x74
 800ae0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae12:	89ab      	ldrh	r3, [r5, #12]
 800ae14:	0598      	lsls	r0, r3, #22
 800ae16:	d4f7      	bmi.n	800ae08 <_vfiprintf_r+0x44>
 800ae18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae1a:	f7fe f9fd 	bl	8009218 <__retarget_lock_release_recursive>
 800ae1e:	e7f3      	b.n	800ae08 <_vfiprintf_r+0x44>
 800ae20:	2300      	movs	r3, #0
 800ae22:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae24:	2320      	movs	r3, #32
 800ae26:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae2a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae2e:	2330      	movs	r3, #48	@ 0x30
 800ae30:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800afe0 <_vfiprintf_r+0x21c>
 800ae34:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae38:	f04f 0901 	mov.w	r9, #1
 800ae3c:	4623      	mov	r3, r4
 800ae3e:	469a      	mov	sl, r3
 800ae40:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae44:	b10a      	cbz	r2, 800ae4a <_vfiprintf_r+0x86>
 800ae46:	2a25      	cmp	r2, #37	@ 0x25
 800ae48:	d1f9      	bne.n	800ae3e <_vfiprintf_r+0x7a>
 800ae4a:	ebba 0b04 	subs.w	fp, sl, r4
 800ae4e:	d00b      	beq.n	800ae68 <_vfiprintf_r+0xa4>
 800ae50:	465b      	mov	r3, fp
 800ae52:	4622      	mov	r2, r4
 800ae54:	4629      	mov	r1, r5
 800ae56:	4630      	mov	r0, r6
 800ae58:	f7ff ffa2 	bl	800ada0 <__sfputs_r>
 800ae5c:	3001      	adds	r0, #1
 800ae5e:	f000 80a7 	beq.w	800afb0 <_vfiprintf_r+0x1ec>
 800ae62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae64:	445a      	add	r2, fp
 800ae66:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae68:	f89a 3000 	ldrb.w	r3, [sl]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	f000 809f 	beq.w	800afb0 <_vfiprintf_r+0x1ec>
 800ae72:	2300      	movs	r3, #0
 800ae74:	f04f 32ff 	mov.w	r2, #4294967295
 800ae78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae7c:	f10a 0a01 	add.w	sl, sl, #1
 800ae80:	9304      	str	r3, [sp, #16]
 800ae82:	9307      	str	r3, [sp, #28]
 800ae84:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae88:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae8a:	4654      	mov	r4, sl
 800ae8c:	2205      	movs	r2, #5
 800ae8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae92:	4853      	ldr	r0, [pc, #332]	@ (800afe0 <_vfiprintf_r+0x21c>)
 800ae94:	f7f5 f9a4 	bl	80001e0 <memchr>
 800ae98:	9a04      	ldr	r2, [sp, #16]
 800ae9a:	b9d8      	cbnz	r0, 800aed4 <_vfiprintf_r+0x110>
 800ae9c:	06d1      	lsls	r1, r2, #27
 800ae9e:	bf44      	itt	mi
 800aea0:	2320      	movmi	r3, #32
 800aea2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aea6:	0713      	lsls	r3, r2, #28
 800aea8:	bf44      	itt	mi
 800aeaa:	232b      	movmi	r3, #43	@ 0x2b
 800aeac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aeb0:	f89a 3000 	ldrb.w	r3, [sl]
 800aeb4:	2b2a      	cmp	r3, #42	@ 0x2a
 800aeb6:	d015      	beq.n	800aee4 <_vfiprintf_r+0x120>
 800aeb8:	9a07      	ldr	r2, [sp, #28]
 800aeba:	4654      	mov	r4, sl
 800aebc:	2000      	movs	r0, #0
 800aebe:	f04f 0c0a 	mov.w	ip, #10
 800aec2:	4621      	mov	r1, r4
 800aec4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aec8:	3b30      	subs	r3, #48	@ 0x30
 800aeca:	2b09      	cmp	r3, #9
 800aecc:	d94b      	bls.n	800af66 <_vfiprintf_r+0x1a2>
 800aece:	b1b0      	cbz	r0, 800aefe <_vfiprintf_r+0x13a>
 800aed0:	9207      	str	r2, [sp, #28]
 800aed2:	e014      	b.n	800aefe <_vfiprintf_r+0x13a>
 800aed4:	eba0 0308 	sub.w	r3, r0, r8
 800aed8:	fa09 f303 	lsl.w	r3, r9, r3
 800aedc:	4313      	orrs	r3, r2
 800aede:	9304      	str	r3, [sp, #16]
 800aee0:	46a2      	mov	sl, r4
 800aee2:	e7d2      	b.n	800ae8a <_vfiprintf_r+0xc6>
 800aee4:	9b03      	ldr	r3, [sp, #12]
 800aee6:	1d19      	adds	r1, r3, #4
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	9103      	str	r1, [sp, #12]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	bfbb      	ittet	lt
 800aef0:	425b      	neglt	r3, r3
 800aef2:	f042 0202 	orrlt.w	r2, r2, #2
 800aef6:	9307      	strge	r3, [sp, #28]
 800aef8:	9307      	strlt	r3, [sp, #28]
 800aefa:	bfb8      	it	lt
 800aefc:	9204      	strlt	r2, [sp, #16]
 800aefe:	7823      	ldrb	r3, [r4, #0]
 800af00:	2b2e      	cmp	r3, #46	@ 0x2e
 800af02:	d10a      	bne.n	800af1a <_vfiprintf_r+0x156>
 800af04:	7863      	ldrb	r3, [r4, #1]
 800af06:	2b2a      	cmp	r3, #42	@ 0x2a
 800af08:	d132      	bne.n	800af70 <_vfiprintf_r+0x1ac>
 800af0a:	9b03      	ldr	r3, [sp, #12]
 800af0c:	1d1a      	adds	r2, r3, #4
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	9203      	str	r2, [sp, #12]
 800af12:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af16:	3402      	adds	r4, #2
 800af18:	9305      	str	r3, [sp, #20]
 800af1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aff0 <_vfiprintf_r+0x22c>
 800af1e:	7821      	ldrb	r1, [r4, #0]
 800af20:	2203      	movs	r2, #3
 800af22:	4650      	mov	r0, sl
 800af24:	f7f5 f95c 	bl	80001e0 <memchr>
 800af28:	b138      	cbz	r0, 800af3a <_vfiprintf_r+0x176>
 800af2a:	9b04      	ldr	r3, [sp, #16]
 800af2c:	eba0 000a 	sub.w	r0, r0, sl
 800af30:	2240      	movs	r2, #64	@ 0x40
 800af32:	4082      	lsls	r2, r0
 800af34:	4313      	orrs	r3, r2
 800af36:	3401      	adds	r4, #1
 800af38:	9304      	str	r3, [sp, #16]
 800af3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af3e:	4829      	ldr	r0, [pc, #164]	@ (800afe4 <_vfiprintf_r+0x220>)
 800af40:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af44:	2206      	movs	r2, #6
 800af46:	f7f5 f94b 	bl	80001e0 <memchr>
 800af4a:	2800      	cmp	r0, #0
 800af4c:	d03f      	beq.n	800afce <_vfiprintf_r+0x20a>
 800af4e:	4b26      	ldr	r3, [pc, #152]	@ (800afe8 <_vfiprintf_r+0x224>)
 800af50:	bb1b      	cbnz	r3, 800af9a <_vfiprintf_r+0x1d6>
 800af52:	9b03      	ldr	r3, [sp, #12]
 800af54:	3307      	adds	r3, #7
 800af56:	f023 0307 	bic.w	r3, r3, #7
 800af5a:	3308      	adds	r3, #8
 800af5c:	9303      	str	r3, [sp, #12]
 800af5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af60:	443b      	add	r3, r7
 800af62:	9309      	str	r3, [sp, #36]	@ 0x24
 800af64:	e76a      	b.n	800ae3c <_vfiprintf_r+0x78>
 800af66:	fb0c 3202 	mla	r2, ip, r2, r3
 800af6a:	460c      	mov	r4, r1
 800af6c:	2001      	movs	r0, #1
 800af6e:	e7a8      	b.n	800aec2 <_vfiprintf_r+0xfe>
 800af70:	2300      	movs	r3, #0
 800af72:	3401      	adds	r4, #1
 800af74:	9305      	str	r3, [sp, #20]
 800af76:	4619      	mov	r1, r3
 800af78:	f04f 0c0a 	mov.w	ip, #10
 800af7c:	4620      	mov	r0, r4
 800af7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af82:	3a30      	subs	r2, #48	@ 0x30
 800af84:	2a09      	cmp	r2, #9
 800af86:	d903      	bls.n	800af90 <_vfiprintf_r+0x1cc>
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d0c6      	beq.n	800af1a <_vfiprintf_r+0x156>
 800af8c:	9105      	str	r1, [sp, #20]
 800af8e:	e7c4      	b.n	800af1a <_vfiprintf_r+0x156>
 800af90:	fb0c 2101 	mla	r1, ip, r1, r2
 800af94:	4604      	mov	r4, r0
 800af96:	2301      	movs	r3, #1
 800af98:	e7f0      	b.n	800af7c <_vfiprintf_r+0x1b8>
 800af9a:	ab03      	add	r3, sp, #12
 800af9c:	9300      	str	r3, [sp, #0]
 800af9e:	462a      	mov	r2, r5
 800afa0:	4b12      	ldr	r3, [pc, #72]	@ (800afec <_vfiprintf_r+0x228>)
 800afa2:	a904      	add	r1, sp, #16
 800afa4:	4630      	mov	r0, r6
 800afa6:	f7fd fbc7 	bl	8008738 <_printf_float>
 800afaa:	4607      	mov	r7, r0
 800afac:	1c78      	adds	r0, r7, #1
 800afae:	d1d6      	bne.n	800af5e <_vfiprintf_r+0x19a>
 800afb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800afb2:	07d9      	lsls	r1, r3, #31
 800afb4:	d405      	bmi.n	800afc2 <_vfiprintf_r+0x1fe>
 800afb6:	89ab      	ldrh	r3, [r5, #12]
 800afb8:	059a      	lsls	r2, r3, #22
 800afba:	d402      	bmi.n	800afc2 <_vfiprintf_r+0x1fe>
 800afbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800afbe:	f7fe f92b 	bl	8009218 <__retarget_lock_release_recursive>
 800afc2:	89ab      	ldrh	r3, [r5, #12]
 800afc4:	065b      	lsls	r3, r3, #25
 800afc6:	f53f af1f 	bmi.w	800ae08 <_vfiprintf_r+0x44>
 800afca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800afcc:	e71e      	b.n	800ae0c <_vfiprintf_r+0x48>
 800afce:	ab03      	add	r3, sp, #12
 800afd0:	9300      	str	r3, [sp, #0]
 800afd2:	462a      	mov	r2, r5
 800afd4:	4b05      	ldr	r3, [pc, #20]	@ (800afec <_vfiprintf_r+0x228>)
 800afd6:	a904      	add	r1, sp, #16
 800afd8:	4630      	mov	r0, r6
 800afda:	f7fd fe45 	bl	8008c68 <_printf_i>
 800afde:	e7e4      	b.n	800afaa <_vfiprintf_r+0x1e6>
 800afe0:	0800c340 	.word	0x0800c340
 800afe4:	0800c34a 	.word	0x0800c34a
 800afe8:	08008739 	.word	0x08008739
 800afec:	0800ada1 	.word	0x0800ada1
 800aff0:	0800c346 	.word	0x0800c346

0800aff4 <__swbuf_r>:
 800aff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff6:	460e      	mov	r6, r1
 800aff8:	4614      	mov	r4, r2
 800affa:	4605      	mov	r5, r0
 800affc:	b118      	cbz	r0, 800b006 <__swbuf_r+0x12>
 800affe:	6a03      	ldr	r3, [r0, #32]
 800b000:	b90b      	cbnz	r3, 800b006 <__swbuf_r+0x12>
 800b002:	f7fd ffdd 	bl	8008fc0 <__sinit>
 800b006:	69a3      	ldr	r3, [r4, #24]
 800b008:	60a3      	str	r3, [r4, #8]
 800b00a:	89a3      	ldrh	r3, [r4, #12]
 800b00c:	071a      	lsls	r2, r3, #28
 800b00e:	d501      	bpl.n	800b014 <__swbuf_r+0x20>
 800b010:	6923      	ldr	r3, [r4, #16]
 800b012:	b943      	cbnz	r3, 800b026 <__swbuf_r+0x32>
 800b014:	4621      	mov	r1, r4
 800b016:	4628      	mov	r0, r5
 800b018:	f000 f82a 	bl	800b070 <__swsetup_r>
 800b01c:	b118      	cbz	r0, 800b026 <__swbuf_r+0x32>
 800b01e:	f04f 37ff 	mov.w	r7, #4294967295
 800b022:	4638      	mov	r0, r7
 800b024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b026:	6823      	ldr	r3, [r4, #0]
 800b028:	6922      	ldr	r2, [r4, #16]
 800b02a:	1a98      	subs	r0, r3, r2
 800b02c:	6963      	ldr	r3, [r4, #20]
 800b02e:	b2f6      	uxtb	r6, r6
 800b030:	4283      	cmp	r3, r0
 800b032:	4637      	mov	r7, r6
 800b034:	dc05      	bgt.n	800b042 <__swbuf_r+0x4e>
 800b036:	4621      	mov	r1, r4
 800b038:	4628      	mov	r0, r5
 800b03a:	f7ff fda7 	bl	800ab8c <_fflush_r>
 800b03e:	2800      	cmp	r0, #0
 800b040:	d1ed      	bne.n	800b01e <__swbuf_r+0x2a>
 800b042:	68a3      	ldr	r3, [r4, #8]
 800b044:	3b01      	subs	r3, #1
 800b046:	60a3      	str	r3, [r4, #8]
 800b048:	6823      	ldr	r3, [r4, #0]
 800b04a:	1c5a      	adds	r2, r3, #1
 800b04c:	6022      	str	r2, [r4, #0]
 800b04e:	701e      	strb	r6, [r3, #0]
 800b050:	6962      	ldr	r2, [r4, #20]
 800b052:	1c43      	adds	r3, r0, #1
 800b054:	429a      	cmp	r2, r3
 800b056:	d004      	beq.n	800b062 <__swbuf_r+0x6e>
 800b058:	89a3      	ldrh	r3, [r4, #12]
 800b05a:	07db      	lsls	r3, r3, #31
 800b05c:	d5e1      	bpl.n	800b022 <__swbuf_r+0x2e>
 800b05e:	2e0a      	cmp	r6, #10
 800b060:	d1df      	bne.n	800b022 <__swbuf_r+0x2e>
 800b062:	4621      	mov	r1, r4
 800b064:	4628      	mov	r0, r5
 800b066:	f7ff fd91 	bl	800ab8c <_fflush_r>
 800b06a:	2800      	cmp	r0, #0
 800b06c:	d0d9      	beq.n	800b022 <__swbuf_r+0x2e>
 800b06e:	e7d6      	b.n	800b01e <__swbuf_r+0x2a>

0800b070 <__swsetup_r>:
 800b070:	b538      	push	{r3, r4, r5, lr}
 800b072:	4b29      	ldr	r3, [pc, #164]	@ (800b118 <__swsetup_r+0xa8>)
 800b074:	4605      	mov	r5, r0
 800b076:	6818      	ldr	r0, [r3, #0]
 800b078:	460c      	mov	r4, r1
 800b07a:	b118      	cbz	r0, 800b084 <__swsetup_r+0x14>
 800b07c:	6a03      	ldr	r3, [r0, #32]
 800b07e:	b90b      	cbnz	r3, 800b084 <__swsetup_r+0x14>
 800b080:	f7fd ff9e 	bl	8008fc0 <__sinit>
 800b084:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b088:	0719      	lsls	r1, r3, #28
 800b08a:	d422      	bmi.n	800b0d2 <__swsetup_r+0x62>
 800b08c:	06da      	lsls	r2, r3, #27
 800b08e:	d407      	bmi.n	800b0a0 <__swsetup_r+0x30>
 800b090:	2209      	movs	r2, #9
 800b092:	602a      	str	r2, [r5, #0]
 800b094:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b098:	81a3      	strh	r3, [r4, #12]
 800b09a:	f04f 30ff 	mov.w	r0, #4294967295
 800b09e:	e033      	b.n	800b108 <__swsetup_r+0x98>
 800b0a0:	0758      	lsls	r0, r3, #29
 800b0a2:	d512      	bpl.n	800b0ca <__swsetup_r+0x5a>
 800b0a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0a6:	b141      	cbz	r1, 800b0ba <__swsetup_r+0x4a>
 800b0a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b0ac:	4299      	cmp	r1, r3
 800b0ae:	d002      	beq.n	800b0b6 <__swsetup_r+0x46>
 800b0b0:	4628      	mov	r0, r5
 800b0b2:	f7fe ff0d 	bl	8009ed0 <_free_r>
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b0ba:	89a3      	ldrh	r3, [r4, #12]
 800b0bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b0c0:	81a3      	strh	r3, [r4, #12]
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	6063      	str	r3, [r4, #4]
 800b0c6:	6923      	ldr	r3, [r4, #16]
 800b0c8:	6023      	str	r3, [r4, #0]
 800b0ca:	89a3      	ldrh	r3, [r4, #12]
 800b0cc:	f043 0308 	orr.w	r3, r3, #8
 800b0d0:	81a3      	strh	r3, [r4, #12]
 800b0d2:	6923      	ldr	r3, [r4, #16]
 800b0d4:	b94b      	cbnz	r3, 800b0ea <__swsetup_r+0x7a>
 800b0d6:	89a3      	ldrh	r3, [r4, #12]
 800b0d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b0dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0e0:	d003      	beq.n	800b0ea <__swsetup_r+0x7a>
 800b0e2:	4621      	mov	r1, r4
 800b0e4:	4628      	mov	r0, r5
 800b0e6:	f000 f883 	bl	800b1f0 <__smakebuf_r>
 800b0ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0ee:	f013 0201 	ands.w	r2, r3, #1
 800b0f2:	d00a      	beq.n	800b10a <__swsetup_r+0x9a>
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	60a2      	str	r2, [r4, #8]
 800b0f8:	6962      	ldr	r2, [r4, #20]
 800b0fa:	4252      	negs	r2, r2
 800b0fc:	61a2      	str	r2, [r4, #24]
 800b0fe:	6922      	ldr	r2, [r4, #16]
 800b100:	b942      	cbnz	r2, 800b114 <__swsetup_r+0xa4>
 800b102:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b106:	d1c5      	bne.n	800b094 <__swsetup_r+0x24>
 800b108:	bd38      	pop	{r3, r4, r5, pc}
 800b10a:	0799      	lsls	r1, r3, #30
 800b10c:	bf58      	it	pl
 800b10e:	6962      	ldrpl	r2, [r4, #20]
 800b110:	60a2      	str	r2, [r4, #8]
 800b112:	e7f4      	b.n	800b0fe <__swsetup_r+0x8e>
 800b114:	2000      	movs	r0, #0
 800b116:	e7f7      	b.n	800b108 <__swsetup_r+0x98>
 800b118:	20000024 	.word	0x20000024

0800b11c <_raise_r>:
 800b11c:	291f      	cmp	r1, #31
 800b11e:	b538      	push	{r3, r4, r5, lr}
 800b120:	4605      	mov	r5, r0
 800b122:	460c      	mov	r4, r1
 800b124:	d904      	bls.n	800b130 <_raise_r+0x14>
 800b126:	2316      	movs	r3, #22
 800b128:	6003      	str	r3, [r0, #0]
 800b12a:	f04f 30ff 	mov.w	r0, #4294967295
 800b12e:	bd38      	pop	{r3, r4, r5, pc}
 800b130:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b132:	b112      	cbz	r2, 800b13a <_raise_r+0x1e>
 800b134:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b138:	b94b      	cbnz	r3, 800b14e <_raise_r+0x32>
 800b13a:	4628      	mov	r0, r5
 800b13c:	f000 f830 	bl	800b1a0 <_getpid_r>
 800b140:	4622      	mov	r2, r4
 800b142:	4601      	mov	r1, r0
 800b144:	4628      	mov	r0, r5
 800b146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b14a:	f000 b817 	b.w	800b17c <_kill_r>
 800b14e:	2b01      	cmp	r3, #1
 800b150:	d00a      	beq.n	800b168 <_raise_r+0x4c>
 800b152:	1c59      	adds	r1, r3, #1
 800b154:	d103      	bne.n	800b15e <_raise_r+0x42>
 800b156:	2316      	movs	r3, #22
 800b158:	6003      	str	r3, [r0, #0]
 800b15a:	2001      	movs	r0, #1
 800b15c:	e7e7      	b.n	800b12e <_raise_r+0x12>
 800b15e:	2100      	movs	r1, #0
 800b160:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b164:	4620      	mov	r0, r4
 800b166:	4798      	blx	r3
 800b168:	2000      	movs	r0, #0
 800b16a:	e7e0      	b.n	800b12e <_raise_r+0x12>

0800b16c <raise>:
 800b16c:	4b02      	ldr	r3, [pc, #8]	@ (800b178 <raise+0xc>)
 800b16e:	4601      	mov	r1, r0
 800b170:	6818      	ldr	r0, [r3, #0]
 800b172:	f7ff bfd3 	b.w	800b11c <_raise_r>
 800b176:	bf00      	nop
 800b178:	20000024 	.word	0x20000024

0800b17c <_kill_r>:
 800b17c:	b538      	push	{r3, r4, r5, lr}
 800b17e:	4d07      	ldr	r5, [pc, #28]	@ (800b19c <_kill_r+0x20>)
 800b180:	2300      	movs	r3, #0
 800b182:	4604      	mov	r4, r0
 800b184:	4608      	mov	r0, r1
 800b186:	4611      	mov	r1, r2
 800b188:	602b      	str	r3, [r5, #0]
 800b18a:	f7f7 f98b 	bl	80024a4 <_kill>
 800b18e:	1c43      	adds	r3, r0, #1
 800b190:	d102      	bne.n	800b198 <_kill_r+0x1c>
 800b192:	682b      	ldr	r3, [r5, #0]
 800b194:	b103      	cbz	r3, 800b198 <_kill_r+0x1c>
 800b196:	6023      	str	r3, [r4, #0]
 800b198:	bd38      	pop	{r3, r4, r5, pc}
 800b19a:	bf00      	nop
 800b19c:	20004eec 	.word	0x20004eec

0800b1a0 <_getpid_r>:
 800b1a0:	f7f7 b978 	b.w	8002494 <_getpid>

0800b1a4 <__swhatbuf_r>:
 800b1a4:	b570      	push	{r4, r5, r6, lr}
 800b1a6:	460c      	mov	r4, r1
 800b1a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1ac:	2900      	cmp	r1, #0
 800b1ae:	b096      	sub	sp, #88	@ 0x58
 800b1b0:	4615      	mov	r5, r2
 800b1b2:	461e      	mov	r6, r3
 800b1b4:	da0d      	bge.n	800b1d2 <__swhatbuf_r+0x2e>
 800b1b6:	89a3      	ldrh	r3, [r4, #12]
 800b1b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b1bc:	f04f 0100 	mov.w	r1, #0
 800b1c0:	bf14      	ite	ne
 800b1c2:	2340      	movne	r3, #64	@ 0x40
 800b1c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b1c8:	2000      	movs	r0, #0
 800b1ca:	6031      	str	r1, [r6, #0]
 800b1cc:	602b      	str	r3, [r5, #0]
 800b1ce:	b016      	add	sp, #88	@ 0x58
 800b1d0:	bd70      	pop	{r4, r5, r6, pc}
 800b1d2:	466a      	mov	r2, sp
 800b1d4:	f000 f848 	bl	800b268 <_fstat_r>
 800b1d8:	2800      	cmp	r0, #0
 800b1da:	dbec      	blt.n	800b1b6 <__swhatbuf_r+0x12>
 800b1dc:	9901      	ldr	r1, [sp, #4]
 800b1de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b1e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b1e6:	4259      	negs	r1, r3
 800b1e8:	4159      	adcs	r1, r3
 800b1ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b1ee:	e7eb      	b.n	800b1c8 <__swhatbuf_r+0x24>

0800b1f0 <__smakebuf_r>:
 800b1f0:	898b      	ldrh	r3, [r1, #12]
 800b1f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1f4:	079d      	lsls	r5, r3, #30
 800b1f6:	4606      	mov	r6, r0
 800b1f8:	460c      	mov	r4, r1
 800b1fa:	d507      	bpl.n	800b20c <__smakebuf_r+0x1c>
 800b1fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b200:	6023      	str	r3, [r4, #0]
 800b202:	6123      	str	r3, [r4, #16]
 800b204:	2301      	movs	r3, #1
 800b206:	6163      	str	r3, [r4, #20]
 800b208:	b003      	add	sp, #12
 800b20a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b20c:	ab01      	add	r3, sp, #4
 800b20e:	466a      	mov	r2, sp
 800b210:	f7ff ffc8 	bl	800b1a4 <__swhatbuf_r>
 800b214:	9f00      	ldr	r7, [sp, #0]
 800b216:	4605      	mov	r5, r0
 800b218:	4639      	mov	r1, r7
 800b21a:	4630      	mov	r0, r6
 800b21c:	f7fe fecc 	bl	8009fb8 <_malloc_r>
 800b220:	b948      	cbnz	r0, 800b236 <__smakebuf_r+0x46>
 800b222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b226:	059a      	lsls	r2, r3, #22
 800b228:	d4ee      	bmi.n	800b208 <__smakebuf_r+0x18>
 800b22a:	f023 0303 	bic.w	r3, r3, #3
 800b22e:	f043 0302 	orr.w	r3, r3, #2
 800b232:	81a3      	strh	r3, [r4, #12]
 800b234:	e7e2      	b.n	800b1fc <__smakebuf_r+0xc>
 800b236:	89a3      	ldrh	r3, [r4, #12]
 800b238:	6020      	str	r0, [r4, #0]
 800b23a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b23e:	81a3      	strh	r3, [r4, #12]
 800b240:	9b01      	ldr	r3, [sp, #4]
 800b242:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b246:	b15b      	cbz	r3, 800b260 <__smakebuf_r+0x70>
 800b248:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b24c:	4630      	mov	r0, r6
 800b24e:	f000 f81d 	bl	800b28c <_isatty_r>
 800b252:	b128      	cbz	r0, 800b260 <__smakebuf_r+0x70>
 800b254:	89a3      	ldrh	r3, [r4, #12]
 800b256:	f023 0303 	bic.w	r3, r3, #3
 800b25a:	f043 0301 	orr.w	r3, r3, #1
 800b25e:	81a3      	strh	r3, [r4, #12]
 800b260:	89a3      	ldrh	r3, [r4, #12]
 800b262:	431d      	orrs	r5, r3
 800b264:	81a5      	strh	r5, [r4, #12]
 800b266:	e7cf      	b.n	800b208 <__smakebuf_r+0x18>

0800b268 <_fstat_r>:
 800b268:	b538      	push	{r3, r4, r5, lr}
 800b26a:	4d07      	ldr	r5, [pc, #28]	@ (800b288 <_fstat_r+0x20>)
 800b26c:	2300      	movs	r3, #0
 800b26e:	4604      	mov	r4, r0
 800b270:	4608      	mov	r0, r1
 800b272:	4611      	mov	r1, r2
 800b274:	602b      	str	r3, [r5, #0]
 800b276:	f7f7 f959 	bl	800252c <_fstat>
 800b27a:	1c43      	adds	r3, r0, #1
 800b27c:	d102      	bne.n	800b284 <_fstat_r+0x1c>
 800b27e:	682b      	ldr	r3, [r5, #0]
 800b280:	b103      	cbz	r3, 800b284 <_fstat_r+0x1c>
 800b282:	6023      	str	r3, [r4, #0]
 800b284:	bd38      	pop	{r3, r4, r5, pc}
 800b286:	bf00      	nop
 800b288:	20004eec 	.word	0x20004eec

0800b28c <_isatty_r>:
 800b28c:	b538      	push	{r3, r4, r5, lr}
 800b28e:	4d06      	ldr	r5, [pc, #24]	@ (800b2a8 <_isatty_r+0x1c>)
 800b290:	2300      	movs	r3, #0
 800b292:	4604      	mov	r4, r0
 800b294:	4608      	mov	r0, r1
 800b296:	602b      	str	r3, [r5, #0]
 800b298:	f7f7 f958 	bl	800254c <_isatty>
 800b29c:	1c43      	adds	r3, r0, #1
 800b29e:	d102      	bne.n	800b2a6 <_isatty_r+0x1a>
 800b2a0:	682b      	ldr	r3, [r5, #0]
 800b2a2:	b103      	cbz	r3, 800b2a6 <_isatty_r+0x1a>
 800b2a4:	6023      	str	r3, [r4, #0]
 800b2a6:	bd38      	pop	{r3, r4, r5, pc}
 800b2a8:	20004eec 	.word	0x20004eec

0800b2ac <_init>:
 800b2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ae:	bf00      	nop
 800b2b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2b2:	bc08      	pop	{r3}
 800b2b4:	469e      	mov	lr, r3
 800b2b6:	4770      	bx	lr

0800b2b8 <_fini>:
 800b2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ba:	bf00      	nop
 800b2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2be:	bc08      	pop	{r3}
 800b2c0:	469e      	mov	lr, r3
 800b2c2:	4770      	bx	lr
